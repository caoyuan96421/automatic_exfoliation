
Automatic_Exfoliation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001f2  00800100  0000179a  0000182e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000179a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000434  008002f2  008002f2  00001a20  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a20  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00001a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008d3  00000000  00000000  00001b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002e1  00000000  00000000  000023e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000045f  00000000  00000000  000026c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000484  00000000  00000000  00002b28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040f  00000000  00000000  00002fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ec5  00000000  00000000  000033bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00004280  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 89 08 	jmp	0x1112	; 0x1112 <__vector_1>
       8:	0c 94 a3 01 	jmp	0x346	; 0x346 <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 04 08 	jmp	0x1008	; 0x1008 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e9       	ldi	r30, 0x9A	; 154
      7c:	f7 e1       	ldi	r31, 0x17	; 23
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a2 3f       	cpi	r26, 0xF2	; 242
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	27 e0       	ldi	r18, 0x07	; 7
      8c:	a2 ef       	ldi	r26, 0xF2	; 242
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a6 32       	cpi	r26, 0x26	; 38
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 ad 08 	call	0x115a	; 0x115a <main>
      9e:	0c 94 cb 0b 	jmp	0x1796	; 0x1796 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_write_serial>:
void limitTriggeredCallBack();

/*Functions for serial debug printing*/
void _write_serial(unsigned char *s){
	unsigned int count=0;
	for(;*s!='\0';s++,count++){
      a6:	fc 01       	movw	r30, r24
      a8:	40 81       	ld	r20, Z
      aa:	44 23       	and	r20, r20
      ac:	e1 f0       	breq	.+56     	; 0xe6 <_write_serial+0x40>
      ae:	31 96       	adiw	r30, 0x01	; 1
void buttonReleasedCallBack();
void limitTriggeredCallBack();

/*Functions for serial debug printing*/
void _write_serial(unsigned char *s){
	unsigned int count=0;
      b0:	20 e0       	ldi	r18, 0x00	; 0
      b2:	30 e0       	ldi	r19, 0x00	; 0
	for(;*s!='\0';s++,count++){
		buffer[buffer_tail] = *s;
      b4:	a0 91 02 03 	lds	r26, 0x0302
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	a7 5e       	subi	r26, 0xE7	; 231
      bc:	ba 4f       	sbci	r27, 0xFA	; 250
      be:	4c 93       	st	X, r20
		buffer_tail++;
      c0:	80 91 02 03 	lds	r24, 0x0302
      c4:	8f 5f       	subi	r24, 0xFF	; 255
      c6:	80 93 02 03 	sts	0x0302, r24
		if(buffer_tail == BUF_SIZE)
      ca:	80 91 02 03 	lds	r24, 0x0302
void limitTriggeredCallBack();

/*Functions for serial debug printing*/
void _write_serial(unsigned char *s){
	unsigned int count=0;
	for(;*s!='\0';s++,count++){
      ce:	2f 5f       	subi	r18, 0xFF	; 255
      d0:	3f 4f       	sbci	r19, 0xFF	; 255
      d2:	41 91       	ld	r20, Z+
      d4:	41 11       	cpse	r20, r1
      d6:	ee cf       	rjmp	.-36     	; 0xb4 <_write_serial+0xe>
		buffer[buffer_tail] = *s;
		buffer_tail++;
		if(buffer_tail == BUF_SIZE)
		buffer_tail = 0;
	}
	if(count==0)return;
      d8:	23 2b       	or	r18, r19
      da:	29 f0       	breq	.+10     	; 0xe6 <_write_serial+0x40>
	UCSR0B |= _BV(TXEN0) | _BV(UDRIE0);	// Start transmitting
      dc:	e1 ec       	ldi	r30, 0xC1	; 193
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	80 81       	ld	r24, Z
      e2:	88 62       	ori	r24, 0x28	; 40
      e4:	80 83       	st	Z, r24
      e6:	08 95       	ret

000000e8 <uprintf>:
}

/*Use as normal printf. Safe even within interrupt environment.*/
void uprintf(char *s, ...){
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
      ec:	cd b7       	in	r28, 0x3d	; 61
      ee:	de b7       	in	r29, 0x3e	; 62
      f0:	fe 01       	movw	r30, r28
      f2:	35 96       	adiw	r30, 0x05	; 5
      f4:	61 91       	ld	r22, Z+
      f6:	71 91       	ld	r23, Z+
	va_list args;
	va_start(args,s);
	vsprintf(buffer2,s,args);
      f8:	af 01       	movw	r20, r30
      fa:	81 e1       	ldi	r24, 0x11	; 17
      fc:	93 e0       	ldi	r25, 0x03	; 3
      fe:	0e 94 00 09 	call	0x1200	; 0x1200 <vsprintf>
	va_end(args);
	_write_serial(buffer2);
     102:	81 e1       	ldi	r24, 0x11	; 17
     104:	93 e0       	ldi	r25, 0x03	; 3
     106:	0e 94 53 00 	call	0xa6	; 0xa6 <_write_serial>
}
     10a:	df 91       	pop	r29
     10c:	cf 91       	pop	r28
     10e:	08 95       	ret

00000110 <__vector_16>:
ISR(TIMER2_COMPA_vect, ISR_BLOCK){	// ISR for Timer 2 tick. Global 1ms timing
	milliseconds ++;
	timer2CallBack();
}

ISR(TIMER0_OVF_vect,ISR_BLOCK){ // ISR for Timer 0 overflow event.
     110:	1f 92       	push	r1
     112:	0f 92       	push	r0
     114:	0f b6       	in	r0, 0x3f	; 63
     116:	0f 92       	push	r0
     118:	11 24       	eor	r1, r1
     11a:	2f 93       	push	r18
     11c:	3f 93       	push	r19
     11e:	4f 93       	push	r20
     120:	5f 93       	push	r21
     122:	6f 93       	push	r22
     124:	7f 93       	push	r23
     126:	8f 93       	push	r24
     128:	9f 93       	push	r25
     12a:	af 93       	push	r26
     12c:	bf 93       	push	r27
     12e:	ef 93       	push	r30
     130:	ff 93       	push	r31
	/*Each overflow means 256 steps*/
	position += 256L * step;
     132:	80 91 19 07 	lds	r24, 0x0719
     136:	90 91 1a 07 	lds	r25, 0x071A
     13a:	40 91 0c 03 	lds	r20, 0x030C
     13e:	50 91 0d 03 	lds	r21, 0x030D
     142:	60 91 0e 03 	lds	r22, 0x030E
     146:	70 91 0f 03 	lds	r23, 0x030F
     14a:	aa 27       	eor	r26, r26
     14c:	97 fd       	sbrc	r25, 7
     14e:	a0 95       	com	r26
     150:	ba 2f       	mov	r27, r26
     152:	ba 2f       	mov	r27, r26
     154:	a9 2f       	mov	r26, r25
     156:	98 2f       	mov	r25, r24
     158:	88 27       	eor	r24, r24
     15a:	84 0f       	add	r24, r20
     15c:	95 1f       	adc	r25, r21
     15e:	a6 1f       	adc	r26, r22
     160:	b7 1f       	adc	r27, r23
     162:	80 93 0c 03 	sts	0x030C, r24
     166:	90 93 0d 03 	sts	0x030D, r25
     16a:	a0 93 0e 03 	sts	0x030E, r26
     16e:	b0 93 0f 03 	sts	0x030F, r27
	if(position < 0 && system_state == AUTO_FORWARD || position > CRITICAL_POS && system_state == AUTO_BACKWARD){
     172:	80 91 0c 03 	lds	r24, 0x030C
     176:	90 91 0d 03 	lds	r25, 0x030D
     17a:	a0 91 0e 03 	lds	r26, 0x030E
     17e:	b0 91 0f 03 	lds	r27, 0x030F
     182:	bb 23       	and	r27, r27
     184:	24 f4       	brge	.+8      	; 0x18e <__vector_16+0x7e>
     186:	80 91 fd 02 	lds	r24, 0x02FD
     18a:	81 30       	cpi	r24, 0x01	; 1
     18c:	89 f0       	breq	.+34     	; 0x1b0 <__vector_16+0xa0>
     18e:	80 91 0c 03 	lds	r24, 0x030C
     192:	90 91 0d 03 	lds	r25, 0x030D
     196:	a0 91 0e 03 	lds	r26, 0x030E
     19a:	b0 91 0f 03 	lds	r27, 0x030F
     19e:	81 36       	cpi	r24, 0x61	; 97
     1a0:	91 42       	sbci	r25, 0x21	; 33
     1a2:	a0 46       	sbci	r26, 0x60	; 96
     1a4:	b1 05       	cpc	r27, r1
     1a6:	84 f0       	brlt	.+32     	; 0x1c8 <__vector_16+0xb8>
     1a8:	80 91 fd 02 	lds	r24, 0x02FD
     1ac:	82 30       	cpi	r24, 0x02	; 2
     1ae:	61 f4       	brne	.+24     	; 0x1c8 <__vector_16+0xb8>
		// For safety, exit AUTOMATIC modes immediately
		system_state = IDLE;
     1b0:	10 92 fd 02 	sts	0x02FD, r1
		if(ISDEBUG)
     1b4:	4f 99       	sbic	0x09, 7	; 9
     1b6:	08 c0       	rjmp	.+16     	; 0x1c8 <__vector_16+0xb8>
			uprintf("IDLE\r\n");
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	91 e0       	ldi	r25, 0x01	; 1
     1bc:	9f 93       	push	r25
     1be:	8f 93       	push	r24
     1c0:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     1c4:	0f 90       	pop	r0
     1c6:	0f 90       	pop	r0
	}
}
     1c8:	ff 91       	pop	r31
     1ca:	ef 91       	pop	r30
     1cc:	bf 91       	pop	r27
     1ce:	af 91       	pop	r26
     1d0:	9f 91       	pop	r25
     1d2:	8f 91       	pop	r24
     1d4:	7f 91       	pop	r23
     1d6:	6f 91       	pop	r22
     1d8:	5f 91       	pop	r21
     1da:	4f 91       	pop	r20
     1dc:	3f 91       	pop	r19
     1de:	2f 91       	pop	r18
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	0f 90       	pop	r0
     1e6:	1f 90       	pop	r1
     1e8:	18 95       	reti

000001ea <__vector_19>:

ISR(USART_UDRE_vect,ISR_BLOCK){ // ISR for USART, send next char
     1ea:	1f 92       	push	r1
     1ec:	0f 92       	push	r0
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	0f 92       	push	r0
     1f2:	11 24       	eor	r1, r1
     1f4:	8f 93       	push	r24
     1f6:	9f 93       	push	r25
     1f8:	ef 93       	push	r30
     1fa:	ff 93       	push	r31
	if(buffer_head != buffer_tail){
     1fc:	90 91 03 03 	lds	r25, 0x0303
     200:	80 91 02 03 	lds	r24, 0x0302
     204:	98 17       	cp	r25, r24
     206:	81 f0       	breq	.+32     	; 0x228 <__vector_19+0x3e>
		UDR0 = buffer[buffer_head];
     208:	e0 91 03 03 	lds	r30, 0x0303
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	e7 5e       	subi	r30, 0xE7	; 231
     210:	fa 4f       	sbci	r31, 0xFA	; 250
     212:	80 81       	ld	r24, Z
     214:	80 93 c6 00 	sts	0x00C6, r24
		buffer_head++;
     218:	80 91 03 03 	lds	r24, 0x0303
     21c:	8f 5f       	subi	r24, 0xFF	; 255
     21e:	80 93 03 03 	sts	0x0303, r24
		if(buffer_head == BUF_SIZE)
     222:	80 91 03 03 	lds	r24, 0x0303
     226:	05 c0       	rjmp	.+10     	; 0x232 <__vector_19+0x48>
		buffer_head = 0;
	}
	else{
		UCSR0B &= ~(_BV(TXEN0) | _BV(UDRIE0)) ;	// Transmit finished. Stop it
     228:	e1 ec       	ldi	r30, 0xC1	; 193
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	87 7d       	andi	r24, 0xD7	; 215
     230:	80 83       	st	Z, r24
	}
}
     232:	ff 91       	pop	r31
     234:	ef 91       	pop	r30
     236:	9f 91       	pop	r25
     238:	8f 91       	pop	r24
     23a:	0f 90       	pop	r0
     23c:	0f be       	out	0x3f, r0	; 63
     23e:	0f 90       	pop	r0
     240:	1f 90       	pop	r1
     242:	18 95       	reti

00000244 <__vector_21>:

ISR(ADC_vect,ISR_BLOCK){// ISR for ADC event
     244:	1f 92       	push	r1
     246:	0f 92       	push	r0
     248:	0f b6       	in	r0, 0x3f	; 63
     24a:	0f 92       	push	r0
     24c:	11 24       	eor	r1, r1
     24e:	af 92       	push	r10
     250:	bf 92       	push	r11
     252:	cf 92       	push	r12
     254:	df 92       	push	r13
     256:	ef 92       	push	r14
     258:	ff 92       	push	r15
     25a:	0f 93       	push	r16
     25c:	1f 93       	push	r17
     25e:	2f 93       	push	r18
     260:	3f 93       	push	r19
     262:	4f 93       	push	r20
     264:	5f 93       	push	r21
     266:	6f 93       	push	r22
     268:	7f 93       	push	r23
     26a:	8f 93       	push	r24
     26c:	9f 93       	push	r25
     26e:	af 93       	push	r26
	if(milliseconds - speed_update_timer > SPEED_UPDATE_INTERVAL){
     270:	20 91 04 03 	lds	r18, 0x0304
     274:	30 91 05 03 	lds	r19, 0x0305
     278:	40 91 06 03 	lds	r20, 0x0306
     27c:	50 91 07 03 	lds	r21, 0x0307
     280:	60 91 08 03 	lds	r22, 0x0308
     284:	70 91 09 03 	lds	r23, 0x0309
     288:	80 91 0a 03 	lds	r24, 0x030A
     28c:	90 91 0b 03 	lds	r25, 0x030B
     290:	a0 90 f4 02 	lds	r10, 0x02F4
     294:	b0 90 f5 02 	lds	r11, 0x02F5
     298:	c0 90 f6 02 	lds	r12, 0x02F6
     29c:	d0 90 f7 02 	lds	r13, 0x02F7
     2a0:	e0 90 f8 02 	lds	r14, 0x02F8
     2a4:	f0 90 f9 02 	lds	r15, 0x02F9
     2a8:	00 91 fa 02 	lds	r16, 0x02FA
     2ac:	10 91 fb 02 	lds	r17, 0x02FB
     2b0:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__subdi3>
     2b4:	a2 e3       	ldi	r26, 0x32	; 50
     2b6:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <__cmpdi2_s8>
     2ba:	79 f1       	breq	.+94     	; 0x31a <__vector_21+0xd6>
     2bc:	70 f1       	brcs	.+92     	; 0x31a <__vector_21+0xd6>
		speed = 1023 - (ADCL | ((unsigned int)ADCH << 8));
     2be:	20 91 78 00 	lds	r18, 0x0078
     2c2:	80 91 79 00 	lds	r24, 0x0079
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	38 2b       	or	r19, r24
     2ca:	8f ef       	ldi	r24, 0xFF	; 255
     2cc:	93 e0       	ldi	r25, 0x03	; 3
     2ce:	82 1b       	sub	r24, r18
     2d0:	93 0b       	sbc	r25, r19
     2d2:	90 93 01 03 	sts	0x0301, r25
     2d6:	80 93 00 03 	sts	0x0300, r24
		speed_update_timer = milliseconds;
     2da:	70 91 04 03 	lds	r23, 0x0304
     2de:	60 91 05 03 	lds	r22, 0x0305
     2e2:	50 91 06 03 	lds	r21, 0x0306
     2e6:	40 91 07 03 	lds	r20, 0x0307
     2ea:	30 91 08 03 	lds	r19, 0x0308
     2ee:	20 91 09 03 	lds	r18, 0x0309
     2f2:	90 91 0a 03 	lds	r25, 0x030A
     2f6:	80 91 0b 03 	lds	r24, 0x030B
     2fa:	70 93 f4 02 	sts	0x02F4, r23
     2fe:	60 93 f5 02 	sts	0x02F5, r22
     302:	50 93 f6 02 	sts	0x02F6, r21
     306:	40 93 f7 02 	sts	0x02F7, r20
     30a:	30 93 f8 02 	sts	0x02F8, r19
     30e:	20 93 f9 02 	sts	0x02F9, r18
     312:	90 93 fa 02 	sts	0x02FA, r25
     316:	80 93 fb 02 	sts	0x02FB, r24
	}
}
     31a:	af 91       	pop	r26
     31c:	9f 91       	pop	r25
     31e:	8f 91       	pop	r24
     320:	7f 91       	pop	r23
     322:	6f 91       	pop	r22
     324:	5f 91       	pop	r21
     326:	4f 91       	pop	r20
     328:	3f 91       	pop	r19
     32a:	2f 91       	pop	r18
     32c:	1f 91       	pop	r17
     32e:	0f 91       	pop	r16
     330:	ff 90       	pop	r15
     332:	ef 90       	pop	r14
     334:	df 90       	pop	r13
     336:	cf 90       	pop	r12
     338:	bf 90       	pop	r11
     33a:	af 90       	pop	r10
     33c:	0f 90       	pop	r0
     33e:	0f be       	out	0x3f, r0	; 63
     340:	0f 90       	pop	r0
     342:	1f 90       	pop	r1
     344:	18 95       	reti

00000346 <__vector_2>:

ISR(INT0_vect,ISR_BLOCK){// ISR for LIMIT switch
	limitTriggeredCallBack();
}

ISR(INT1_vect,ISR_BLOCK){// ISR for BUTTON event
     346:	1f 92       	push	r1
     348:	0f 92       	push	r0
     34a:	0f b6       	in	r0, 0x3f	; 63
     34c:	0f 92       	push	r0
     34e:	11 24       	eor	r1, r1
     350:	2f 93       	push	r18
     352:	3f 93       	push	r19
     354:	4f 93       	push	r20
     356:	5f 93       	push	r21
     358:	6f 93       	push	r22
     35a:	7f 93       	push	r23
     35c:	8f 93       	push	r24
     35e:	9f 93       	push	r25
     360:	af 93       	push	r26
     362:	bf 93       	push	r27
     364:	ef 93       	push	r30
     366:	ff 93       	push	r31
	if(ISDEBUG)
     368:	4f 99       	sbic	0x09, 7	; 9
     36a:	26 c0       	rjmp	.+76     	; 0x3b8 <__vector_2+0x72>
		uprintf("BUTTON event at %ld\r\n",milliseconds);
     36c:	80 91 04 03 	lds	r24, 0x0304
     370:	90 91 05 03 	lds	r25, 0x0305
     374:	20 91 06 03 	lds	r18, 0x0306
     378:	30 91 07 03 	lds	r19, 0x0307
     37c:	40 91 08 03 	lds	r20, 0x0308
     380:	50 91 09 03 	lds	r21, 0x0309
     384:	60 91 0a 03 	lds	r22, 0x030A
     388:	70 91 0b 03 	lds	r23, 0x030B
     38c:	7f 93       	push	r23
     38e:	6f 93       	push	r22
     390:	5f 93       	push	r21
     392:	4f 93       	push	r20
     394:	3f 93       	push	r19
     396:	2f 93       	push	r18
     398:	9f 93       	push	r25
     39a:	8f 93       	push	r24
     39c:	87 e0       	ldi	r24, 0x07	; 7
     39e:	91 e0       	ldi	r25, 0x01	; 1
     3a0:	9f 93       	push	r25
     3a2:	8f 93       	push	r24
     3a4:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     3a8:	8d b7       	in	r24, 0x3d	; 61
     3aa:	9e b7       	in	r25, 0x3e	; 62
     3ac:	0a 96       	adiw	r24, 0x0a	; 10
     3ae:	0f b6       	in	r0, 0x3f	; 63
     3b0:	f8 94       	cli
     3b2:	9e bf       	out	0x3e, r25	; 62
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	8d bf       	out	0x3d, r24	; 61
	switch(button_state){
     3b8:	80 91 ff 02 	lds	r24, 0x02FF
     3bc:	88 23       	and	r24, r24
     3be:	19 f0       	breq	.+6      	; 0x3c6 <__vector_2+0x80>
     3c0:	83 30       	cpi	r24, 0x03	; 3
     3c2:	39 f1       	breq	.+78     	; 0x412 <__vector_2+0xcc>
     3c4:	4b c0       	rjmp	.+150    	; 0x45c <__vector_2+0x116>
		case RELEASED:
			if(READ(BUTTON) == 0){
     3c6:	4b 99       	sbic	0x09, 3	; 9
     3c8:	49 c0       	rjmp	.+146    	; 0x45c <__vector_2+0x116>
				button_timer = milliseconds;				// start timer
     3ca:	70 91 04 03 	lds	r23, 0x0304
     3ce:	60 91 05 03 	lds	r22, 0x0305
     3d2:	50 91 06 03 	lds	r21, 0x0306
     3d6:	40 91 07 03 	lds	r20, 0x0307
     3da:	30 91 08 03 	lds	r19, 0x0308
     3de:	20 91 09 03 	lds	r18, 0x0309
     3e2:	90 91 0a 03 	lds	r25, 0x030A
     3e6:	80 91 0b 03 	lds	r24, 0x030B
     3ea:	70 93 1d 07 	sts	0x071D, r23
     3ee:	60 93 1e 07 	sts	0x071E, r22
     3f2:	50 93 1f 07 	sts	0x071F, r21
     3f6:	40 93 20 07 	sts	0x0720, r20
     3fa:	30 93 21 07 	sts	0x0721, r19
     3fe:	20 93 22 07 	sts	0x0722, r18
     402:	90 93 23 07 	sts	0x0723, r25
     406:	80 93 24 07 	sts	0x0724, r24
				button_state = FALL_DETECTED;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	80 93 ff 02 	sts	0x02FF, r24
     410:	25 c0       	rjmp	.+74     	; 0x45c <__vector_2+0x116>
			}
			break;
		case PRESSED:
			if(READ(BUTTON) == 1){
     412:	4b 9b       	sbis	0x09, 3	; 9
     414:	23 c0       	rjmp	.+70     	; 0x45c <__vector_2+0x116>
				button_timer = milliseconds;
     416:	70 91 04 03 	lds	r23, 0x0304
     41a:	60 91 05 03 	lds	r22, 0x0305
     41e:	50 91 06 03 	lds	r21, 0x0306
     422:	40 91 07 03 	lds	r20, 0x0307
     426:	30 91 08 03 	lds	r19, 0x0308
     42a:	20 91 09 03 	lds	r18, 0x0309
     42e:	90 91 0a 03 	lds	r25, 0x030A
     432:	80 91 0b 03 	lds	r24, 0x030B
     436:	70 93 1d 07 	sts	0x071D, r23
     43a:	60 93 1e 07 	sts	0x071E, r22
     43e:	50 93 1f 07 	sts	0x071F, r21
     442:	40 93 20 07 	sts	0x0720, r20
     446:	30 93 21 07 	sts	0x0721, r19
     44a:	20 93 22 07 	sts	0x0722, r18
     44e:	90 93 23 07 	sts	0x0723, r25
     452:	80 93 24 07 	sts	0x0724, r24
				button_state = RISE_DETECTED;
     456:	82 e0       	ldi	r24, 0x02	; 2
     458:	80 93 ff 02 	sts	0x02FF, r24
			}
			break;
		default:
			break;
	}
}
     45c:	ff 91       	pop	r31
     45e:	ef 91       	pop	r30
     460:	bf 91       	pop	r27
     462:	af 91       	pop	r26
     464:	9f 91       	pop	r25
     466:	8f 91       	pop	r24
     468:	7f 91       	pop	r23
     46a:	6f 91       	pop	r22
     46c:	5f 91       	pop	r21
     46e:	4f 91       	pop	r20
     470:	3f 91       	pop	r19
     472:	2f 91       	pop	r18
     474:	0f 90       	pop	r0
     476:	0f be       	out	0x3f, r0	; 63
     478:	0f 90       	pop	r0
     47a:	1f 90       	pop	r1
     47c:	18 95       	reti

0000047e <init>:
/* System initialization*/
void init(){
	long div;
	
	// Pin mode init
	MODE_OUT(PULSE);
     47e:	21 9a       	sbi	0x04, 1	; 4
	MODE_OUT(DIROUT);
     480:	20 9a       	sbi	0x04, 0	; 4
	MODE_OUT(LEDP);
     482:	39 9a       	sbi	0x07, 1	; 7
	MODE_OUT(LEDN);
     484:	3a 9a       	sbi	0x07, 2	; 7
	MODE_IN(LIMIT);
     486:	52 98       	cbi	0x0a, 2	; 10
	MODE_IN(BUTTON);
     488:	53 98       	cbi	0x0a, 3	; 10
	MODE_IN(AUTO);
     48a:	3b 98       	cbi	0x07, 3	; 7
	MODE_IN(SPEED);
     48c:	38 98       	cbi	0x07, 0	; 7
	MODE_IN(MICROSTEP);
     48e:	55 98       	cbi	0x0a, 5	; 10
	MODE_IN(DEBUG);
     490:	57 98       	cbi	0x0a, 7	; 10
	
	// Pin state init
	SET(PULSE);
     492:	29 9a       	sbi	0x05, 1	; 5
	SET(DIROUT);
     494:	28 9a       	sbi	0x05, 0	; 5
	SET(DEBUG);
     496:	5f 9a       	sbi	0x0b, 7	; 11
	LED_OFF;
     498:	41 98       	cbi	0x08, 1	; 8
     49a:	42 98       	cbi	0x08, 2	; 8
	// Timer 0 init
	TCCR0A |= 0;			// Mode: Normal
     49c:	84 b5       	in	r24, 0x24	; 36
     49e:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= _BV(CS02) | _BV(CS01);	// Clock source: External T0 pin (hard wired to output of T1 (PULSE), so this timer is synchronized with PULSE output).
     4a0:	85 b5       	in	r24, 0x25	; 37
     4a2:	86 60       	ori	r24, 0x06	; 6
     4a4:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= _BV(TOIE0);	// Generate interrupt when full
     4a6:	ee e6       	ldi	r30, 0x6E	; 110
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	80 81       	ld	r24, Z
     4ac:	81 60       	ori	r24, 0x01	; 1
     4ae:	80 83       	st	Z, r24
	TCNT0 = 0;
     4b0:	16 bc       	out	0x26, r1	; 38
	
	// Timer 1 init
	// This timer is used for generating PWM signal for driving stepper motor driver, ST-M5045
	TCCR1A |= _BV(COM1A0);	// Mode: CTC.  TOP: OCR1A. Toggle when match.
     4b2:	e0 e8       	ldi	r30, 0x80	; 128
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	80 81       	ld	r24, Z
     4b8:	80 64       	ori	r24, 0x40	; 64
     4ba:	80 83       	st	Z, r24
	TCCR1B |= _BV(WGM12); 	// Prescaler: by 8, that is 0.5us per count (will start later)
     4bc:	e1 e8       	ldi	r30, 0x81	; 129
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	80 81       	ld	r24, Z
     4c2:	88 60       	ori	r24, 0x08	; 8
     4c4:	80 83       	st	Z, r24
	TCNT1 = 0;								// Reset timer counter
     4c6:	10 92 85 00 	sts	0x0085, r1
     4ca:	10 92 84 00 	sts	0x0084, r1
	
	// Timer 2 init
	// This timer is used for global timing (1ms resolution), also drives the main loop
	TCCR2A |= _BV(WGM21);					// Mode: CTC
     4ce:	e0 eb       	ldi	r30, 0xB0	; 176
     4d0:	f0 e0       	ldi	r31, 0x00	; 0
     4d2:	80 81       	ld	r24, Z
     4d4:	82 60       	ori	r24, 0x02	; 2
     4d6:	80 83       	st	Z, r24
	TCCR2B |= _BV(CS22);		// Prescaler: by 64
     4d8:	e1 eb       	ldi	r30, 0xB1	; 177
     4da:	f0 e0       	ldi	r31, 0x00	; 0
     4dc:	80 81       	ld	r24, Z
     4de:	84 60       	ori	r24, 0x04	; 4
     4e0:	80 83       	st	Z, r24
	TIMSK2 |= _BV(OCIE2A);
     4e2:	e0 e7       	ldi	r30, 0x70	; 112
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	80 81       	ld	r24, Z
     4e8:	82 60       	ori	r24, 0x02	; 2
     4ea:	80 83       	st	Z, r24
	OCR2A = 249;							// Frequency = F_CPU / Prescale / (OCR2A + 1) = 1kHz, start now
     4ec:	89 ef       	ldi	r24, 0xF9	; 249
     4ee:	80 93 b3 00 	sts	0x00B3, r24
	TCNT2 = 0;								// Reset timer counter
     4f2:	10 92 b2 00 	sts	0x00B2, r1
	
	// External Interrupt (LIMIT and BUTTON) setup
	EICRA |= _BV(ISC10) | _BV(ISC01);	// LIMIT only interrupt on FALLING edge, BUTTON triggers on BOTH edges
     4f6:	e9 e6       	ldi	r30, 0x69	; 105
     4f8:	f0 e0       	ldi	r31, 0x00	; 0
     4fa:	80 81       	ld	r24, Z
     4fc:	86 60       	ori	r24, 0x06	; 6
     4fe:	80 83       	st	Z, r24
	EIMSK |= _BV(INT1) | _BV(INT0);		// Enable INT1 and INT0
     500:	8d b3       	in	r24, 0x1d	; 29
     502:	83 60       	ori	r24, 0x03	; 3
     504:	8d bb       	out	0x1d, r24	; 29
	
	// Setup a Serial for debugging
	div = (((long)F_CPU) >> 4 ) / BAUD_RATE - 1;
	UBRR0L = div & 0xFF;
     506:	87 e6       	ldi	r24, 0x67	; 103
     508:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = div >> 8;
     50c:	10 92 c5 00 	sts	0x00C5, r1
	
	// Setup the Analog-Digital Conversion unit
	ADMUX |= _BV(REFS0);	// AVCC as reference
     510:	ec e7       	ldi	r30, 0x7C	; 124
     512:	f0 e0       	ldi	r31, 0x00	; 0
     514:	80 81       	ld	r24, Z
     516:	80 64       	ori	r24, 0x40	; 64
     518:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADEN) | _BV(ADATE) | _BV(ADIE) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);	// Enable ADC, Enable Interrupt and autotrigger. Clock divided by 128 = 125kHz
     51a:	ea e7       	ldi	r30, 0x7A	; 122
     51c:	f0 e0       	ldi	r31, 0x00	; 0
     51e:	80 81       	ld	r24, Z
     520:	8f 6a       	ori	r24, 0xAF	; 175
     522:	80 83       	st	Z, r24
	ADCSRB |= 0; // Free running ADC
     524:	eb e7       	ldi	r30, 0x7B	; 123
     526:	f0 e0       	ldi	r31, 0x00	; 0
     528:	80 81       	ld	r24, Z
     52a:	80 83       	st	Z, r24
	
	position = 0;
     52c:	10 92 0c 03 	sts	0x030C, r1
     530:	10 92 0d 03 	sts	0x030D, r1
     534:	10 92 0e 03 	sts	0x030E, r1
     538:	10 92 0f 03 	sts	0x030F, r1
	system_state = IDLE;
     53c:	10 92 fd 02 	sts	0x02FD, r1
	
	self_check = 1;	// ensure that button is not reactive when self-checking
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	80 93 f2 02 	sts	0x02F2, r24
	sei();
     546:	78 94       	sei
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     548:	2f ef       	ldi	r18, 0xFF	; 255
     54a:	83 ed       	ldi	r24, 0xD3	; 211
     54c:	90 e3       	ldi	r25, 0x30	; 48
     54e:	21 50       	subi	r18, 0x01	; 1
     550:	80 40       	sbci	r24, 0x00	; 0
     552:	90 40       	sbci	r25, 0x00	; 0
     554:	e1 f7       	brne	.-8      	; 0x54e <init+0xd0>
     556:	00 c0       	rjmp	.+0      	; 0x558 <init+0xda>
     558:	00 00       	nop
	
	_delay_ms(1000);
	uprintf("\r\n\r\nSystem started at %d\r\n",milliseconds);
     55a:	80 91 04 03 	lds	r24, 0x0304
     55e:	90 91 05 03 	lds	r25, 0x0305
     562:	20 91 06 03 	lds	r18, 0x0306
     566:	30 91 07 03 	lds	r19, 0x0307
     56a:	40 91 08 03 	lds	r20, 0x0308
     56e:	50 91 09 03 	lds	r21, 0x0309
     572:	60 91 0a 03 	lds	r22, 0x030A
     576:	70 91 0b 03 	lds	r23, 0x030B
     57a:	7f 93       	push	r23
     57c:	6f 93       	push	r22
     57e:	5f 93       	push	r21
     580:	4f 93       	push	r20
     582:	3f 93       	push	r19
     584:	2f 93       	push	r18
     586:	9f 93       	push	r25
     588:	8f 93       	push	r24
     58a:	8d e1       	ldi	r24, 0x1D	; 29
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	9f 93       	push	r25
     590:	8f 93       	push	r24
     592:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     596:	8d b7       	in	r24, 0x3d	; 61
     598:	9e b7       	in	r25, 0x3e	; 62
     59a:	0a 96       	adiw	r24, 0x0a	; 10
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	9e bf       	out	0x3e, r25	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	8d bf       	out	0x3d, r24	; 61
     5a6:	08 95       	ret

000005a8 <panic>:

}

void panic(){
	cli();
     5a8:	f8 94       	cli
	while(1){
		LED_ON(RED);
     5aa:	41 98       	cbi	0x08, 1	; 8
     5ac:	42 9a       	sbi	0x08, 2	; 8
     5ae:	2f ef       	ldi	r18, 0xFF	; 255
     5b0:	81 ee       	ldi	r24, 0xE1	; 225
     5b2:	94 e0       	ldi	r25, 0x04	; 4
     5b4:	21 50       	subi	r18, 0x01	; 1
     5b6:	80 40       	sbci	r24, 0x00	; 0
     5b8:	90 40       	sbci	r25, 0x00	; 0
     5ba:	e1 f7       	brne	.-8      	; 0x5b4 <panic+0xc>
     5bc:	00 c0       	rjmp	.+0      	; 0x5be <panic+0x16>
     5be:	00 00       	nop
		_delay_ms(100);
		LED_OFF;
     5c0:	41 98       	cbi	0x08, 1	; 8
     5c2:	42 98       	cbi	0x08, 2	; 8
     5c4:	2f ef       	ldi	r18, 0xFF	; 255
     5c6:	81 ee       	ldi	r24, 0xE1	; 225
     5c8:	94 e0       	ldi	r25, 0x04	; 4
     5ca:	21 50       	subi	r18, 0x01	; 1
     5cc:	80 40       	sbci	r24, 0x00	; 0
     5ce:	90 40       	sbci	r25, 0x00	; 0
     5d0:	e1 f7       	brne	.-8      	; 0x5ca <panic+0x22>
     5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <panic+0x2c>
     5d4:	00 00       	nop
     5d6:	e9 cf       	rjmp	.-46     	; 0x5aa <panic+0x2>

000005d8 <calibrate>:
		_delay_ms(100);
	}
}

void calibrate(){
     5d8:	8f 92       	push	r8
     5da:	9f 92       	push	r9
     5dc:	af 92       	push	r10
     5de:	bf 92       	push	r11
     5e0:	cf 92       	push	r12
     5e2:	df 92       	push	r13
     5e4:	ef 92       	push	r14
     5e6:	ff 92       	push	r15
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
	uprintf("Entering self-calibration process.\r\n");
     5f0:	88 e3       	ldi	r24, 0x38	; 56
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	9f 93       	push	r25
     5f6:	8f 93       	push	r24
     5f8:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
	if(READ(LIMIT) == 0){// already at limit at startup
     5fc:	0f 90       	pop	r0
     5fe:	0f 90       	pop	r0
     600:	4a 99       	sbic	0x09, 2	; 9
     602:	33 c0       	rjmp	.+102    	; 0x66a <calibrate+0x92>
		uprintf("LIMIT triggered at start up.\r\n");
     604:	8d e5       	ldi	r24, 0x5D	; 93
     606:	91 e0       	ldi	r25, 0x01	; 1
     608:	9f 93       	push	r25
     60a:	8f 93       	push	r24
     60c:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
		system_state = MANUAL_BACKWARD;
     610:	84 e0       	ldi	r24, 0x04	; 4
     612:	80 93 fd 02 	sts	0x02FD, r24
		uprintf("Moving back...");
     616:	8c e7       	ldi	r24, 0x7C	; 124
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	9f 93       	push	r25
     61c:	8f 93       	push	r24
     61e:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
		while(READ(LIMIT)==0){
     622:	0f 90       	pop	r0
     624:	0f 90       	pop	r0
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	4a 99       	sbic	0x09, 2	; 9
     62c:	0b c0       	rjmp	.+22     	; 0x644 <calibrate+0x6c>
     62e:	1f ef       	ldi	r17, 0xFF	; 255
     630:	21 ee       	ldi	r18, 0xE1	; 225
     632:	84 e0       	ldi	r24, 0x04	; 4
     634:	11 50       	subi	r17, 0x01	; 1
     636:	20 40       	sbci	r18, 0x00	; 0
     638:	80 40       	sbci	r24, 0x00	; 0
     63a:	e1 f7       	brne	.-8      	; 0x634 <calibrate+0x5c>
     63c:	00 c0       	rjmp	.+0      	; 0x63e <calibrate+0x66>
     63e:	00 00       	nop
     640:	4a 9b       	sbis	0x09, 2	; 9
     642:	f5 cf       	rjmp	.-22     	; 0x62e <calibrate+0x56>
     644:	9f ef       	ldi	r25, 0xFF	; 255
     646:	e9 e6       	ldi	r30, 0x69	; 105
     648:	18 e1       	ldi	r17, 0x18	; 24
     64a:	91 50       	subi	r25, 0x01	; 1
     64c:	e0 40       	sbci	r30, 0x00	; 0
     64e:	10 40       	sbci	r17, 0x00	; 0
     650:	e1 f7       	brne	.-8      	; 0x64a <calibrate+0x72>
     652:	00 c0       	rjmp	.+0      	; 0x654 <calibrate+0x7c>
     654:	00 00       	nop
			_delay_ms(100);
		}
		_delay_ms(500);
		uprintf("Done.\r\n");
     656:	8b e8       	ldi	r24, 0x8B	; 139
     658:	91 e0       	ldi	r25, 0x01	; 1
     65a:	9f 93       	push	r25
     65c:	8f 93       	push	r24
     65e:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
		system_state = IDLE;
     662:	10 92 fd 02 	sts	0x02FD, r1
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	2f ef       	ldi	r18, 0xFF	; 255
     66c:	83 ed       	ldi	r24, 0xD3	; 211
     66e:	90 e3       	ldi	r25, 0x30	; 48
     670:	21 50       	subi	r18, 0x01	; 1
     672:	80 40       	sbci	r24, 0x00	; 0
     674:	90 40       	sbci	r25, 0x00	; 0
     676:	e1 f7       	brne	.-8      	; 0x670 <calibrate+0x98>
     678:	00 c0       	rjmp	.+0      	; 0x67a <calibrate+0xa2>
     67a:	00 00       	nop
	}
	_delay_ms(1000);
	uprintf("Moving forward to calibrate...\r\n");
     67c:	83 e9       	ldi	r24, 0x93	; 147
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	9f 93       	push	r25
     682:	8f 93       	push	r24
     684:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
	unsigned long long timestarted = milliseconds;
     688:	80 90 04 03 	lds	r8, 0x0304
     68c:	90 90 05 03 	lds	r9, 0x0305
     690:	d0 91 06 03 	lds	r29, 0x0306
     694:	c0 91 07 03 	lds	r28, 0x0307
     698:	b0 91 08 03 	lds	r27, 0x0308
     69c:	a0 91 09 03 	lds	r26, 0x0309
     6a0:	f0 91 0a 03 	lds	r31, 0x030A
     6a4:	e0 91 0b 03 	lds	r30, 0x030B
	system_state = MANUAL_FORWARD;
     6a8:	83 e0       	ldi	r24, 0x03	; 3
     6aa:	80 93 fd 02 	sts	0x02FD, r24
	while((milliseconds - timestarted < 60000L) && system_state != IDLE);	// wait until LIMIT triggered
     6ae:	0f 90       	pop	r0
     6b0:	0f 90       	pop	r0
     6b2:	20 91 04 03 	lds	r18, 0x0304
     6b6:	30 91 05 03 	lds	r19, 0x0305
     6ba:	40 91 06 03 	lds	r20, 0x0306
     6be:	50 91 07 03 	lds	r21, 0x0307
     6c2:	60 91 08 03 	lds	r22, 0x0308
     6c6:	70 91 09 03 	lds	r23, 0x0309
     6ca:	80 91 0a 03 	lds	r24, 0x030A
     6ce:	90 91 0b 03 	lds	r25, 0x030B
     6d2:	a8 2c       	mov	r10, r8
     6d4:	b9 2c       	mov	r11, r9
     6d6:	cd 2e       	mov	r12, r29
     6d8:	dc 2e       	mov	r13, r28
     6da:	eb 2e       	mov	r14, r27
     6dc:	fa 2e       	mov	r15, r26
     6de:	0f 2f       	mov	r16, r31
     6e0:	1e 2f       	mov	r17, r30
     6e2:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__subdi3>
     6e6:	2f 35       	cpi	r18, 0x5F	; 95
     6e8:	3a 4e       	sbci	r19, 0xEA	; 234
     6ea:	41 05       	cpc	r20, r1
     6ec:	51 05       	cpc	r21, r1
     6ee:	61 05       	cpc	r22, r1
     6f0:	71 05       	cpc	r23, r1
     6f2:	81 05       	cpc	r24, r1
     6f4:	91 05       	cpc	r25, r1
     6f6:	09 f0       	breq	.+2      	; 0x6fa <calibrate+0x122>
     6f8:	20 f4       	brcc	.+8      	; 0x702 <calibrate+0x12a>
     6fa:	80 91 fd 02 	lds	r24, 0x02FD
     6fe:	81 11       	cpse	r24, r1
     700:	d8 cf       	rjmp	.-80     	; 0x6b2 <calibrate+0xda>
	if(milliseconds - timestarted >= 20000L){			// something goes wrong
     702:	20 91 04 03 	lds	r18, 0x0304
     706:	30 91 05 03 	lds	r19, 0x0305
     70a:	40 91 06 03 	lds	r20, 0x0306
     70e:	50 91 07 03 	lds	r21, 0x0307
     712:	60 91 08 03 	lds	r22, 0x0308
     716:	70 91 09 03 	lds	r23, 0x0309
     71a:	80 91 0a 03 	lds	r24, 0x030A
     71e:	90 91 0b 03 	lds	r25, 0x030B
     722:	a8 2c       	mov	r10, r8
     724:	b9 2c       	mov	r11, r9
     726:	cd 2e       	mov	r12, r29
     728:	dc 2e       	mov	r13, r28
     72a:	eb 2e       	mov	r14, r27
     72c:	fa 2e       	mov	r15, r26
     72e:	0f 2f       	mov	r16, r31
     730:	1e 2f       	mov	r17, r30
     732:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__subdi3>
     736:	2f 31       	cpi	r18, 0x1F	; 31
     738:	3e 44       	sbci	r19, 0x4E	; 78
     73a:	41 05       	cpc	r20, r1
     73c:	51 05       	cpc	r21, r1
     73e:	61 05       	cpc	r22, r1
     740:	71 05       	cpc	r23, r1
     742:	81 05       	cpc	r24, r1
     744:	91 05       	cpc	r25, r1
     746:	09 f1       	breq	.+66     	; 0x78a <calibrate+0x1b2>
     748:	00 f1       	brcs	.+64     	; 0x78a <calibrate+0x1b2>
		TCCR1B &= 0xF8;				// Force stop output
     74a:	e1 e8       	ldi	r30, 0x81	; 129
     74c:	f0 e0       	ldi	r31, 0x00	; 0
     74e:	80 81       	ld	r24, Z
     750:	88 7f       	andi	r24, 0xF8	; 248
     752:	80 83       	st	Z, r24
		uprintf("Error when calibrating.\r\nPlease restart system.\r\n");
     754:	84 eb       	ldi	r24, 0xB4	; 180
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	9f 93       	push	r25
     75a:	8f 93       	push	r24
     75c:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
		uprintf("Error state: %d\n", (int)system_state);
     760:	80 91 fd 02 	lds	r24, 0x02FD
     764:	1f 92       	push	r1
     766:	8f 93       	push	r24
     768:	86 ee       	ldi	r24, 0xE6	; 230
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	9f 93       	push	r25
     76e:	8f 93       	push	r24
     770:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     774:	1f ef       	ldi	r17, 0xFF	; 255
     776:	21 ee       	ldi	r18, 0xE1	; 225
     778:	84 e0       	ldi	r24, 0x04	; 4
     77a:	11 50       	subi	r17, 0x01	; 1
     77c:	20 40       	sbci	r18, 0x00	; 0
     77e:	80 40       	sbci	r24, 0x00	; 0
     780:	e1 f7       	brne	.-8      	; 0x77a <calibrate+0x1a2>
     782:	00 c0       	rjmp	.+0      	; 0x784 <calibrate+0x1ac>
     784:	00 00       	nop
		_delay_ms(100);
		panic();
     786:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <panic>
	}
	clear_position = 1;
     78a:	81 e0       	ldi	r24, 0x01	; 1
     78c:	80 93 f3 02 	sts	0x02F3, r24
	TCNT0 = 0;		// clear timer counter for steps
     790:	16 bc       	out	0x26, r1	; 38
     792:	8f e1       	ldi	r24, 0x1F	; 31
     794:	9e e4       	ldi	r25, 0x4E	; 78
     796:	01 97       	sbiw	r24, 0x01	; 1
     798:	f1 f7       	brne	.-4      	; 0x796 <calibrate+0x1be>
     79a:	00 c0       	rjmp	.+0      	; 0x79c <calibrate+0x1c4>
     79c:	00 00       	nop
	_delay_ms(5);
	uprintf("Calibration finished. Position = %ld\r\n",position);
     79e:	80 91 0c 03 	lds	r24, 0x030C
     7a2:	90 91 0d 03 	lds	r25, 0x030D
     7a6:	a0 91 0e 03 	lds	r26, 0x030E
     7aa:	b0 91 0f 03 	lds	r27, 0x030F
     7ae:	bf 93       	push	r27
     7b0:	af 93       	push	r26
     7b2:	9f 93       	push	r25
     7b4:	8f 93       	push	r24
     7b6:	87 ef       	ldi	r24, 0xF7	; 247
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	9f 93       	push	r25
     7bc:	8f 93       	push	r24
     7be:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
	self_check = 0;
     7c2:	10 92 f2 02 	sts	0x02F2, r1
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	0f 90       	pop	r0
     7cc:	0f 90       	pop	r0
     7ce:	0f 90       	pop	r0
     7d0:	0f 90       	pop	r0
}
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	ff 90       	pop	r15
     7dc:	ef 90       	pop	r14
     7de:	df 90       	pop	r13
     7e0:	cf 90       	pop	r12
     7e2:	bf 90       	pop	r11
     7e4:	af 90       	pop	r10
     7e6:	9f 90       	pop	r9
     7e8:	8f 90       	pop	r8
     7ea:	08 95       	ret

000007ec <buttonPressedCallBack>:
	}
}

/*Called when BUTTON is pressed. NOTE: THIS IS IN AN INTERRUPT ENVIRONMENT. ALL TIMING AND DELAYS WILL *NOT* WORK. */
void buttonPressedCallBack(){
	if(ISDEBUG)
     7ec:	4f 99       	sbic	0x09, 7	; 9
     7ee:	08 c0       	rjmp	.+16     	; 0x800 <buttonPressedCallBack+0x14>
		uprintf("Button Pressed\r\n");
     7f0:	8e e1       	ldi	r24, 0x1E	; 30
     7f2:	92 e0       	ldi	r25, 0x02	; 2
     7f4:	9f 93       	push	r25
     7f6:	8f 93       	push	r24
     7f8:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
	if(self_check)
     800:	80 91 f2 02 	lds	r24, 0x02F2
     804:	81 11       	cpse	r24, r1
     806:	cb c0       	rjmp	.+406    	; 0x99e <__stack+0x9f>
		return;		// Button do not have effect when self-checking
	switch(system_state){
     808:	80 91 fd 02 	lds	r24, 0x02FD
     80c:	88 23       	and	r24, r24
     80e:	21 f0       	breq	.+8      	; 0x818 <buttonPressedCallBack+0x2c>
     810:	83 30       	cpi	r24, 0x03	; 3
     812:	08 f0       	brcs	.+2      	; 0x816 <buttonPressedCallBack+0x2a>
     814:	c4 c0       	rjmp	.+392    	; 0x99e <__stack+0x9f>
     816:	b7 c0       	rjmp	.+366    	; 0x986 <__stack+0x87>
		case IDLE:
			if(READ(AUTO) == 0){
     818:	33 99       	sbic	0x06, 3	; 6
     81a:	97 c0       	rjmp	.+302    	; 0x94a <__stack+0x4b>
				if(READ(DIRIN) == FORWARD){
     81c:	4e 9b       	sbis	0x09, 6	; 9
     81e:	4a c0       	rjmp	.+148    	; 0x8b4 <buttonPressedCallBack+0xc8>
					if(READ(LIMIT) == 1 && position >= 0){//Ensure it's valid to move
     820:	4a 9b       	sbis	0x09, 2	; 9
     822:	3d c0       	rjmp	.+122    	; 0x89e <buttonPressedCallBack+0xb2>
     824:	80 91 0c 03 	lds	r24, 0x030C
     828:	90 91 0d 03 	lds	r25, 0x030D
     82c:	a0 91 0e 03 	lds	r26, 0x030E
     830:	b0 91 0f 03 	lds	r27, 0x030F
     834:	bb 23       	and	r27, r27
     836:	9c f1       	brlt	.+102    	; 0x89e <buttonPressedCallBack+0xb2>
						system_state = AUTO_FORWARD;
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	80 93 fd 02 	sts	0x02FD, r24
						led_timer = milliseconds;
     83e:	70 91 04 03 	lds	r23, 0x0304
     842:	60 91 05 03 	lds	r22, 0x0305
     846:	50 91 06 03 	lds	r21, 0x0306
     84a:	40 91 07 03 	lds	r20, 0x0307
     84e:	30 91 08 03 	lds	r19, 0x0308
     852:	20 91 09 03 	lds	r18, 0x0309
     856:	90 91 0a 03 	lds	r25, 0x030A
     85a:	80 91 0b 03 	lds	r24, 0x030B
     85e:	70 93 11 05 	sts	0x0511, r23
     862:	60 93 12 05 	sts	0x0512, r22
     866:	50 93 13 05 	sts	0x0513, r21
     86a:	40 93 14 05 	sts	0x0514, r20
     86e:	30 93 15 05 	sts	0x0515, r19
     872:	20 93 16 05 	sts	0x0516, r18
     876:	90 93 17 05 	sts	0x0517, r25
     87a:	80 93 18 05 	sts	0x0518, r24
						led_state = GREEN;
     87e:	82 e0       	ldi	r24, 0x02	; 2
     880:	80 93 fe 02 	sts	0x02FE, r24
						LED_ON(GREEN);						// Ensure the LED blinks immediately
     884:	41 9a       	sbi	0x08, 1	; 8
     886:	42 98       	cbi	0x08, 2	; 8
						if(ISDEBUG)
     888:	4f 99       	sbic	0x09, 7	; 9
     88a:	89 c0       	rjmp	.+274    	; 0x99e <__stack+0x9f>
							uprintf("AUTO_FORWARD\r\n");
     88c:	8f e2       	ldi	r24, 0x2F	; 47
     88e:	92 e0       	ldi	r25, 0x02	; 2
     890:	9f 93       	push	r25
     892:	8f 93       	push	r24
     894:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     898:	0f 90       	pop	r0
     89a:	0f 90       	pop	r0
     89c:	08 95       	ret
					}
					else{
						if(ISDEBUG){
     89e:	4f 99       	sbic	0x09, 7	; 9
     8a0:	7e c0       	rjmp	.+252    	; 0x99e <__stack+0x9f>
							uprintf("Limit reached. Please use manual mode.\r\n");
     8a2:	8e e3       	ldi	r24, 0x3E	; 62
     8a4:	92 e0       	ldi	r25, 0x02	; 2
     8a6:	9f 93       	push	r25
     8a8:	8f 93       	push	r24
     8aa:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	08 95       	ret
						}
					}
				}
				else{
					if(position <= CRITICAL_POS){//Ensure it's valid to move
     8b4:	80 91 0c 03 	lds	r24, 0x030C
     8b8:	90 91 0d 03 	lds	r25, 0x030D
     8bc:	a0 91 0e 03 	lds	r26, 0x030E
     8c0:	b0 91 0f 03 	lds	r27, 0x030F
     8c4:	81 36       	cpi	r24, 0x61	; 97
     8c6:	91 42       	sbci	r25, 0x21	; 33
     8c8:	a0 46       	sbci	r26, 0x60	; 96
     8ca:	b1 05       	cpc	r27, r1
     8cc:	9c f5       	brge	.+102    	; 0x934 <__stack+0x35>
						system_state = AUTO_BACKWARD;
     8ce:	82 e0       	ldi	r24, 0x02	; 2
     8d0:	80 93 fd 02 	sts	0x02FD, r24
						led_timer = milliseconds;
     8d4:	70 91 04 03 	lds	r23, 0x0304
     8d8:	60 91 05 03 	lds	r22, 0x0305
     8dc:	50 91 06 03 	lds	r21, 0x0306
     8e0:	40 91 07 03 	lds	r20, 0x0307
     8e4:	30 91 08 03 	lds	r19, 0x0308
     8e8:	20 91 09 03 	lds	r18, 0x0309
     8ec:	90 91 0a 03 	lds	r25, 0x030A
     8f0:	80 91 0b 03 	lds	r24, 0x030B
     8f4:	70 93 11 05 	sts	0x0511, r23
     8f8:	60 93 12 05 	sts	0x0512, r22
     8fc:	50 93 13 05 	sts	0x0513, r21
     900:	40 93 14 05 	sts	0x0514, r20
     904:	30 93 15 05 	sts	0x0515, r19
     908:	20 93 16 05 	sts	0x0516, r18
     90c:	90 93 17 05 	sts	0x0517, r25
     910:	80 93 18 05 	sts	0x0518, r24
						led_state = RED;
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	80 93 fe 02 	sts	0x02FE, r24
						LED_ON(RED);
     91a:	41 98       	cbi	0x08, 1	; 8
     91c:	42 9a       	sbi	0x08, 2	; 8
						if(ISDEBUG)
     91e:	4f 99       	sbic	0x09, 7	; 9
     920:	3e c0       	rjmp	.+124    	; 0x99e <__stack+0x9f>
							uprintf("AUTO_BACKWARD\r\n");
     922:	87 e6       	ldi	r24, 0x67	; 103
     924:	92 e0       	ldi	r25, 0x02	; 2
     926:	9f 93       	push	r25
     928:	8f 93       	push	r24
     92a:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     92e:	0f 90       	pop	r0
     930:	0f 90       	pop	r0
     932:	08 95       	ret
					}
					else{
						if(ISDEBUG){
     934:	4f 99       	sbic	0x09, 7	; 9
     936:	33 c0       	rjmp	.+102    	; 0x99e <__stack+0x9f>
							uprintf("Limit reached. Please use manual mode.\r\n");
     938:	8e e3       	ldi	r24, 0x3E	; 62
     93a:	92 e0       	ldi	r25, 0x02	; 2
     93c:	9f 93       	push	r25
     93e:	8f 93       	push	r24
     940:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	08 95       	ret
						}
					}
				}
			}
			else{
				if(READ(DIRIN) == FORWARD){
     94a:	4e 9b       	sbis	0x09, 6	; 9
     94c:	0e c0       	rjmp	.+28     	; 0x96a <__stack+0x6b>
					system_state = MANUAL_FORWARD;
     94e:	83 e0       	ldi	r24, 0x03	; 3
     950:	80 93 fd 02 	sts	0x02FD, r24
					if(ISDEBUG)
     954:	4f 99       	sbic	0x09, 7	; 9
     956:	23 c0       	rjmp	.+70     	; 0x99e <__stack+0x9f>
					uprintf("MANUAL_FORWARD\r\n");
     958:	87 e7       	ldi	r24, 0x77	; 119
     95a:	92 e0       	ldi	r25, 0x02	; 2
     95c:	9f 93       	push	r25
     95e:	8f 93       	push	r24
     960:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     964:	0f 90       	pop	r0
     966:	0f 90       	pop	r0
     968:	08 95       	ret
				}
				else{
					system_state = MANUAL_BACKWARD;
     96a:	84 e0       	ldi	r24, 0x04	; 4
     96c:	80 93 fd 02 	sts	0x02FD, r24
					if(ISDEBUG)
     970:	4f 99       	sbic	0x09, 7	; 9
     972:	15 c0       	rjmp	.+42     	; 0x99e <__stack+0x9f>
						uprintf("MANUAL_BACKWARD\r\n");
     974:	88 e8       	ldi	r24, 0x88	; 136
     976:	92 e0       	ldi	r25, 0x02	; 2
     978:	9f 93       	push	r25
     97a:	8f 93       	push	r24
     97c:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     980:	0f 90       	pop	r0
     982:	0f 90       	pop	r0
     984:	08 95       	ret
				}
			}
			break;
		case AUTO_FORWARD:
		case AUTO_BACKWARD:
			system_state = IDLE;			// Press when autorunning == stop
     986:	10 92 fd 02 	sts	0x02FD, r1
			if(ISDEBUG)
     98a:	4f 99       	sbic	0x09, 7	; 9
     98c:	08 c0       	rjmp	.+16     	; 0x99e <__stack+0x9f>
				uprintf("IDLE\r\n");
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	9f 93       	push	r25
     994:	8f 93       	push	r24
     996:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	08 95       	ret

000009a0 <buttonReleasedCallBack>:
	}
}

/*Called when BUTTON is released. NOTE: THIS IS IN AN INTERRUPT ENVIRONMENT. ALL TIMING AND DELAYS WILL *NOT* WORK. */
void buttonReleasedCallBack(){
	if(ISDEBUG)
     9a0:	4f 99       	sbic	0x09, 7	; 9
     9a2:	08 c0       	rjmp	.+16     	; 0x9b4 <buttonReleasedCallBack+0x14>
		uprintf("Button Released\r\n");
     9a4:	8a e9       	ldi	r24, 0x9A	; 154
     9a6:	92 e0       	ldi	r25, 0x02	; 2
     9a8:	9f 93       	push	r25
     9aa:	8f 93       	push	r24
     9ac:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     9b0:	0f 90       	pop	r0
     9b2:	0f 90       	pop	r0
	if(self_check)
     9b4:	80 91 f2 02 	lds	r24, 0x02F2
     9b8:	81 11       	cpse	r24, r1
     9ba:	11 c0       	rjmp	.+34     	; 0x9de <buttonReleasedCallBack+0x3e>
		return;		// Button do not have effect when self-checking
	switch(system_state){
     9bc:	80 91 fd 02 	lds	r24, 0x02FD
     9c0:	83 50       	subi	r24, 0x03	; 3
     9c2:	82 30       	cpi	r24, 0x02	; 2
     9c4:	60 f4       	brcc	.+24     	; 0x9de <buttonReleasedCallBack+0x3e>
		case MANUAL_BACKWARD:
		case MANUAL_FORWARD:
			system_state = IDLE;			// Release == stop
     9c6:	10 92 fd 02 	sts	0x02FD, r1
			if(ISDEBUG)
     9ca:	4f 99       	sbic	0x09, 7	; 9
     9cc:	08 c0       	rjmp	.+16     	; 0x9de <buttonReleasedCallBack+0x3e>
				uprintf("IDLE\r\n");
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	91 e0       	ldi	r25, 0x01	; 1
     9d2:	9f 93       	push	r25
     9d4:	8f 93       	push	r24
     9d6:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     9da:	0f 90       	pop	r0
     9dc:	0f 90       	pop	r0
     9de:	08 95       	ret

000009e0 <timer2CallBack>:
	self_check = 0;
}

/*Main loop. NOTE: THIS IS IN AN INTERRUPT ENVIRONMENT. ALL TIMING AND DELAYS WILL *NOT* WORK.*/
/*This main loop is driven by Timer 0 1kHz ticks. Since most events are triggered by BUTTON and LIMIT, here we only try to blink the LEDs*/
void timer2CallBack(){
     9e0:	af 92       	push	r10
     9e2:	bf 92       	push	r11
     9e4:	cf 92       	push	r12
     9e6:	df 92       	push	r13
     9e8:	ef 92       	push	r14
     9ea:	ff 92       	push	r15
     9ec:	0f 93       	push	r16
     9ee:	1f 93       	push	r17
	//if(ISDEBUG && milliseconds % 1000 == 0){
	//	uprintf("Time: %ld\r\n",milliseconds);
	//}
	/*Update LED status*/
	switch(led_state){
     9f0:	80 91 fe 02 	lds	r24, 0x02FE
     9f4:	81 30       	cpi	r24, 0x01	; 1
     9f6:	09 f4       	brne	.+2      	; 0x9fa <timer2CallBack+0x1a>
     9f8:	26 c1       	rjmp	.+588    	; 0xc46 <timer2CallBack+0x266>
     9fa:	20 f0       	brcs	.+8      	; 0xa04 <timer2CallBack+0x24>
     9fc:	82 30       	cpi	r24, 0x02	; 2
     9fe:	09 f4       	brne	.+2      	; 0xa02 <timer2CallBack+0x22>
     a00:	c1 c0       	rjmp	.+386    	; 0xb84 <timer2CallBack+0x1a4>
     a02:	7f c1       	rjmp	.+766    	; 0xd02 <timer2CallBack+0x322>
		case OFF:
			switch(system_state){
     a04:	80 91 fd 02 	lds	r24, 0x02FD
     a08:	82 30       	cpi	r24, 0x02	; 2
     a0a:	b1 f0       	breq	.+44     	; 0xa38 <timer2CallBack+0x58>
     a0c:	20 f4       	brcc	.+8      	; 0xa16 <timer2CallBack+0x36>
     a0e:	81 30       	cpi	r24, 0x01	; 1
     a10:	09 f4       	brne	.+2      	; 0xa14 <timer2CallBack+0x34>
     a12:	65 c0       	rjmp	.+202    	; 0xade <timer2CallBack+0xfe>
     a14:	76 c1       	rjmp	.+748    	; 0xd02 <timer2CallBack+0x322>
     a16:	83 30       	cpi	r24, 0x03	; 3
     a18:	49 f0       	breq	.+18     	; 0xa2c <timer2CallBack+0x4c>
     a1a:	84 30       	cpi	r24, 0x04	; 4
     a1c:	09 f0       	breq	.+2      	; 0xa20 <timer2CallBack+0x40>
     a1e:	71 c1       	rjmp	.+738    	; 0xd02 <timer2CallBack+0x322>
				case MANUAL_BACKWARD:
					led_state = RED;
     a20:	81 e0       	ldi	r24, 0x01	; 1
     a22:	80 93 fe 02 	sts	0x02FE, r24
					LED_ON(RED);
     a26:	41 98       	cbi	0x08, 1	; 8
     a28:	42 9a       	sbi	0x08, 2	; 8
     a2a:	6b c1       	rjmp	.+726    	; 0xd02 <timer2CallBack+0x322>
					break;
				case MANUAL_FORWARD:
					led_state = GREEN;
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	80 93 fe 02 	sts	0x02FE, r24
					LED_ON(GREEN);
     a32:	41 9a       	sbi	0x08, 1	; 8
     a34:	42 98       	cbi	0x08, 2	; 8
     a36:	65 c1       	rjmp	.+714    	; 0xd02 <timer2CallBack+0x322>
					break;
				case AUTO_BACKWARD:
					if(milliseconds - led_timer >= LED_BLINK){
     a38:	20 91 04 03 	lds	r18, 0x0304
     a3c:	30 91 05 03 	lds	r19, 0x0305
     a40:	40 91 06 03 	lds	r20, 0x0306
     a44:	50 91 07 03 	lds	r21, 0x0307
     a48:	60 91 08 03 	lds	r22, 0x0308
     a4c:	70 91 09 03 	lds	r23, 0x0309
     a50:	80 91 0a 03 	lds	r24, 0x030A
     a54:	90 91 0b 03 	lds	r25, 0x030B
     a58:	a0 90 11 05 	lds	r10, 0x0511
     a5c:	b0 90 12 05 	lds	r11, 0x0512
     a60:	c0 90 13 05 	lds	r12, 0x0513
     a64:	d0 90 14 05 	lds	r13, 0x0514
     a68:	e0 90 15 05 	lds	r14, 0x0515
     a6c:	f0 90 16 05 	lds	r15, 0x0516
     a70:	00 91 17 05 	lds	r16, 0x0517
     a74:	10 91 18 05 	lds	r17, 0x0518
     a78:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__subdi3>
     a7c:	2b 32       	cpi	r18, 0x2B	; 43
     a7e:	31 40       	sbci	r19, 0x01	; 1
     a80:	41 05       	cpc	r20, r1
     a82:	51 05       	cpc	r21, r1
     a84:	61 05       	cpc	r22, r1
     a86:	71 05       	cpc	r23, r1
     a88:	81 05       	cpc	r24, r1
     a8a:	91 05       	cpc	r25, r1
     a8c:	09 f0       	breq	.+2      	; 0xa90 <timer2CallBack+0xb0>
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <timer2CallBack+0xb2>
     a90:	38 c1       	rjmp	.+624    	; 0xd02 <timer2CallBack+0x322>
						led_state = RED;
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	80 93 fe 02 	sts	0x02FE, r24
						led_timer = milliseconds;
     a98:	70 91 04 03 	lds	r23, 0x0304
     a9c:	60 91 05 03 	lds	r22, 0x0305
     aa0:	50 91 06 03 	lds	r21, 0x0306
     aa4:	40 91 07 03 	lds	r20, 0x0307
     aa8:	30 91 08 03 	lds	r19, 0x0308
     aac:	20 91 09 03 	lds	r18, 0x0309
     ab0:	90 91 0a 03 	lds	r25, 0x030A
     ab4:	80 91 0b 03 	lds	r24, 0x030B
     ab8:	70 93 11 05 	sts	0x0511, r23
     abc:	60 93 12 05 	sts	0x0512, r22
     ac0:	50 93 13 05 	sts	0x0513, r21
     ac4:	40 93 14 05 	sts	0x0514, r20
     ac8:	30 93 15 05 	sts	0x0515, r19
     acc:	20 93 16 05 	sts	0x0516, r18
     ad0:	90 93 17 05 	sts	0x0517, r25
     ad4:	80 93 18 05 	sts	0x0518, r24
						LED_ON(RED);
     ad8:	41 98       	cbi	0x08, 1	; 8
     ada:	42 9a       	sbi	0x08, 2	; 8
     adc:	12 c1       	rjmp	.+548    	; 0xd02 <timer2CallBack+0x322>
					}
					break;
				case AUTO_FORWARD:
					if(milliseconds - led_timer >= LED_BLINK){
     ade:	20 91 04 03 	lds	r18, 0x0304
     ae2:	30 91 05 03 	lds	r19, 0x0305
     ae6:	40 91 06 03 	lds	r20, 0x0306
     aea:	50 91 07 03 	lds	r21, 0x0307
     aee:	60 91 08 03 	lds	r22, 0x0308
     af2:	70 91 09 03 	lds	r23, 0x0309
     af6:	80 91 0a 03 	lds	r24, 0x030A
     afa:	90 91 0b 03 	lds	r25, 0x030B
     afe:	a0 90 11 05 	lds	r10, 0x0511
     b02:	b0 90 12 05 	lds	r11, 0x0512
     b06:	c0 90 13 05 	lds	r12, 0x0513
     b0a:	d0 90 14 05 	lds	r13, 0x0514
     b0e:	e0 90 15 05 	lds	r14, 0x0515
     b12:	f0 90 16 05 	lds	r15, 0x0516
     b16:	00 91 17 05 	lds	r16, 0x0517
     b1a:	10 91 18 05 	lds	r17, 0x0518
     b1e:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__subdi3>
     b22:	2b 32       	cpi	r18, 0x2B	; 43
     b24:	31 40       	sbci	r19, 0x01	; 1
     b26:	41 05       	cpc	r20, r1
     b28:	51 05       	cpc	r21, r1
     b2a:	61 05       	cpc	r22, r1
     b2c:	71 05       	cpc	r23, r1
     b2e:	81 05       	cpc	r24, r1
     b30:	91 05       	cpc	r25, r1
     b32:	09 f0       	breq	.+2      	; 0xb36 <timer2CallBack+0x156>
     b34:	08 f4       	brcc	.+2      	; 0xb38 <timer2CallBack+0x158>
     b36:	e5 c0       	rjmp	.+458    	; 0xd02 <timer2CallBack+0x322>
						led_state = GREEN;
     b38:	82 e0       	ldi	r24, 0x02	; 2
     b3a:	80 93 fe 02 	sts	0x02FE, r24
						led_timer = milliseconds;
     b3e:	70 91 04 03 	lds	r23, 0x0304
     b42:	60 91 05 03 	lds	r22, 0x0305
     b46:	50 91 06 03 	lds	r21, 0x0306
     b4a:	40 91 07 03 	lds	r20, 0x0307
     b4e:	30 91 08 03 	lds	r19, 0x0308
     b52:	20 91 09 03 	lds	r18, 0x0309
     b56:	90 91 0a 03 	lds	r25, 0x030A
     b5a:	80 91 0b 03 	lds	r24, 0x030B
     b5e:	70 93 11 05 	sts	0x0511, r23
     b62:	60 93 12 05 	sts	0x0512, r22
     b66:	50 93 13 05 	sts	0x0513, r21
     b6a:	40 93 14 05 	sts	0x0514, r20
     b6e:	30 93 15 05 	sts	0x0515, r19
     b72:	20 93 16 05 	sts	0x0516, r18
     b76:	90 93 17 05 	sts	0x0517, r25
     b7a:	80 93 18 05 	sts	0x0518, r24
						LED_ON(GREEN);
     b7e:	41 9a       	sbi	0x08, 1	; 8
     b80:	42 98       	cbi	0x08, 2	; 8
     b82:	bf c0       	rjmp	.+382    	; 0xd02 <timer2CallBack+0x322>
					}
					break;
			}
			break;
		case GREEN:
			if(system_state == AUTO_FORWARD){
     b84:	80 91 fd 02 	lds	r24, 0x02FD
     b88:	81 30       	cpi	r24, 0x01	; 1
     b8a:	09 f0       	breq	.+2      	; 0xb8e <timer2CallBack+0x1ae>
     b8c:	52 c0       	rjmp	.+164    	; 0xc32 <timer2CallBack+0x252>
				if(milliseconds - led_timer >= LED_BLINK){
     b8e:	20 91 04 03 	lds	r18, 0x0304
     b92:	30 91 05 03 	lds	r19, 0x0305
     b96:	40 91 06 03 	lds	r20, 0x0306
     b9a:	50 91 07 03 	lds	r21, 0x0307
     b9e:	60 91 08 03 	lds	r22, 0x0308
     ba2:	70 91 09 03 	lds	r23, 0x0309
     ba6:	80 91 0a 03 	lds	r24, 0x030A
     baa:	90 91 0b 03 	lds	r25, 0x030B
     bae:	a0 90 11 05 	lds	r10, 0x0511
     bb2:	b0 90 12 05 	lds	r11, 0x0512
     bb6:	c0 90 13 05 	lds	r12, 0x0513
     bba:	d0 90 14 05 	lds	r13, 0x0514
     bbe:	e0 90 15 05 	lds	r14, 0x0515
     bc2:	f0 90 16 05 	lds	r15, 0x0516
     bc6:	00 91 17 05 	lds	r16, 0x0517
     bca:	10 91 18 05 	lds	r17, 0x0518
     bce:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__subdi3>
     bd2:	2b 32       	cpi	r18, 0x2B	; 43
     bd4:	31 40       	sbci	r19, 0x01	; 1
     bd6:	41 05       	cpc	r20, r1
     bd8:	51 05       	cpc	r21, r1
     bda:	61 05       	cpc	r22, r1
     bdc:	71 05       	cpc	r23, r1
     bde:	81 05       	cpc	r24, r1
     be0:	91 05       	cpc	r25, r1
     be2:	09 f0       	breq	.+2      	; 0xbe6 <timer2CallBack+0x206>
     be4:	08 f4       	brcc	.+2      	; 0xbe8 <timer2CallBack+0x208>
     be6:	8d c0       	rjmp	.+282    	; 0xd02 <timer2CallBack+0x322>
					led_state = OFF;
     be8:	10 92 fe 02 	sts	0x02FE, r1
					led_timer = milliseconds;
     bec:	70 91 04 03 	lds	r23, 0x0304
     bf0:	60 91 05 03 	lds	r22, 0x0305
     bf4:	50 91 06 03 	lds	r21, 0x0306
     bf8:	40 91 07 03 	lds	r20, 0x0307
     bfc:	30 91 08 03 	lds	r19, 0x0308
     c00:	20 91 09 03 	lds	r18, 0x0309
     c04:	90 91 0a 03 	lds	r25, 0x030A
     c08:	80 91 0b 03 	lds	r24, 0x030B
     c0c:	70 93 11 05 	sts	0x0511, r23
     c10:	60 93 12 05 	sts	0x0512, r22
     c14:	50 93 13 05 	sts	0x0513, r21
     c18:	40 93 14 05 	sts	0x0514, r20
     c1c:	30 93 15 05 	sts	0x0515, r19
     c20:	20 93 16 05 	sts	0x0516, r18
     c24:	90 93 17 05 	sts	0x0517, r25
     c28:	80 93 18 05 	sts	0x0518, r24
					LED_OFF;
     c2c:	41 98       	cbi	0x08, 1	; 8
     c2e:	42 98       	cbi	0x08, 2	; 8
     c30:	68 c0       	rjmp	.+208    	; 0xd02 <timer2CallBack+0x322>
				}
			}
			else if(system_state != MANUAL_FORWARD){
     c32:	80 91 fd 02 	lds	r24, 0x02FD
     c36:	83 30       	cpi	r24, 0x03	; 3
     c38:	09 f4       	brne	.+2      	; 0xc3c <timer2CallBack+0x25c>
     c3a:	63 c0       	rjmp	.+198    	; 0xd02 <timer2CallBack+0x322>
				led_state = OFF;
     c3c:	10 92 fe 02 	sts	0x02FE, r1
				LED_OFF;
     c40:	41 98       	cbi	0x08, 1	; 8
     c42:	42 98       	cbi	0x08, 2	; 8
     c44:	5e c0       	rjmp	.+188    	; 0xd02 <timer2CallBack+0x322>
			}
			break;
		case RED:
			if(system_state == AUTO_BACKWARD){
     c46:	80 91 fd 02 	lds	r24, 0x02FD
     c4a:	82 30       	cpi	r24, 0x02	; 2
     c4c:	09 f0       	breq	.+2      	; 0xc50 <timer2CallBack+0x270>
     c4e:	51 c0       	rjmp	.+162    	; 0xcf2 <timer2CallBack+0x312>
				if(milliseconds - led_timer > LED_BLINK){
     c50:	20 91 04 03 	lds	r18, 0x0304
     c54:	30 91 05 03 	lds	r19, 0x0305
     c58:	40 91 06 03 	lds	r20, 0x0306
     c5c:	50 91 07 03 	lds	r21, 0x0307
     c60:	60 91 08 03 	lds	r22, 0x0308
     c64:	70 91 09 03 	lds	r23, 0x0309
     c68:	80 91 0a 03 	lds	r24, 0x030A
     c6c:	90 91 0b 03 	lds	r25, 0x030B
     c70:	a0 90 11 05 	lds	r10, 0x0511
     c74:	b0 90 12 05 	lds	r11, 0x0512
     c78:	c0 90 13 05 	lds	r12, 0x0513
     c7c:	d0 90 14 05 	lds	r13, 0x0514
     c80:	e0 90 15 05 	lds	r14, 0x0515
     c84:	f0 90 16 05 	lds	r15, 0x0516
     c88:	00 91 17 05 	lds	r16, 0x0517
     c8c:	10 91 18 05 	lds	r17, 0x0518
     c90:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__subdi3>
     c94:	2c 32       	cpi	r18, 0x2C	; 44
     c96:	31 40       	sbci	r19, 0x01	; 1
     c98:	41 05       	cpc	r20, r1
     c9a:	51 05       	cpc	r21, r1
     c9c:	61 05       	cpc	r22, r1
     c9e:	71 05       	cpc	r23, r1
     ca0:	81 05       	cpc	r24, r1
     ca2:	91 05       	cpc	r25, r1
     ca4:	71 f1       	breq	.+92     	; 0xd02 <timer2CallBack+0x322>
     ca6:	68 f1       	brcs	.+90     	; 0xd02 <timer2CallBack+0x322>
					led_state = OFF;
     ca8:	10 92 fe 02 	sts	0x02FE, r1
					led_timer = milliseconds;
     cac:	70 91 04 03 	lds	r23, 0x0304
     cb0:	60 91 05 03 	lds	r22, 0x0305
     cb4:	50 91 06 03 	lds	r21, 0x0306
     cb8:	40 91 07 03 	lds	r20, 0x0307
     cbc:	30 91 08 03 	lds	r19, 0x0308
     cc0:	20 91 09 03 	lds	r18, 0x0309
     cc4:	90 91 0a 03 	lds	r25, 0x030A
     cc8:	80 91 0b 03 	lds	r24, 0x030B
     ccc:	70 93 11 05 	sts	0x0511, r23
     cd0:	60 93 12 05 	sts	0x0512, r22
     cd4:	50 93 13 05 	sts	0x0513, r21
     cd8:	40 93 14 05 	sts	0x0514, r20
     cdc:	30 93 15 05 	sts	0x0515, r19
     ce0:	20 93 16 05 	sts	0x0516, r18
     ce4:	90 93 17 05 	sts	0x0517, r25
     ce8:	80 93 18 05 	sts	0x0518, r24
					LED_OFF;
     cec:	41 98       	cbi	0x08, 1	; 8
     cee:	42 98       	cbi	0x08, 2	; 8
     cf0:	08 c0       	rjmp	.+16     	; 0xd02 <timer2CallBack+0x322>
				}
			}
			else if(system_state != MANUAL_BACKWARD){
     cf2:	80 91 fd 02 	lds	r24, 0x02FD
     cf6:	84 30       	cpi	r24, 0x04	; 4
     cf8:	21 f0       	breq	.+8      	; 0xd02 <timer2CallBack+0x322>
				led_state = OFF;
     cfa:	10 92 fe 02 	sts	0x02FE, r1
				LED_OFF;
     cfe:	41 98       	cbi	0x08, 1	; 8
     d00:	42 98       	cbi	0x08, 2	; 8
			}
			break;
	}
	/*Update BUTTON status*/
	switch(button_state){
     d02:	80 91 ff 02 	lds	r24, 0x02FF
     d06:	81 30       	cpi	r24, 0x01	; 1
     d08:	19 f0       	breq	.+6      	; 0xd10 <timer2CallBack+0x330>
     d0a:	82 30       	cpi	r24, 0x02	; 2
     d0c:	99 f1       	breq	.+102    	; 0xd74 <timer2CallBack+0x394>
     d0e:	63 c0       	rjmp	.+198    	; 0xdd6 <timer2CallBack+0x3f6>
		case FALL_DETECTED:
			if(milliseconds - button_timer >= ANTIJITTER){
     d10:	20 91 04 03 	lds	r18, 0x0304
     d14:	30 91 05 03 	lds	r19, 0x0305
     d18:	40 91 06 03 	lds	r20, 0x0306
     d1c:	50 91 07 03 	lds	r21, 0x0307
     d20:	60 91 08 03 	lds	r22, 0x0308
     d24:	70 91 09 03 	lds	r23, 0x0309
     d28:	80 91 0a 03 	lds	r24, 0x030A
     d2c:	90 91 0b 03 	lds	r25, 0x030B
     d30:	a0 90 1d 07 	lds	r10, 0x071D
     d34:	b0 90 1e 07 	lds	r11, 0x071E
     d38:	c0 90 1f 07 	lds	r12, 0x071F
     d3c:	d0 90 20 07 	lds	r13, 0x0720
     d40:	e0 90 21 07 	lds	r14, 0x0721
     d44:	f0 90 22 07 	lds	r15, 0x0722
     d48:	00 91 23 07 	lds	r16, 0x0723
     d4c:	10 91 24 07 	lds	r17, 0x0724
     d50:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__subdi3>
     d54:	a9 e0       	ldi	r26, 0x09	; 9
     d56:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <__cmpdi2_s8>
     d5a:	e9 f1       	breq	.+122    	; 0xdd6 <timer2CallBack+0x3f6>
     d5c:	e0 f1       	brcs	.+120    	; 0xdd6 <timer2CallBack+0x3f6>
				if(READ(BUTTON) == 0){
     d5e:	4b 99       	sbic	0x09, 3	; 9
     d60:	06 c0       	rjmp	.+12     	; 0xd6e <timer2CallBack+0x38e>
					button_state = PRESSED;					// Truely Pressed
     d62:	83 e0       	ldi	r24, 0x03	; 3
     d64:	80 93 ff 02 	sts	0x02FF, r24
					buttonPressedCallBack();
     d68:	0e 94 f6 03 	call	0x7ec	; 0x7ec <buttonPressedCallBack>
     d6c:	34 c0       	rjmp	.+104    	; 0xdd6 <timer2CallBack+0x3f6>
				}
				else{
					button_state = RELEASED;				// noise
     d6e:	10 92 ff 02 	sts	0x02FF, r1
     d72:	31 c0       	rjmp	.+98     	; 0xdd6 <timer2CallBack+0x3f6>
				}
			}
			break;
		case RISE_DETECTED:
			if(milliseconds - button_timer >= ANTIJITTER){
     d74:	20 91 04 03 	lds	r18, 0x0304
     d78:	30 91 05 03 	lds	r19, 0x0305
     d7c:	40 91 06 03 	lds	r20, 0x0306
     d80:	50 91 07 03 	lds	r21, 0x0307
     d84:	60 91 08 03 	lds	r22, 0x0308
     d88:	70 91 09 03 	lds	r23, 0x0309
     d8c:	80 91 0a 03 	lds	r24, 0x030A
     d90:	90 91 0b 03 	lds	r25, 0x030B
     d94:	a0 90 1d 07 	lds	r10, 0x071D
     d98:	b0 90 1e 07 	lds	r11, 0x071E
     d9c:	c0 90 1f 07 	lds	r12, 0x071F
     da0:	d0 90 20 07 	lds	r13, 0x0720
     da4:	e0 90 21 07 	lds	r14, 0x0721
     da8:	f0 90 22 07 	lds	r15, 0x0722
     dac:	00 91 23 07 	lds	r16, 0x0723
     db0:	10 91 24 07 	lds	r17, 0x0724
     db4:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <__subdi3>
     db8:	a9 e0       	ldi	r26, 0x09	; 9
     dba:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <__cmpdi2_s8>
     dbe:	59 f0       	breq	.+22     	; 0xdd6 <timer2CallBack+0x3f6>
     dc0:	50 f0       	brcs	.+20     	; 0xdd6 <timer2CallBack+0x3f6>
				if(READ(BUTTON) == 1){
     dc2:	4b 9b       	sbis	0x09, 3	; 9
     dc4:	05 c0       	rjmp	.+10     	; 0xdd0 <timer2CallBack+0x3f0>
					button_state = RELEASED;
     dc6:	10 92 ff 02 	sts	0x02FF, r1
					buttonReleasedCallBack();
     dca:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <buttonReleasedCallBack>
     dce:	03 c0       	rjmp	.+6      	; 0xdd6 <timer2CallBack+0x3f6>
				}
				else{
					button_state = PRESSED;
     dd0:	83 e0       	ldi	r24, 0x03	; 3
     dd2:	80 93 ff 02 	sts	0x02FF, r24
				}
			}
			break;
	}
	/*Update microstep status*/
	isfast = (READ(MICROSTEP) == FAST);
     dd6:	89 b1       	in	r24, 0x09	; 9
     dd8:	85 fb       	bst	r24, 5
     dda:	88 27       	eor	r24, r24
     ddc:	80 f9       	bld	r24, 0
     dde:	91 e0       	ldi	r25, 0x01	; 1
     de0:	89 27       	eor	r24, r25
     de2:	80 93 25 07 	sts	0x0725, r24
	/*Update Pulse output*/
	if(system_state != oldstate || abs(speed - oldspeed) > SPEED_EPS || isfast != oldisfast){// only take action when updated
     de6:	90 91 fd 02 	lds	r25, 0x02FD
     dea:	80 91 fc 02 	lds	r24, 0x02FC
     dee:	98 13       	cpse	r25, r24
     df0:	1a c0       	rjmp	.+52     	; 0xe26 <timer2CallBack+0x446>
     df2:	20 91 00 03 	lds	r18, 0x0300
     df6:	30 91 01 03 	lds	r19, 0x0301
     dfa:	80 91 1b 07 	lds	r24, 0x071B
     dfe:	90 91 1c 07 	lds	r25, 0x071C
     e02:	28 1b       	sub	r18, r24
     e04:	39 0b       	sbc	r19, r25
     e06:	c9 01       	movw	r24, r18
     e08:	99 23       	and	r25, r25
     e0a:	24 f4       	brge	.+8      	; 0xe14 <timer2CallBack+0x434>
     e0c:	88 27       	eor	r24, r24
     e0e:	99 27       	eor	r25, r25
     e10:	82 1b       	sub	r24, r18
     e12:	93 0b       	sbc	r25, r19
     e14:	0b 97       	sbiw	r24, 0x0b	; 11
     e16:	3c f4       	brge	.+14     	; 0xe26 <timer2CallBack+0x446>
     e18:	90 91 25 07 	lds	r25, 0x0725
     e1c:	80 91 10 03 	lds	r24, 0x0310
     e20:	98 17       	cp	r25, r24
     e22:	09 f4       	brne	.+2      	; 0xe26 <timer2CallBack+0x446>
     e24:	e8 c0       	rjmp	.+464    	; 0xff6 <timer2CallBack+0x616>
		//if(ISDEBUG)
		//	uprintf("Update Output\r\n");
		if(isfast)
     e26:	80 91 25 07 	lds	r24, 0x0725
     e2a:	88 23       	and	r24, r24
     e2c:	39 f0       	breq	.+14     	; 0xe3c <timer2CallBack+0x45c>
			step = FAST_STEP;
     e2e:	80 e8       	ldi	r24, 0x80	; 128
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	90 93 1a 07 	sts	0x071A, r25
     e36:	80 93 19 07 	sts	0x0719, r24
     e3a:	06 c0       	rjmp	.+12     	; 0xe48 <timer2CallBack+0x468>
		else
			step = SLOW_STEP;
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	90 e0       	ldi	r25, 0x00	; 0
     e40:	90 93 1a 07 	sts	0x071A, r25
     e44:	80 93 19 07 	sts	0x0719, r24
		
		switch(system_state){
     e48:	80 91 fd 02 	lds	r24, 0x02FD
     e4c:	82 30       	cpi	r24, 0x02	; 2
     e4e:	c9 f0       	breq	.+50     	; 0xe82 <timer2CallBack+0x4a2>
     e50:	30 f4       	brcc	.+12     	; 0xe5e <timer2CallBack+0x47e>
     e52:	88 23       	and	r24, r24
     e54:	09 f4       	brne	.+2      	; 0xe58 <timer2CallBack+0x478>
     e56:	5f c0       	rjmp	.+190    	; 0xf16 <timer2CallBack+0x536>
     e58:	81 30       	cpi	r24, 0x01	; 1
     e5a:	31 f0       	breq	.+12     	; 0xe68 <timer2CallBack+0x488>
     e5c:	bc c0       	rjmp	.+376    	; 0xfd6 <timer2CallBack+0x5f6>
     e5e:	83 30       	cpi	r24, 0x03	; 3
     e60:	19 f0       	breq	.+6      	; 0xe68 <timer2CallBack+0x488>
     e62:	84 30       	cpi	r24, 0x04	; 4
     e64:	71 f0       	breq	.+28     	; 0xe82 <timer2CallBack+0x4a2>
     e66:	b7 c0       	rjmp	.+366    	; 0xfd6 <timer2CallBack+0x5f6>
			case AUTO_FORWARD:
			case MANUAL_FORWARD:
				CLR(DIROUT);
     e68:	28 98       	cbi	0x05, 0	; 5
				step *= FORWARD_STEP;
     e6a:	80 91 19 07 	lds	r24, 0x0719
     e6e:	90 91 1a 07 	lds	r25, 0x071A
     e72:	91 95       	neg	r25
     e74:	81 95       	neg	r24
     e76:	91 09       	sbc	r25, r1
     e78:	90 93 1a 07 	sts	0x071A, r25
     e7c:	80 93 19 07 	sts	0x0719, r24
				goto l1;
     e80:	09 c0       	rjmp	.+18     	; 0xe94 <timer2CallBack+0x4b4>
			case AUTO_BACKWARD:
			case MANUAL_BACKWARD:
				SET(DIROUT);
     e82:	28 9a       	sbi	0x05, 0	; 5
				step *= BACKWARD_STEP;
     e84:	80 91 19 07 	lds	r24, 0x0719
     e88:	90 91 1a 07 	lds	r25, 0x071A
     e8c:	90 93 1a 07 	sts	0x071A, r25
     e90:	80 93 19 07 	sts	0x0719, r24
				/*Common for FORWARD and BACKWARD*/
	l1:			
				if(isfast){
     e94:	80 91 25 07 	lds	r24, 0x0725
     e98:	88 23       	and	r24, r24
     e9a:	e1 f0       	breq	.+56     	; 0xed4 <timer2CallBack+0x4f4>
					OCR1A = (long)(SPEED_MAX_FAST - SPEED_MIN_FAST) * speed / 1024 + SPEED_MIN_FAST;
     e9c:	20 91 00 03 	lds	r18, 0x0300
     ea0:	30 91 01 03 	lds	r19, 0x0301
     ea4:	ac e1       	ldi	r26, 0x1C	; 28
     ea6:	bc e0       	ldi	r27, 0x0C	; 12
     ea8:	0e 94 c9 08 	call	0x1192	; 0x1192 <__umulhisi3>
     eac:	46 2f       	mov	r20, r22
     eae:	57 2f       	mov	r21, r23
     eb0:	68 2f       	mov	r22, r24
     eb2:	79 2f       	mov	r23, r25
     eb4:	03 2e       	mov	r0, r19
     eb6:	3a e0       	ldi	r19, 0x0A	; 10
     eb8:	75 95       	asr	r23
     eba:	67 95       	ror	r22
     ebc:	57 95       	ror	r21
     ebe:	47 95       	ror	r20
     ec0:	3a 95       	dec	r19
     ec2:	d1 f7       	brne	.-12     	; 0xeb8 <timer2CallBack+0x4d8>
     ec4:	30 2d       	mov	r19, r0
     ec6:	40 57       	subi	r20, 0x70	; 112
     ec8:	5e 4f       	sbci	r21, 0xFE	; 254
     eca:	50 93 89 00 	sts	0x0089, r21
     ece:	40 93 88 00 	sts	0x0088, r20
     ed2:	1b c0       	rjmp	.+54     	; 0xf0a <timer2CallBack+0x52a>
				}
				else{
					OCR1A = (long)(SPEED_MAX_SLOW - SPEED_MIN_SLOW) * speed / 1024 + SPEED_MIN_SLOW;
     ed4:	20 91 00 03 	lds	r18, 0x0300
     ed8:	30 91 01 03 	lds	r19, 0x0301
     edc:	a0 ee       	ldi	r26, 0xE0	; 224
     ede:	b3 e0       	ldi	r27, 0x03	; 3
     ee0:	0e 94 c9 08 	call	0x1192	; 0x1192 <__umulhisi3>
     ee4:	46 2f       	mov	r20, r22
     ee6:	57 2f       	mov	r21, r23
     ee8:	68 2f       	mov	r22, r24
     eea:	79 2f       	mov	r23, r25
     eec:	03 2e       	mov	r0, r19
     eee:	3a e0       	ldi	r19, 0x0A	; 10
     ef0:	75 95       	asr	r23
     ef2:	67 95       	ror	r22
     ef4:	57 95       	ror	r21
     ef6:	47 95       	ror	r20
     ef8:	3a 95       	dec	r19
     efa:	d1 f7       	brne	.-12     	; 0xef0 <timer2CallBack+0x510>
     efc:	30 2d       	mov	r19, r0
     efe:	48 5f       	subi	r20, 0xF8	; 248
     f00:	5f 4f       	sbci	r21, 0xFF	; 255
     f02:	50 93 89 00 	sts	0x0089, r21
     f06:	40 93 88 00 	sts	0x0088, r20
				}
				TCCR1B |= _BV(CS11);	// Start Timer 1
     f0a:	e1 e8       	ldi	r30, 0x81	; 129
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	82 60       	ori	r24, 0x02	; 2
     f12:	80 83       	st	Z, r24
				break;
     f14:	60 c0       	rjmp	.+192    	; 0xfd6 <timer2CallBack+0x5f6>
			case IDLE:
				TCCR1B &= 0xF8;	// Stop Timer 1, stop output
     f16:	e1 e8       	ldi	r30, 0x81	; 129
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	88 7f       	andi	r24, 0xF8	; 248
     f1e:	80 83       	st	Z, r24
				position += (long)TCNT0 * step;	// sum up remaining steps
     f20:	26 b5       	in	r18, 0x26	; 38
     f22:	a0 91 19 07 	lds	r26, 0x0719
     f26:	b0 91 1a 07 	lds	r27, 0x071A
     f2a:	c0 90 0c 03 	lds	r12, 0x030C
     f2e:	d0 90 0d 03 	lds	r13, 0x030D
     f32:	e0 90 0e 03 	lds	r14, 0x030E
     f36:	f0 90 0f 03 	lds	r15, 0x030F
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__usmulhisi3>
     f40:	c6 0e       	add	r12, r22
     f42:	d7 1e       	adc	r13, r23
     f44:	e8 1e       	adc	r14, r24
     f46:	f9 1e       	adc	r15, r25
     f48:	c0 92 0c 03 	sts	0x030C, r12
     f4c:	d0 92 0d 03 	sts	0x030D, r13
     f50:	e0 92 0e 03 	sts	0x030E, r14
     f54:	f0 92 0f 03 	sts	0x030F, r15
				TCNT0 = 0;
     f58:	16 bc       	out	0x26, r1	; 38
				if(clear_position){
     f5a:	80 91 f3 02 	lds	r24, 0x02F3
     f5e:	88 23       	and	r24, r24
     f60:	91 f0       	breq	.+36     	; 0xf86 <timer2CallBack+0x5a6>
					clear_position = 0;
     f62:	10 92 f3 02 	sts	0x02F3, r1
					position = 0;
     f66:	10 92 0c 03 	sts	0x030C, r1
     f6a:	10 92 0d 03 	sts	0x030D, r1
     f6e:	10 92 0e 03 	sts	0x030E, r1
     f72:	10 92 0f 03 	sts	0x030F, r1
					uprintf("Position zeroed\r\n");
     f76:	8c ea       	ldi	r24, 0xAC	; 172
     f78:	92 e0       	ldi	r25, 0x02	; 2
     f7a:	9f 93       	push	r25
     f7c:	8f 93       	push	r24
     f7e:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
				}
				if(ISDEBUG){
     f86:	4f 99       	sbic	0x09, 7	; 9
     f88:	26 c0       	rjmp	.+76     	; 0xfd6 <timer2CallBack+0x5f6>
					uprintf("Speed at %d\r\n",speed);
     f8a:	80 91 00 03 	lds	r24, 0x0300
     f8e:	90 91 01 03 	lds	r25, 0x0301
     f92:	9f 93       	push	r25
     f94:	8f 93       	push	r24
     f96:	8e eb       	ldi	r24, 0xBE	; 190
     f98:	92 e0       	ldi	r25, 0x02	; 2
     f9a:	9f 93       	push	r25
     f9c:	8f 93       	push	r24
     f9e:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
					uprintf("Pos at %ld\r\n",position);
     fa2:	80 91 0c 03 	lds	r24, 0x030C
     fa6:	90 91 0d 03 	lds	r25, 0x030D
     faa:	a0 91 0e 03 	lds	r26, 0x030E
     fae:	b0 91 0f 03 	lds	r27, 0x030F
     fb2:	bf 93       	push	r27
     fb4:	af 93       	push	r26
     fb6:	9f 93       	push	r25
     fb8:	8f 93       	push	r24
     fba:	8c ec       	ldi	r24, 0xCC	; 204
     fbc:	92 e0       	ldi	r25, 0x02	; 2
     fbe:	9f 93       	push	r25
     fc0:	8f 93       	push	r24
     fc2:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     fc6:	8d b7       	in	r24, 0x3d	; 61
     fc8:	9e b7       	in	r25, 0x3e	; 62
     fca:	0a 96       	adiw	r24, 0x0a	; 10
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	f8 94       	cli
     fd0:	9e bf       	out	0x3e, r25	; 62
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	8d bf       	out	0x3d, r24	; 61
				}
		}
		oldstate = system_state;
     fd6:	80 91 fd 02 	lds	r24, 0x02FD
     fda:	80 93 fc 02 	sts	0x02FC, r24
		oldspeed = speed;
     fde:	80 91 00 03 	lds	r24, 0x0300
     fe2:	90 91 01 03 	lds	r25, 0x0301
     fe6:	90 93 1c 07 	sts	0x071C, r25
     fea:	80 93 1b 07 	sts	0x071B, r24
		oldisfast = isfast;
     fee:	80 91 25 07 	lds	r24, 0x0725
     ff2:	80 93 10 03 	sts	0x0310, r24
	}
}
     ff6:	1f 91       	pop	r17
     ff8:	0f 91       	pop	r16
     ffa:	ff 90       	pop	r15
     ffc:	ef 90       	pop	r14
     ffe:	df 90       	pop	r13
    1000:	cf 90       	pop	r12
    1002:	bf 90       	pop	r11
    1004:	af 90       	pop	r10
    1006:	08 95       	ret

00001008 <__vector_7>:
	va_end(args);
	_write_serial(buffer2);
}

/*Interrupt Service Routines*/
ISR(TIMER2_COMPA_vect, ISR_BLOCK){	// ISR for Timer 2 tick. Global 1ms timing
    1008:	1f 92       	push	r1
    100a:	0f 92       	push	r0
    100c:	0f b6       	in	r0, 0x3f	; 63
    100e:	0f 92       	push	r0
    1010:	11 24       	eor	r1, r1
    1012:	2f 93       	push	r18
    1014:	3f 93       	push	r19
    1016:	4f 93       	push	r20
    1018:	5f 93       	push	r21
    101a:	6f 93       	push	r22
    101c:	7f 93       	push	r23
    101e:	8f 93       	push	r24
    1020:	9f 93       	push	r25
    1022:	af 93       	push	r26
    1024:	bf 93       	push	r27
    1026:	ef 93       	push	r30
    1028:	ff 93       	push	r31
	milliseconds ++;
    102a:	20 91 04 03 	lds	r18, 0x0304
    102e:	30 91 05 03 	lds	r19, 0x0305
    1032:	40 91 06 03 	lds	r20, 0x0306
    1036:	50 91 07 03 	lds	r21, 0x0307
    103a:	60 91 08 03 	lds	r22, 0x0308
    103e:	70 91 09 03 	lds	r23, 0x0309
    1042:	80 91 0a 03 	lds	r24, 0x030A
    1046:	90 91 0b 03 	lds	r25, 0x030B
    104a:	a1 e0       	ldi	r26, 0x01	; 1
    104c:	0e 94 df 08 	call	0x11be	; 0x11be <__adddi3_s8>
    1050:	20 93 04 03 	sts	0x0304, r18
    1054:	30 93 05 03 	sts	0x0305, r19
    1058:	40 93 06 03 	sts	0x0306, r20
    105c:	50 93 07 03 	sts	0x0307, r21
    1060:	60 93 08 03 	sts	0x0308, r22
    1064:	70 93 09 03 	sts	0x0309, r23
    1068:	80 93 0a 03 	sts	0x030A, r24
    106c:	90 93 0b 03 	sts	0x030B, r25
	timer2CallBack();
    1070:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <timer2CallBack>
}
    1074:	ff 91       	pop	r31
    1076:	ef 91       	pop	r30
    1078:	bf 91       	pop	r27
    107a:	af 91       	pop	r26
    107c:	9f 91       	pop	r25
    107e:	8f 91       	pop	r24
    1080:	7f 91       	pop	r23
    1082:	6f 91       	pop	r22
    1084:	5f 91       	pop	r21
    1086:	4f 91       	pop	r20
    1088:	3f 91       	pop	r19
    108a:	2f 91       	pop	r18
    108c:	0f 90       	pop	r0
    108e:	0f be       	out	0x3f, r0	; 63
    1090:	0f 90       	pop	r0
    1092:	1f 90       	pop	r1
    1094:	18 95       	reti

00001096 <limitTriggeredCallBack>:
	}
}

/*Called when LIMIT is triggered. NOTE: THIS IS IN AN INTERRUPT ENVIRONMENT. ALL TIMING AND DELAYS WILL *NOT* WORK. */
void limitTriggeredCallBack(){
	if(ISDEBUG)
    1096:	4f 99       	sbic	0x09, 7	; 9
    1098:	26 c0       	rjmp	.+76     	; 0x10e6 <limitTriggeredCallBack+0x50>
		uprintf("Limit triggered at %d\r\n", milliseconds);
    109a:	80 91 04 03 	lds	r24, 0x0304
    109e:	90 91 05 03 	lds	r25, 0x0305
    10a2:	20 91 06 03 	lds	r18, 0x0306
    10a6:	30 91 07 03 	lds	r19, 0x0307
    10aa:	40 91 08 03 	lds	r20, 0x0308
    10ae:	50 91 09 03 	lds	r21, 0x0309
    10b2:	60 91 0a 03 	lds	r22, 0x030A
    10b6:	70 91 0b 03 	lds	r23, 0x030B
    10ba:	7f 93       	push	r23
    10bc:	6f 93       	push	r22
    10be:	5f 93       	push	r21
    10c0:	4f 93       	push	r20
    10c2:	3f 93       	push	r19
    10c4:	2f 93       	push	r18
    10c6:	9f 93       	push	r25
    10c8:	8f 93       	push	r24
    10ca:	89 ed       	ldi	r24, 0xD9	; 217
    10cc:	92 e0       	ldi	r25, 0x02	; 2
    10ce:	9f 93       	push	r25
    10d0:	8f 93       	push	r24
    10d2:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
    10d6:	8d b7       	in	r24, 0x3d	; 61
    10d8:	9e b7       	in	r25, 0x3e	; 62
    10da:	0a 96       	adiw	r24, 0x0a	; 10
    10dc:	0f b6       	in	r0, 0x3f	; 63
    10de:	f8 94       	cli
    10e0:	9e bf       	out	0x3e, r25	; 62
    10e2:	0f be       	out	0x3f, r0	; 63
    10e4:	8d bf       	out	0x3d, r24	; 61
	switch(system_state){
    10e6:	80 91 fd 02 	lds	r24, 0x02FD
    10ea:	81 30       	cpi	r24, 0x01	; 1
    10ec:	11 f0       	breq	.+4      	; 0x10f2 <limitTriggeredCallBack+0x5c>
    10ee:	83 30       	cpi	r24, 0x03	; 3
    10f0:	79 f4       	brne	.+30     	; 0x1110 <limitTriggeredCallBack+0x7a>
		case AUTO_FORWARD:
		case MANUAL_FORWARD:
			system_state = IDLE;
    10f2:	10 92 fd 02 	sts	0x02FD, r1
			clear_position = 1;	// clear position at next update
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	80 93 f3 02 	sts	0x02F3, r24
			if(ISDEBUG)
    10fc:	4f 99       	sbic	0x09, 7	; 9
    10fe:	08 c0       	rjmp	.+16     	; 0x1110 <limitTriggeredCallBack+0x7a>
				uprintf("IDLE\r\n");
    1100:	80 e0       	ldi	r24, 0x00	; 0
    1102:	91 e0       	ldi	r25, 0x01	; 1
    1104:	9f 93       	push	r25
    1106:	8f 93       	push	r24
    1108:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	08 95       	ret

00001112 <__vector_1>:
		speed = 1023 - (ADCL | ((unsigned int)ADCH << 8));
		speed_update_timer = milliseconds;
	}
}

ISR(INT0_vect,ISR_BLOCK){// ISR for LIMIT switch
    1112:	1f 92       	push	r1
    1114:	0f 92       	push	r0
    1116:	0f b6       	in	r0, 0x3f	; 63
    1118:	0f 92       	push	r0
    111a:	11 24       	eor	r1, r1
    111c:	2f 93       	push	r18
    111e:	3f 93       	push	r19
    1120:	4f 93       	push	r20
    1122:	5f 93       	push	r21
    1124:	6f 93       	push	r22
    1126:	7f 93       	push	r23
    1128:	8f 93       	push	r24
    112a:	9f 93       	push	r25
    112c:	af 93       	push	r26
    112e:	bf 93       	push	r27
    1130:	ef 93       	push	r30
    1132:	ff 93       	push	r31
	limitTriggeredCallBack();
    1134:	0e 94 4b 08 	call	0x1096	; 0x1096 <limitTriggeredCallBack>
}
    1138:	ff 91       	pop	r31
    113a:	ef 91       	pop	r30
    113c:	bf 91       	pop	r27
    113e:	af 91       	pop	r26
    1140:	9f 91       	pop	r25
    1142:	8f 91       	pop	r24
    1144:	7f 91       	pop	r23
    1146:	6f 91       	pop	r22
    1148:	5f 91       	pop	r21
    114a:	4f 91       	pop	r20
    114c:	3f 91       	pop	r19
    114e:	2f 91       	pop	r18
    1150:	0f 90       	pop	r0
    1152:	0f be       	out	0x3f, r0	; 63
    1154:	0f 90       	pop	r0
    1156:	1f 90       	pop	r1
    1158:	18 95       	reti

0000115a <main>:
}

/*Program entry point*/
int main()
{
	init();
    115a:	0e 94 3f 02 	call	0x47e	; 0x47e <init>
	calibrate();
    115e:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <calibrate>
	ADCSRA |= _BV(ADSC); // start first sampling
    1162:	ea e7       	ldi	r30, 0x7A	; 122
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	80 64       	ori	r24, 0x40	; 64
    116a:	80 83       	st	Z, r24
	wdt_enable(WDTO_250MS);	// Enable watch dog timer
    116c:	2c e0       	ldi	r18, 0x0C	; 12
    116e:	88 e1       	ldi	r24, 0x18	; 24
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	0f b6       	in	r0, 0x3f	; 63
    1174:	f8 94       	cli
    1176:	a8 95       	wdr
    1178:	80 93 60 00 	sts	0x0060, r24
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	20 93 60 00 	sts	0x0060, r18
	while (1){
		wdt_reset();	// feed the hungry dog
    1182:	a8 95       	wdr
    1184:	8f e1       	ldi	r24, 0x1F	; 31
    1186:	9e e4       	ldi	r25, 0x4E	; 78
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	f1 f7       	brne	.-4      	; 0x1188 <main+0x2e>
    118c:	00 c0       	rjmp	.+0      	; 0x118e <main+0x34>
    118e:	00 00       	nop
    1190:	f8 cf       	rjmp	.-16     	; 0x1182 <main+0x28>

00001192 <__umulhisi3>:
    1192:	a2 9f       	mul	r26, r18
    1194:	b0 01       	movw	r22, r0
    1196:	b3 9f       	mul	r27, r19
    1198:	c0 01       	movw	r24, r0
    119a:	a3 9f       	mul	r26, r19
    119c:	70 0d       	add	r23, r0
    119e:	81 1d       	adc	r24, r1
    11a0:	11 24       	eor	r1, r1
    11a2:	91 1d       	adc	r25, r1
    11a4:	b2 9f       	mul	r27, r18
    11a6:	70 0d       	add	r23, r0
    11a8:	81 1d       	adc	r24, r1
    11aa:	11 24       	eor	r1, r1
    11ac:	91 1d       	adc	r25, r1
    11ae:	08 95       	ret

000011b0 <__usmulhisi3>:
    11b0:	0e 94 c9 08 	call	0x1192	; 0x1192 <__umulhisi3>

000011b4 <__usmulhisi3_tail>:
    11b4:	b7 ff       	sbrs	r27, 7
    11b6:	08 95       	ret
    11b8:	82 1b       	sub	r24, r18
    11ba:	93 0b       	sbc	r25, r19
    11bc:	08 95       	ret

000011be <__adddi3_s8>:
    11be:	00 24       	eor	r0, r0
    11c0:	a7 fd       	sbrc	r26, 7
    11c2:	00 94       	com	r0
    11c4:	2a 0f       	add	r18, r26
    11c6:	30 1d       	adc	r19, r0
    11c8:	40 1d       	adc	r20, r0
    11ca:	50 1d       	adc	r21, r0
    11cc:	60 1d       	adc	r22, r0
    11ce:	70 1d       	adc	r23, r0
    11d0:	80 1d       	adc	r24, r0
    11d2:	90 1d       	adc	r25, r0
    11d4:	08 95       	ret

000011d6 <__subdi3>:
    11d6:	2a 19       	sub	r18, r10
    11d8:	3b 09       	sbc	r19, r11
    11da:	4c 09       	sbc	r20, r12
    11dc:	5d 09       	sbc	r21, r13
    11de:	6e 09       	sbc	r22, r14
    11e0:	7f 09       	sbc	r23, r15
    11e2:	80 0b       	sbc	r24, r16
    11e4:	91 0b       	sbc	r25, r17
    11e6:	08 95       	ret

000011e8 <__cmpdi2_s8>:
    11e8:	00 24       	eor	r0, r0
    11ea:	a7 fd       	sbrc	r26, 7
    11ec:	00 94       	com	r0
    11ee:	2a 17       	cp	r18, r26
    11f0:	30 05       	cpc	r19, r0
    11f2:	40 05       	cpc	r20, r0
    11f4:	50 05       	cpc	r21, r0
    11f6:	60 05       	cpc	r22, r0
    11f8:	70 05       	cpc	r23, r0
    11fa:	80 05       	cpc	r24, r0
    11fc:	90 05       	cpc	r25, r0
    11fe:	08 95       	ret

00001200 <vsprintf>:
    1200:	ae e0       	ldi	r26, 0x0E	; 14
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	e6 e0       	ldi	r30, 0x06	; 6
    1206:	f9 e0       	ldi	r31, 0x09	; 9
    1208:	0c 94 a2 0b 	jmp	0x1744	; 0x1744 <__prologue_saves__+0x1c>
    120c:	8c 01       	movw	r16, r24
    120e:	86 e0       	ldi	r24, 0x06	; 6
    1210:	8c 83       	std	Y+4, r24	; 0x04
    1212:	1a 83       	std	Y+2, r17	; 0x02
    1214:	09 83       	std	Y+1, r16	; 0x01
    1216:	8f ef       	ldi	r24, 0xFF	; 255
    1218:	9f e7       	ldi	r25, 0x7F	; 127
    121a:	9e 83       	std	Y+6, r25	; 0x06
    121c:	8d 83       	std	Y+5, r24	; 0x05
    121e:	ce 01       	movw	r24, r28
    1220:	01 96       	adiw	r24, 0x01	; 1
    1222:	0e 94 1c 09 	call	0x1238	; 0x1238 <vfprintf>
    1226:	ef 81       	ldd	r30, Y+7	; 0x07
    1228:	f8 85       	ldd	r31, Y+8	; 0x08
    122a:	e0 0f       	add	r30, r16
    122c:	f1 1f       	adc	r31, r17
    122e:	10 82       	st	Z, r1
    1230:	2e 96       	adiw	r28, 0x0e	; 14
    1232:	e4 e0       	ldi	r30, 0x04	; 4
    1234:	0c 94 be 0b 	jmp	0x177c	; 0x177c <__epilogue_restores__+0x1c>

00001238 <vfprintf>:
    1238:	ac e0       	ldi	r26, 0x0C	; 12
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e2 e2       	ldi	r30, 0x22	; 34
    123e:	f9 e0       	ldi	r31, 0x09	; 9
    1240:	0c 94 94 0b 	jmp	0x1728	; 0x1728 <__prologue_saves__>
    1244:	7c 01       	movw	r14, r24
    1246:	6b 01       	movw	r12, r22
    1248:	8a 01       	movw	r16, r20
    124a:	fc 01       	movw	r30, r24
    124c:	17 82       	std	Z+7, r1	; 0x07
    124e:	16 82       	std	Z+6, r1	; 0x06
    1250:	83 81       	ldd	r24, Z+3	; 0x03
    1252:	81 ff       	sbrs	r24, 1
    1254:	bd c1       	rjmp	.+890    	; 0x15d0 <vfprintf+0x398>
    1256:	ce 01       	movw	r24, r28
    1258:	01 96       	adiw	r24, 0x01	; 1
    125a:	4c 01       	movw	r8, r24
    125c:	f7 01       	movw	r30, r14
    125e:	93 81       	ldd	r25, Z+3	; 0x03
    1260:	f6 01       	movw	r30, r12
    1262:	93 fd       	sbrc	r25, 3
    1264:	85 91       	lpm	r24, Z+
    1266:	93 ff       	sbrs	r25, 3
    1268:	81 91       	ld	r24, Z+
    126a:	6f 01       	movw	r12, r30
    126c:	88 23       	and	r24, r24
    126e:	09 f4       	brne	.+2      	; 0x1272 <vfprintf+0x3a>
    1270:	ab c1       	rjmp	.+854    	; 0x15c8 <vfprintf+0x390>
    1272:	85 32       	cpi	r24, 0x25	; 37
    1274:	39 f4       	brne	.+14     	; 0x1284 <vfprintf+0x4c>
    1276:	93 fd       	sbrc	r25, 3
    1278:	85 91       	lpm	r24, Z+
    127a:	93 ff       	sbrs	r25, 3
    127c:	81 91       	ld	r24, Z+
    127e:	6f 01       	movw	r12, r30
    1280:	85 32       	cpi	r24, 0x25	; 37
    1282:	29 f4       	brne	.+10     	; 0x128e <vfprintf+0x56>
    1284:	b7 01       	movw	r22, r14
    1286:	90 e0       	ldi	r25, 0x00	; 0
    1288:	0e 94 04 0b 	call	0x1608	; 0x1608 <fputc>
    128c:	e7 cf       	rjmp	.-50     	; 0x125c <vfprintf+0x24>
    128e:	51 2c       	mov	r5, r1
    1290:	31 2c       	mov	r3, r1
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	20 32       	cpi	r18, 0x20	; 32
    1296:	a0 f4       	brcc	.+40     	; 0x12c0 <vfprintf+0x88>
    1298:	8b 32       	cpi	r24, 0x2B	; 43
    129a:	69 f0       	breq	.+26     	; 0x12b6 <vfprintf+0x7e>
    129c:	30 f4       	brcc	.+12     	; 0x12aa <vfprintf+0x72>
    129e:	80 32       	cpi	r24, 0x20	; 32
    12a0:	59 f0       	breq	.+22     	; 0x12b8 <vfprintf+0x80>
    12a2:	83 32       	cpi	r24, 0x23	; 35
    12a4:	69 f4       	brne	.+26     	; 0x12c0 <vfprintf+0x88>
    12a6:	20 61       	ori	r18, 0x10	; 16
    12a8:	2c c0       	rjmp	.+88     	; 0x1302 <vfprintf+0xca>
    12aa:	8d 32       	cpi	r24, 0x2D	; 45
    12ac:	39 f0       	breq	.+14     	; 0x12bc <vfprintf+0x84>
    12ae:	80 33       	cpi	r24, 0x30	; 48
    12b0:	39 f4       	brne	.+14     	; 0x12c0 <vfprintf+0x88>
    12b2:	21 60       	ori	r18, 0x01	; 1
    12b4:	26 c0       	rjmp	.+76     	; 0x1302 <vfprintf+0xca>
    12b6:	22 60       	ori	r18, 0x02	; 2
    12b8:	24 60       	ori	r18, 0x04	; 4
    12ba:	23 c0       	rjmp	.+70     	; 0x1302 <vfprintf+0xca>
    12bc:	28 60       	ori	r18, 0x08	; 8
    12be:	21 c0       	rjmp	.+66     	; 0x1302 <vfprintf+0xca>
    12c0:	27 fd       	sbrc	r18, 7
    12c2:	27 c0       	rjmp	.+78     	; 0x1312 <vfprintf+0xda>
    12c4:	30 ed       	ldi	r19, 0xD0	; 208
    12c6:	38 0f       	add	r19, r24
    12c8:	3a 30       	cpi	r19, 0x0A	; 10
    12ca:	78 f4       	brcc	.+30     	; 0x12ea <vfprintf+0xb2>
    12cc:	26 ff       	sbrs	r18, 6
    12ce:	06 c0       	rjmp	.+12     	; 0x12dc <vfprintf+0xa4>
    12d0:	fa e0       	ldi	r31, 0x0A	; 10
    12d2:	5f 9e       	mul	r5, r31
    12d4:	30 0d       	add	r19, r0
    12d6:	11 24       	eor	r1, r1
    12d8:	53 2e       	mov	r5, r19
    12da:	13 c0       	rjmp	.+38     	; 0x1302 <vfprintf+0xca>
    12dc:	8a e0       	ldi	r24, 0x0A	; 10
    12de:	38 9e       	mul	r3, r24
    12e0:	30 0d       	add	r19, r0
    12e2:	11 24       	eor	r1, r1
    12e4:	33 2e       	mov	r3, r19
    12e6:	20 62       	ori	r18, 0x20	; 32
    12e8:	0c c0       	rjmp	.+24     	; 0x1302 <vfprintf+0xca>
    12ea:	8e 32       	cpi	r24, 0x2E	; 46
    12ec:	21 f4       	brne	.+8      	; 0x12f6 <vfprintf+0xbe>
    12ee:	26 fd       	sbrc	r18, 6
    12f0:	6b c1       	rjmp	.+726    	; 0x15c8 <vfprintf+0x390>
    12f2:	20 64       	ori	r18, 0x40	; 64
    12f4:	06 c0       	rjmp	.+12     	; 0x1302 <vfprintf+0xca>
    12f6:	8c 36       	cpi	r24, 0x6C	; 108
    12f8:	11 f4       	brne	.+4      	; 0x12fe <vfprintf+0xc6>
    12fa:	20 68       	ori	r18, 0x80	; 128
    12fc:	02 c0       	rjmp	.+4      	; 0x1302 <vfprintf+0xca>
    12fe:	88 36       	cpi	r24, 0x68	; 104
    1300:	41 f4       	brne	.+16     	; 0x1312 <vfprintf+0xda>
    1302:	f6 01       	movw	r30, r12
    1304:	93 fd       	sbrc	r25, 3
    1306:	85 91       	lpm	r24, Z+
    1308:	93 ff       	sbrs	r25, 3
    130a:	81 91       	ld	r24, Z+
    130c:	6f 01       	movw	r12, r30
    130e:	81 11       	cpse	r24, r1
    1310:	c1 cf       	rjmp	.-126    	; 0x1294 <vfprintf+0x5c>
    1312:	98 2f       	mov	r25, r24
    1314:	9f 7d       	andi	r25, 0xDF	; 223
    1316:	95 54       	subi	r25, 0x45	; 69
    1318:	93 30       	cpi	r25, 0x03	; 3
    131a:	28 f4       	brcc	.+10     	; 0x1326 <vfprintf+0xee>
    131c:	0c 5f       	subi	r16, 0xFC	; 252
    131e:	1f 4f       	sbci	r17, 0xFF	; 255
    1320:	ff e3       	ldi	r31, 0x3F	; 63
    1322:	f9 83       	std	Y+1, r31	; 0x01
    1324:	0d c0       	rjmp	.+26     	; 0x1340 <vfprintf+0x108>
    1326:	83 36       	cpi	r24, 0x63	; 99
    1328:	31 f0       	breq	.+12     	; 0x1336 <vfprintf+0xfe>
    132a:	83 37       	cpi	r24, 0x73	; 115
    132c:	71 f0       	breq	.+28     	; 0x134a <vfprintf+0x112>
    132e:	83 35       	cpi	r24, 0x53	; 83
    1330:	09 f0       	breq	.+2      	; 0x1334 <vfprintf+0xfc>
    1332:	5b c0       	rjmp	.+182    	; 0x13ea <vfprintf+0x1b2>
    1334:	22 c0       	rjmp	.+68     	; 0x137a <vfprintf+0x142>
    1336:	f8 01       	movw	r30, r16
    1338:	80 81       	ld	r24, Z
    133a:	89 83       	std	Y+1, r24	; 0x01
    133c:	0e 5f       	subi	r16, 0xFE	; 254
    133e:	1f 4f       	sbci	r17, 0xFF	; 255
    1340:	44 24       	eor	r4, r4
    1342:	43 94       	inc	r4
    1344:	51 2c       	mov	r5, r1
    1346:	54 01       	movw	r10, r8
    1348:	15 c0       	rjmp	.+42     	; 0x1374 <vfprintf+0x13c>
    134a:	38 01       	movw	r6, r16
    134c:	f2 e0       	ldi	r31, 0x02	; 2
    134e:	6f 0e       	add	r6, r31
    1350:	71 1c       	adc	r7, r1
    1352:	f8 01       	movw	r30, r16
    1354:	a0 80       	ld	r10, Z
    1356:	b1 80       	ldd	r11, Z+1	; 0x01
    1358:	26 ff       	sbrs	r18, 6
    135a:	03 c0       	rjmp	.+6      	; 0x1362 <vfprintf+0x12a>
    135c:	65 2d       	mov	r22, r5
    135e:	70 e0       	ldi	r23, 0x00	; 0
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <vfprintf+0x12e>
    1362:	6f ef       	ldi	r22, 0xFF	; 255
    1364:	7f ef       	ldi	r23, 0xFF	; 255
    1366:	c5 01       	movw	r24, r10
    1368:	2c 87       	std	Y+12, r18	; 0x0c
    136a:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <strnlen>
    136e:	2c 01       	movw	r4, r24
    1370:	83 01       	movw	r16, r6
    1372:	2c 85       	ldd	r18, Y+12	; 0x0c
    1374:	2f 77       	andi	r18, 0x7F	; 127
    1376:	22 2e       	mov	r2, r18
    1378:	17 c0       	rjmp	.+46     	; 0x13a8 <vfprintf+0x170>
    137a:	38 01       	movw	r6, r16
    137c:	f2 e0       	ldi	r31, 0x02	; 2
    137e:	6f 0e       	add	r6, r31
    1380:	71 1c       	adc	r7, r1
    1382:	f8 01       	movw	r30, r16
    1384:	a0 80       	ld	r10, Z
    1386:	b1 80       	ldd	r11, Z+1	; 0x01
    1388:	26 ff       	sbrs	r18, 6
    138a:	03 c0       	rjmp	.+6      	; 0x1392 <vfprintf+0x15a>
    138c:	65 2d       	mov	r22, r5
    138e:	70 e0       	ldi	r23, 0x00	; 0
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <vfprintf+0x15e>
    1392:	6f ef       	ldi	r22, 0xFF	; 255
    1394:	7f ef       	ldi	r23, 0xFF	; 255
    1396:	c5 01       	movw	r24, r10
    1398:	2c 87       	std	Y+12, r18	; 0x0c
    139a:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <strnlen_P>
    139e:	2c 01       	movw	r4, r24
    13a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    13a2:	20 68       	ori	r18, 0x80	; 128
    13a4:	22 2e       	mov	r2, r18
    13a6:	83 01       	movw	r16, r6
    13a8:	23 fc       	sbrc	r2, 3
    13aa:	1b c0       	rjmp	.+54     	; 0x13e2 <vfprintf+0x1aa>
    13ac:	83 2d       	mov	r24, r3
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	48 16       	cp	r4, r24
    13b2:	59 06       	cpc	r5, r25
    13b4:	b0 f4       	brcc	.+44     	; 0x13e2 <vfprintf+0x1aa>
    13b6:	b7 01       	movw	r22, r14
    13b8:	80 e2       	ldi	r24, 0x20	; 32
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	0e 94 04 0b 	call	0x1608	; 0x1608 <fputc>
    13c0:	3a 94       	dec	r3
    13c2:	f4 cf       	rjmp	.-24     	; 0x13ac <vfprintf+0x174>
    13c4:	f5 01       	movw	r30, r10
    13c6:	27 fc       	sbrc	r2, 7
    13c8:	85 91       	lpm	r24, Z+
    13ca:	27 fe       	sbrs	r2, 7
    13cc:	81 91       	ld	r24, Z+
    13ce:	5f 01       	movw	r10, r30
    13d0:	b7 01       	movw	r22, r14
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	0e 94 04 0b 	call	0x1608	; 0x1608 <fputc>
    13d8:	31 10       	cpse	r3, r1
    13da:	3a 94       	dec	r3
    13dc:	f1 e0       	ldi	r31, 0x01	; 1
    13de:	4f 1a       	sub	r4, r31
    13e0:	51 08       	sbc	r5, r1
    13e2:	41 14       	cp	r4, r1
    13e4:	51 04       	cpc	r5, r1
    13e6:	71 f7       	brne	.-36     	; 0x13c4 <vfprintf+0x18c>
    13e8:	e5 c0       	rjmp	.+458    	; 0x15b4 <vfprintf+0x37c>
    13ea:	84 36       	cpi	r24, 0x64	; 100
    13ec:	11 f0       	breq	.+4      	; 0x13f2 <vfprintf+0x1ba>
    13ee:	89 36       	cpi	r24, 0x69	; 105
    13f0:	39 f5       	brne	.+78     	; 0x1440 <vfprintf+0x208>
    13f2:	f8 01       	movw	r30, r16
    13f4:	27 ff       	sbrs	r18, 7
    13f6:	07 c0       	rjmp	.+14     	; 0x1406 <vfprintf+0x1ce>
    13f8:	60 81       	ld	r22, Z
    13fa:	71 81       	ldd	r23, Z+1	; 0x01
    13fc:	82 81       	ldd	r24, Z+2	; 0x02
    13fe:	93 81       	ldd	r25, Z+3	; 0x03
    1400:	0c 5f       	subi	r16, 0xFC	; 252
    1402:	1f 4f       	sbci	r17, 0xFF	; 255
    1404:	08 c0       	rjmp	.+16     	; 0x1416 <vfprintf+0x1de>
    1406:	60 81       	ld	r22, Z
    1408:	71 81       	ldd	r23, Z+1	; 0x01
    140a:	88 27       	eor	r24, r24
    140c:	77 fd       	sbrc	r23, 7
    140e:	80 95       	com	r24
    1410:	98 2f       	mov	r25, r24
    1412:	0e 5f       	subi	r16, 0xFE	; 254
    1414:	1f 4f       	sbci	r17, 0xFF	; 255
    1416:	2f 76       	andi	r18, 0x6F	; 111
    1418:	b2 2e       	mov	r11, r18
    141a:	97 ff       	sbrs	r25, 7
    141c:	09 c0       	rjmp	.+18     	; 0x1430 <vfprintf+0x1f8>
    141e:	90 95       	com	r25
    1420:	80 95       	com	r24
    1422:	70 95       	com	r23
    1424:	61 95       	neg	r22
    1426:	7f 4f       	sbci	r23, 0xFF	; 255
    1428:	8f 4f       	sbci	r24, 0xFF	; 255
    142a:	9f 4f       	sbci	r25, 0xFF	; 255
    142c:	20 68       	ori	r18, 0x80	; 128
    142e:	b2 2e       	mov	r11, r18
    1430:	2a e0       	ldi	r18, 0x0A	; 10
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	a4 01       	movw	r20, r8
    1436:	0e 94 36 0b 	call	0x166c	; 0x166c <__ultoa_invert>
    143a:	a8 2e       	mov	r10, r24
    143c:	a8 18       	sub	r10, r8
    143e:	44 c0       	rjmp	.+136    	; 0x14c8 <vfprintf+0x290>
    1440:	85 37       	cpi	r24, 0x75	; 117
    1442:	29 f4       	brne	.+10     	; 0x144e <vfprintf+0x216>
    1444:	2f 7e       	andi	r18, 0xEF	; 239
    1446:	b2 2e       	mov	r11, r18
    1448:	2a e0       	ldi	r18, 0x0A	; 10
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	25 c0       	rjmp	.+74     	; 0x1498 <vfprintf+0x260>
    144e:	f2 2f       	mov	r31, r18
    1450:	f9 7f       	andi	r31, 0xF9	; 249
    1452:	bf 2e       	mov	r11, r31
    1454:	8f 36       	cpi	r24, 0x6F	; 111
    1456:	c1 f0       	breq	.+48     	; 0x1488 <vfprintf+0x250>
    1458:	18 f4       	brcc	.+6      	; 0x1460 <vfprintf+0x228>
    145a:	88 35       	cpi	r24, 0x58	; 88
    145c:	79 f0       	breq	.+30     	; 0x147c <vfprintf+0x244>
    145e:	b4 c0       	rjmp	.+360    	; 0x15c8 <vfprintf+0x390>
    1460:	80 37       	cpi	r24, 0x70	; 112
    1462:	19 f0       	breq	.+6      	; 0x146a <vfprintf+0x232>
    1464:	88 37       	cpi	r24, 0x78	; 120
    1466:	21 f0       	breq	.+8      	; 0x1470 <vfprintf+0x238>
    1468:	af c0       	rjmp	.+350    	; 0x15c8 <vfprintf+0x390>
    146a:	2f 2f       	mov	r18, r31
    146c:	20 61       	ori	r18, 0x10	; 16
    146e:	b2 2e       	mov	r11, r18
    1470:	b4 fe       	sbrs	r11, 4
    1472:	0d c0       	rjmp	.+26     	; 0x148e <vfprintf+0x256>
    1474:	8b 2d       	mov	r24, r11
    1476:	84 60       	ori	r24, 0x04	; 4
    1478:	b8 2e       	mov	r11, r24
    147a:	09 c0       	rjmp	.+18     	; 0x148e <vfprintf+0x256>
    147c:	24 ff       	sbrs	r18, 4
    147e:	0a c0       	rjmp	.+20     	; 0x1494 <vfprintf+0x25c>
    1480:	9f 2f       	mov	r25, r31
    1482:	96 60       	ori	r25, 0x06	; 6
    1484:	b9 2e       	mov	r11, r25
    1486:	06 c0       	rjmp	.+12     	; 0x1494 <vfprintf+0x25c>
    1488:	28 e0       	ldi	r18, 0x08	; 8
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	05 c0       	rjmp	.+10     	; 0x1498 <vfprintf+0x260>
    148e:	20 e1       	ldi	r18, 0x10	; 16
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	02 c0       	rjmp	.+4      	; 0x1498 <vfprintf+0x260>
    1494:	20 e1       	ldi	r18, 0x10	; 16
    1496:	32 e0       	ldi	r19, 0x02	; 2
    1498:	f8 01       	movw	r30, r16
    149a:	b7 fe       	sbrs	r11, 7
    149c:	07 c0       	rjmp	.+14     	; 0x14ac <vfprintf+0x274>
    149e:	60 81       	ld	r22, Z
    14a0:	71 81       	ldd	r23, Z+1	; 0x01
    14a2:	82 81       	ldd	r24, Z+2	; 0x02
    14a4:	93 81       	ldd	r25, Z+3	; 0x03
    14a6:	0c 5f       	subi	r16, 0xFC	; 252
    14a8:	1f 4f       	sbci	r17, 0xFF	; 255
    14aa:	06 c0       	rjmp	.+12     	; 0x14b8 <vfprintf+0x280>
    14ac:	60 81       	ld	r22, Z
    14ae:	71 81       	ldd	r23, Z+1	; 0x01
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	0e 5f       	subi	r16, 0xFE	; 254
    14b6:	1f 4f       	sbci	r17, 0xFF	; 255
    14b8:	a4 01       	movw	r20, r8
    14ba:	0e 94 36 0b 	call	0x166c	; 0x166c <__ultoa_invert>
    14be:	a8 2e       	mov	r10, r24
    14c0:	a8 18       	sub	r10, r8
    14c2:	fb 2d       	mov	r31, r11
    14c4:	ff 77       	andi	r31, 0x7F	; 127
    14c6:	bf 2e       	mov	r11, r31
    14c8:	b6 fe       	sbrs	r11, 6
    14ca:	0b c0       	rjmp	.+22     	; 0x14e2 <vfprintf+0x2aa>
    14cc:	2b 2d       	mov	r18, r11
    14ce:	2e 7f       	andi	r18, 0xFE	; 254
    14d0:	a5 14       	cp	r10, r5
    14d2:	50 f4       	brcc	.+20     	; 0x14e8 <vfprintf+0x2b0>
    14d4:	b4 fe       	sbrs	r11, 4
    14d6:	0a c0       	rjmp	.+20     	; 0x14ec <vfprintf+0x2b4>
    14d8:	b2 fc       	sbrc	r11, 2
    14da:	08 c0       	rjmp	.+16     	; 0x14ec <vfprintf+0x2b4>
    14dc:	2b 2d       	mov	r18, r11
    14de:	2e 7e       	andi	r18, 0xEE	; 238
    14e0:	05 c0       	rjmp	.+10     	; 0x14ec <vfprintf+0x2b4>
    14e2:	7a 2c       	mov	r7, r10
    14e4:	2b 2d       	mov	r18, r11
    14e6:	03 c0       	rjmp	.+6      	; 0x14ee <vfprintf+0x2b6>
    14e8:	7a 2c       	mov	r7, r10
    14ea:	01 c0       	rjmp	.+2      	; 0x14ee <vfprintf+0x2b6>
    14ec:	75 2c       	mov	r7, r5
    14ee:	24 ff       	sbrs	r18, 4
    14f0:	0d c0       	rjmp	.+26     	; 0x150c <vfprintf+0x2d4>
    14f2:	fe 01       	movw	r30, r28
    14f4:	ea 0d       	add	r30, r10
    14f6:	f1 1d       	adc	r31, r1
    14f8:	80 81       	ld	r24, Z
    14fa:	80 33       	cpi	r24, 0x30	; 48
    14fc:	11 f4       	brne	.+4      	; 0x1502 <vfprintf+0x2ca>
    14fe:	29 7e       	andi	r18, 0xE9	; 233
    1500:	09 c0       	rjmp	.+18     	; 0x1514 <vfprintf+0x2dc>
    1502:	22 ff       	sbrs	r18, 2
    1504:	06 c0       	rjmp	.+12     	; 0x1512 <vfprintf+0x2da>
    1506:	73 94       	inc	r7
    1508:	73 94       	inc	r7
    150a:	04 c0       	rjmp	.+8      	; 0x1514 <vfprintf+0x2dc>
    150c:	82 2f       	mov	r24, r18
    150e:	86 78       	andi	r24, 0x86	; 134
    1510:	09 f0       	breq	.+2      	; 0x1514 <vfprintf+0x2dc>
    1512:	73 94       	inc	r7
    1514:	23 fd       	sbrc	r18, 3
    1516:	13 c0       	rjmp	.+38     	; 0x153e <vfprintf+0x306>
    1518:	20 ff       	sbrs	r18, 0
    151a:	06 c0       	rjmp	.+12     	; 0x1528 <vfprintf+0x2f0>
    151c:	5a 2c       	mov	r5, r10
    151e:	73 14       	cp	r7, r3
    1520:	18 f4       	brcc	.+6      	; 0x1528 <vfprintf+0x2f0>
    1522:	53 0c       	add	r5, r3
    1524:	57 18       	sub	r5, r7
    1526:	73 2c       	mov	r7, r3
    1528:	73 14       	cp	r7, r3
    152a:	68 f4       	brcc	.+26     	; 0x1546 <vfprintf+0x30e>
    152c:	b7 01       	movw	r22, r14
    152e:	80 e2       	ldi	r24, 0x20	; 32
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	2c 87       	std	Y+12, r18	; 0x0c
    1534:	0e 94 04 0b 	call	0x1608	; 0x1608 <fputc>
    1538:	73 94       	inc	r7
    153a:	2c 85       	ldd	r18, Y+12	; 0x0c
    153c:	f5 cf       	rjmp	.-22     	; 0x1528 <vfprintf+0x2f0>
    153e:	73 14       	cp	r7, r3
    1540:	10 f4       	brcc	.+4      	; 0x1546 <vfprintf+0x30e>
    1542:	37 18       	sub	r3, r7
    1544:	01 c0       	rjmp	.+2      	; 0x1548 <vfprintf+0x310>
    1546:	31 2c       	mov	r3, r1
    1548:	24 ff       	sbrs	r18, 4
    154a:	12 c0       	rjmp	.+36     	; 0x1570 <vfprintf+0x338>
    154c:	b7 01       	movw	r22, r14
    154e:	80 e3       	ldi	r24, 0x30	; 48
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	2c 87       	std	Y+12, r18	; 0x0c
    1554:	0e 94 04 0b 	call	0x1608	; 0x1608 <fputc>
    1558:	2c 85       	ldd	r18, Y+12	; 0x0c
    155a:	22 ff       	sbrs	r18, 2
    155c:	17 c0       	rjmp	.+46     	; 0x158c <vfprintf+0x354>
    155e:	21 ff       	sbrs	r18, 1
    1560:	03 c0       	rjmp	.+6      	; 0x1568 <vfprintf+0x330>
    1562:	88 e5       	ldi	r24, 0x58	; 88
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	02 c0       	rjmp	.+4      	; 0x156c <vfprintf+0x334>
    1568:	88 e7       	ldi	r24, 0x78	; 120
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	b7 01       	movw	r22, r14
    156e:	0c c0       	rjmp	.+24     	; 0x1588 <vfprintf+0x350>
    1570:	82 2f       	mov	r24, r18
    1572:	86 78       	andi	r24, 0x86	; 134
    1574:	59 f0       	breq	.+22     	; 0x158c <vfprintf+0x354>
    1576:	21 fd       	sbrc	r18, 1
    1578:	02 c0       	rjmp	.+4      	; 0x157e <vfprintf+0x346>
    157a:	80 e2       	ldi	r24, 0x20	; 32
    157c:	01 c0       	rjmp	.+2      	; 0x1580 <vfprintf+0x348>
    157e:	8b e2       	ldi	r24, 0x2B	; 43
    1580:	27 fd       	sbrc	r18, 7
    1582:	8d e2       	ldi	r24, 0x2D	; 45
    1584:	b7 01       	movw	r22, r14
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	0e 94 04 0b 	call	0x1608	; 0x1608 <fputc>
    158c:	a5 14       	cp	r10, r5
    158e:	38 f4       	brcc	.+14     	; 0x159e <vfprintf+0x366>
    1590:	b7 01       	movw	r22, r14
    1592:	80 e3       	ldi	r24, 0x30	; 48
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	0e 94 04 0b 	call	0x1608	; 0x1608 <fputc>
    159a:	5a 94       	dec	r5
    159c:	f7 cf       	rjmp	.-18     	; 0x158c <vfprintf+0x354>
    159e:	aa 94       	dec	r10
    15a0:	f4 01       	movw	r30, r8
    15a2:	ea 0d       	add	r30, r10
    15a4:	f1 1d       	adc	r31, r1
    15a6:	80 81       	ld	r24, Z
    15a8:	b7 01       	movw	r22, r14
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	0e 94 04 0b 	call	0x1608	; 0x1608 <fputc>
    15b0:	a1 10       	cpse	r10, r1
    15b2:	f5 cf       	rjmp	.-22     	; 0x159e <vfprintf+0x366>
    15b4:	33 20       	and	r3, r3
    15b6:	09 f4       	brne	.+2      	; 0x15ba <vfprintf+0x382>
    15b8:	51 ce       	rjmp	.-862    	; 0x125c <vfprintf+0x24>
    15ba:	b7 01       	movw	r22, r14
    15bc:	80 e2       	ldi	r24, 0x20	; 32
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	0e 94 04 0b 	call	0x1608	; 0x1608 <fputc>
    15c4:	3a 94       	dec	r3
    15c6:	f6 cf       	rjmp	.-20     	; 0x15b4 <vfprintf+0x37c>
    15c8:	f7 01       	movw	r30, r14
    15ca:	86 81       	ldd	r24, Z+6	; 0x06
    15cc:	97 81       	ldd	r25, Z+7	; 0x07
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <vfprintf+0x39c>
    15d0:	8f ef       	ldi	r24, 0xFF	; 255
    15d2:	9f ef       	ldi	r25, 0xFF	; 255
    15d4:	2c 96       	adiw	r28, 0x0c	; 12
    15d6:	e2 e1       	ldi	r30, 0x12	; 18
    15d8:	0c 94 b0 0b 	jmp	0x1760	; 0x1760 <__epilogue_restores__>

000015dc <strnlen_P>:
    15dc:	fc 01       	movw	r30, r24
    15de:	05 90       	lpm	r0, Z+
    15e0:	61 50       	subi	r22, 0x01	; 1
    15e2:	70 40       	sbci	r23, 0x00	; 0
    15e4:	01 10       	cpse	r0, r1
    15e6:	d8 f7       	brcc	.-10     	; 0x15de <strnlen_P+0x2>
    15e8:	80 95       	com	r24
    15ea:	90 95       	com	r25
    15ec:	8e 0f       	add	r24, r30
    15ee:	9f 1f       	adc	r25, r31
    15f0:	08 95       	ret

000015f2 <strnlen>:
    15f2:	fc 01       	movw	r30, r24
    15f4:	61 50       	subi	r22, 0x01	; 1
    15f6:	70 40       	sbci	r23, 0x00	; 0
    15f8:	01 90       	ld	r0, Z+
    15fa:	01 10       	cpse	r0, r1
    15fc:	d8 f7       	brcc	.-10     	; 0x15f4 <strnlen+0x2>
    15fe:	80 95       	com	r24
    1600:	90 95       	com	r25
    1602:	8e 0f       	add	r24, r30
    1604:	9f 1f       	adc	r25, r31
    1606:	08 95       	ret

00001608 <fputc>:
    1608:	0f 93       	push	r16
    160a:	1f 93       	push	r17
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	18 2f       	mov	r17, r24
    1612:	09 2f       	mov	r16, r25
    1614:	eb 01       	movw	r28, r22
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	81 fd       	sbrc	r24, 1
    161a:	03 c0       	rjmp	.+6      	; 0x1622 <fputc+0x1a>
    161c:	8f ef       	ldi	r24, 0xFF	; 255
    161e:	9f ef       	ldi	r25, 0xFF	; 255
    1620:	20 c0       	rjmp	.+64     	; 0x1662 <fputc+0x5a>
    1622:	82 ff       	sbrs	r24, 2
    1624:	10 c0       	rjmp	.+32     	; 0x1646 <fputc+0x3e>
    1626:	4e 81       	ldd	r20, Y+6	; 0x06
    1628:	5f 81       	ldd	r21, Y+7	; 0x07
    162a:	2c 81       	ldd	r18, Y+4	; 0x04
    162c:	3d 81       	ldd	r19, Y+5	; 0x05
    162e:	42 17       	cp	r20, r18
    1630:	53 07       	cpc	r21, r19
    1632:	7c f4       	brge	.+30     	; 0x1652 <fputc+0x4a>
    1634:	e8 81       	ld	r30, Y
    1636:	f9 81       	ldd	r31, Y+1	; 0x01
    1638:	9f 01       	movw	r18, r30
    163a:	2f 5f       	subi	r18, 0xFF	; 255
    163c:	3f 4f       	sbci	r19, 0xFF	; 255
    163e:	39 83       	std	Y+1, r19	; 0x01
    1640:	28 83       	st	Y, r18
    1642:	10 83       	st	Z, r17
    1644:	06 c0       	rjmp	.+12     	; 0x1652 <fputc+0x4a>
    1646:	e8 85       	ldd	r30, Y+8	; 0x08
    1648:	f9 85       	ldd	r31, Y+9	; 0x09
    164a:	81 2f       	mov	r24, r17
    164c:	09 95       	icall
    164e:	89 2b       	or	r24, r25
    1650:	29 f7       	brne	.-54     	; 0x161c <fputc+0x14>
    1652:	2e 81       	ldd	r18, Y+6	; 0x06
    1654:	3f 81       	ldd	r19, Y+7	; 0x07
    1656:	2f 5f       	subi	r18, 0xFF	; 255
    1658:	3f 4f       	sbci	r19, 0xFF	; 255
    165a:	3f 83       	std	Y+7, r19	; 0x07
    165c:	2e 83       	std	Y+6, r18	; 0x06
    165e:	81 2f       	mov	r24, r17
    1660:	90 2f       	mov	r25, r16
    1662:	df 91       	pop	r29
    1664:	cf 91       	pop	r28
    1666:	1f 91       	pop	r17
    1668:	0f 91       	pop	r16
    166a:	08 95       	ret

0000166c <__ultoa_invert>:
    166c:	fa 01       	movw	r30, r20
    166e:	aa 27       	eor	r26, r26
    1670:	28 30       	cpi	r18, 0x08	; 8
    1672:	51 f1       	breq	.+84     	; 0x16c8 <__ultoa_invert+0x5c>
    1674:	20 31       	cpi	r18, 0x10	; 16
    1676:	81 f1       	breq	.+96     	; 0x16d8 <__ultoa_invert+0x6c>
    1678:	e8 94       	clt
    167a:	6f 93       	push	r22
    167c:	6e 7f       	andi	r22, 0xFE	; 254
    167e:	6e 5f       	subi	r22, 0xFE	; 254
    1680:	7f 4f       	sbci	r23, 0xFF	; 255
    1682:	8f 4f       	sbci	r24, 0xFF	; 255
    1684:	9f 4f       	sbci	r25, 0xFF	; 255
    1686:	af 4f       	sbci	r26, 0xFF	; 255
    1688:	b1 e0       	ldi	r27, 0x01	; 1
    168a:	3e d0       	rcall	.+124    	; 0x1708 <__ultoa_invert+0x9c>
    168c:	b4 e0       	ldi	r27, 0x04	; 4
    168e:	3c d0       	rcall	.+120    	; 0x1708 <__ultoa_invert+0x9c>
    1690:	67 0f       	add	r22, r23
    1692:	78 1f       	adc	r23, r24
    1694:	89 1f       	adc	r24, r25
    1696:	9a 1f       	adc	r25, r26
    1698:	a1 1d       	adc	r26, r1
    169a:	68 0f       	add	r22, r24
    169c:	79 1f       	adc	r23, r25
    169e:	8a 1f       	adc	r24, r26
    16a0:	91 1d       	adc	r25, r1
    16a2:	a1 1d       	adc	r26, r1
    16a4:	6a 0f       	add	r22, r26
    16a6:	71 1d       	adc	r23, r1
    16a8:	81 1d       	adc	r24, r1
    16aa:	91 1d       	adc	r25, r1
    16ac:	a1 1d       	adc	r26, r1
    16ae:	20 d0       	rcall	.+64     	; 0x16f0 <__ultoa_invert+0x84>
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <__ultoa_invert+0x48>
    16b2:	68 94       	set
    16b4:	3f 91       	pop	r19
    16b6:	2a e0       	ldi	r18, 0x0A	; 10
    16b8:	26 9f       	mul	r18, r22
    16ba:	11 24       	eor	r1, r1
    16bc:	30 19       	sub	r19, r0
    16be:	30 5d       	subi	r19, 0xD0	; 208
    16c0:	31 93       	st	Z+, r19
    16c2:	de f6       	brtc	.-74     	; 0x167a <__ultoa_invert+0xe>
    16c4:	cf 01       	movw	r24, r30
    16c6:	08 95       	ret
    16c8:	46 2f       	mov	r20, r22
    16ca:	47 70       	andi	r20, 0x07	; 7
    16cc:	40 5d       	subi	r20, 0xD0	; 208
    16ce:	41 93       	st	Z+, r20
    16d0:	b3 e0       	ldi	r27, 0x03	; 3
    16d2:	0f d0       	rcall	.+30     	; 0x16f2 <__ultoa_invert+0x86>
    16d4:	c9 f7       	brne	.-14     	; 0x16c8 <__ultoa_invert+0x5c>
    16d6:	f6 cf       	rjmp	.-20     	; 0x16c4 <__ultoa_invert+0x58>
    16d8:	46 2f       	mov	r20, r22
    16da:	4f 70       	andi	r20, 0x0F	; 15
    16dc:	40 5d       	subi	r20, 0xD0	; 208
    16de:	4a 33       	cpi	r20, 0x3A	; 58
    16e0:	18 f0       	brcs	.+6      	; 0x16e8 <__ultoa_invert+0x7c>
    16e2:	49 5d       	subi	r20, 0xD9	; 217
    16e4:	31 fd       	sbrc	r19, 1
    16e6:	40 52       	subi	r20, 0x20	; 32
    16e8:	41 93       	st	Z+, r20
    16ea:	02 d0       	rcall	.+4      	; 0x16f0 <__ultoa_invert+0x84>
    16ec:	a9 f7       	brne	.-22     	; 0x16d8 <__ultoa_invert+0x6c>
    16ee:	ea cf       	rjmp	.-44     	; 0x16c4 <__ultoa_invert+0x58>
    16f0:	b4 e0       	ldi	r27, 0x04	; 4
    16f2:	a6 95       	lsr	r26
    16f4:	97 95       	ror	r25
    16f6:	87 95       	ror	r24
    16f8:	77 95       	ror	r23
    16fa:	67 95       	ror	r22
    16fc:	ba 95       	dec	r27
    16fe:	c9 f7       	brne	.-14     	; 0x16f2 <__ultoa_invert+0x86>
    1700:	00 97       	sbiw	r24, 0x00	; 0
    1702:	61 05       	cpc	r22, r1
    1704:	71 05       	cpc	r23, r1
    1706:	08 95       	ret
    1708:	9b 01       	movw	r18, r22
    170a:	ac 01       	movw	r20, r24
    170c:	0a 2e       	mov	r0, r26
    170e:	06 94       	lsr	r0
    1710:	57 95       	ror	r21
    1712:	47 95       	ror	r20
    1714:	37 95       	ror	r19
    1716:	27 95       	ror	r18
    1718:	ba 95       	dec	r27
    171a:	c9 f7       	brne	.-14     	; 0x170e <__ultoa_invert+0xa2>
    171c:	62 0f       	add	r22, r18
    171e:	73 1f       	adc	r23, r19
    1720:	84 1f       	adc	r24, r20
    1722:	95 1f       	adc	r25, r21
    1724:	a0 1d       	adc	r26, r0
    1726:	08 95       	ret

00001728 <__prologue_saves__>:
    1728:	2f 92       	push	r2
    172a:	3f 92       	push	r3
    172c:	4f 92       	push	r4
    172e:	5f 92       	push	r5
    1730:	6f 92       	push	r6
    1732:	7f 92       	push	r7
    1734:	8f 92       	push	r8
    1736:	9f 92       	push	r9
    1738:	af 92       	push	r10
    173a:	bf 92       	push	r11
    173c:	cf 92       	push	r12
    173e:	df 92       	push	r13
    1740:	ef 92       	push	r14
    1742:	ff 92       	push	r15
    1744:	0f 93       	push	r16
    1746:	1f 93       	push	r17
    1748:	cf 93       	push	r28
    174a:	df 93       	push	r29
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	ca 1b       	sub	r28, r26
    1752:	db 0b       	sbc	r29, r27
    1754:	0f b6       	in	r0, 0x3f	; 63
    1756:	f8 94       	cli
    1758:	de bf       	out	0x3e, r29	; 62
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	cd bf       	out	0x3d, r28	; 61
    175e:	09 94       	ijmp

00001760 <__epilogue_restores__>:
    1760:	2a 88       	ldd	r2, Y+18	; 0x12
    1762:	39 88       	ldd	r3, Y+17	; 0x11
    1764:	48 88       	ldd	r4, Y+16	; 0x10
    1766:	5f 84       	ldd	r5, Y+15	; 0x0f
    1768:	6e 84       	ldd	r6, Y+14	; 0x0e
    176a:	7d 84       	ldd	r7, Y+13	; 0x0d
    176c:	8c 84       	ldd	r8, Y+12	; 0x0c
    176e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1770:	aa 84       	ldd	r10, Y+10	; 0x0a
    1772:	b9 84       	ldd	r11, Y+9	; 0x09
    1774:	c8 84       	ldd	r12, Y+8	; 0x08
    1776:	df 80       	ldd	r13, Y+7	; 0x07
    1778:	ee 80       	ldd	r14, Y+6	; 0x06
    177a:	fd 80       	ldd	r15, Y+5	; 0x05
    177c:	0c 81       	ldd	r16, Y+4	; 0x04
    177e:	1b 81       	ldd	r17, Y+3	; 0x03
    1780:	aa 81       	ldd	r26, Y+2	; 0x02
    1782:	b9 81       	ldd	r27, Y+1	; 0x01
    1784:	ce 0f       	add	r28, r30
    1786:	d1 1d       	adc	r29, r1
    1788:	0f b6       	in	r0, 0x3f	; 63
    178a:	f8 94       	cli
    178c:	de bf       	out	0x3e, r29	; 62
    178e:	0f be       	out	0x3f, r0	; 63
    1790:	cd bf       	out	0x3d, r28	; 61
    1792:	ed 01       	movw	r28, r26
    1794:	08 95       	ret

00001796 <_exit>:
    1796:	f8 94       	cli

00001798 <__stop_program>:
    1798:	ff cf       	rjmp	.-2      	; 0x1798 <__stop_program>
