
Automatic_Exfoliation.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ac  00800100  000016a4  00001738  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000016a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000434  008002ac  008002ac  000018e4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000018e4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00001940  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000824  00000000  00000000  000019d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002cb  00000000  00000000  000021fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000435  00000000  00000000  000024c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000434  00000000  00000000  000028fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000040f  00000000  00000000  00002d30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d5e  00000000  00000000  0000313f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00003e9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__vector_1>
       8:	0c 94 9f 01 	jmp	0x33e	; 0x33e <__vector_2>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 b9 07 	jmp	0xf72	; 0xf72 <__vector_7>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 88 00 	jmp	0x110	; 0x110 <__vector_16>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__vector_19>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_21>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 ea       	ldi	r30, 0xA4	; 164
      7c:	f6 e1       	ldi	r31, 0x16	; 22
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	ac 3a       	cpi	r26, 0xAC	; 172
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	26 e0       	ldi	r18, 0x06	; 6
      8c:	ac ea       	ldi	r26, 0xAC	; 172
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a0 3e       	cpi	r26, 0xE0	; 224
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 44 08 	call	0x1088	; 0x1088 <main>
      9e:	0c 94 50 0b 	jmp	0x16a0	; 0x16a0 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_write_serial>:
void limitTriggeredCallBack();

/*Functions for serial debug printing*/
void _write_serial(unsigned char *s){
	unsigned int count=0;
	for(;*s!='\0';s++,count++){
      a6:	fc 01       	movw	r30, r24
      a8:	40 81       	ld	r20, Z
      aa:	44 23       	and	r20, r20
      ac:	e1 f0       	breq	.+56     	; 0xe6 <_write_serial+0x40>
      ae:	31 96       	adiw	r30, 0x01	; 1
void buttonReleasedCallBack();
void limitTriggeredCallBack();

/*Functions for serial debug printing*/
void _write_serial(unsigned char *s){
	unsigned int count=0;
      b0:	20 e0       	ldi	r18, 0x00	; 0
      b2:	30 e0       	ldi	r19, 0x00	; 0
	for(;*s!='\0';s++,count++){
		buffer[buffer_tail] = *s;
      b4:	a0 91 bc 02 	lds	r26, 0x02BC
      b8:	b0 e0       	ldi	r27, 0x00	; 0
      ba:	ad 52       	subi	r26, 0x2D	; 45
      bc:	bb 4f       	sbci	r27, 0xFB	; 251
      be:	4c 93       	st	X, r20
		buffer_tail++;
      c0:	80 91 bc 02 	lds	r24, 0x02BC
      c4:	8f 5f       	subi	r24, 0xFF	; 255
      c6:	80 93 bc 02 	sts	0x02BC, r24
		if(buffer_tail == BUF_SIZE)
      ca:	80 91 bc 02 	lds	r24, 0x02BC
void limitTriggeredCallBack();

/*Functions for serial debug printing*/
void _write_serial(unsigned char *s){
	unsigned int count=0;
	for(;*s!='\0';s++,count++){
      ce:	2f 5f       	subi	r18, 0xFF	; 255
      d0:	3f 4f       	sbci	r19, 0xFF	; 255
      d2:	41 91       	ld	r20, Z+
      d4:	41 11       	cpse	r20, r1
      d6:	ee cf       	rjmp	.-36     	; 0xb4 <_write_serial+0xe>
		buffer[buffer_tail] = *s;
		buffer_tail++;
		if(buffer_tail == BUF_SIZE)
		buffer_tail = 0;
	}
	if(count==0)return;
      d8:	23 2b       	or	r18, r19
      da:	29 f0       	breq	.+10     	; 0xe6 <_write_serial+0x40>
	UCSR0B |= _BV(TXEN0) | _BV(UDRIE0);	// Start transmitting
      dc:	e1 ec       	ldi	r30, 0xC1	; 193
      de:	f0 e0       	ldi	r31, 0x00	; 0
      e0:	80 81       	ld	r24, Z
      e2:	88 62       	ori	r24, 0x28	; 40
      e4:	80 83       	st	Z, r24
      e6:	08 95       	ret

000000e8 <uprintf>:
}

/*Use as normal printf. Safe even within interrupt environment.*/
void uprintf(char *s, ...){
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
      ec:	cd b7       	in	r28, 0x3d	; 61
      ee:	de b7       	in	r29, 0x3e	; 62
      f0:	fe 01       	movw	r30, r28
      f2:	35 96       	adiw	r30, 0x05	; 5
      f4:	61 91       	ld	r22, Z+
      f6:	71 91       	ld	r23, Z+
	va_list args;
	va_start(args,s);
	vsprintf(buffer2,s,args);
      f8:	af 01       	movw	r20, r30
      fa:	8b ec       	ldi	r24, 0xCB	; 203
      fc:	92 e0       	ldi	r25, 0x02	; 2
      fe:	0e 94 85 08 	call	0x110a	; 0x110a <vsprintf>
	va_end(args);
	_write_serial(buffer2);
     102:	8b ec       	ldi	r24, 0xCB	; 203
     104:	92 e0       	ldi	r25, 0x02	; 2
     106:	0e 94 53 00 	call	0xa6	; 0xa6 <_write_serial>
}
     10a:	df 91       	pop	r29
     10c:	cf 91       	pop	r28
     10e:	08 95       	ret

00000110 <__vector_16>:
ISR(TIMER2_COMPA_vect, ISR_BLOCK){	// ISR for Timer 2 tick. Global 1ms timing
	milliseconds ++;
	timer2CallBack();
}

ISR(TIMER0_OVF_vect,ISR_BLOCK){ // ISR for Timer 0 overflow event.
     110:	1f 92       	push	r1
     112:	0f 92       	push	r0
     114:	0f b6       	in	r0, 0x3f	; 63
     116:	0f 92       	push	r0
     118:	11 24       	eor	r1, r1
     11a:	2f 93       	push	r18
     11c:	3f 93       	push	r19
     11e:	4f 93       	push	r20
     120:	5f 93       	push	r21
     122:	6f 93       	push	r22
     124:	7f 93       	push	r23
     126:	8f 93       	push	r24
     128:	9f 93       	push	r25
     12a:	af 93       	push	r26
     12c:	bf 93       	push	r27
     12e:	ef 93       	push	r30
     130:	ff 93       	push	r31
	/*Each overflow means 256 steps*/
	position += 256L * step;
     132:	80 91 d3 06 	lds	r24, 0x06D3
     136:	90 91 d4 06 	lds	r25, 0x06D4
     13a:	40 91 c6 02 	lds	r20, 0x02C6
     13e:	50 91 c7 02 	lds	r21, 0x02C7
     142:	60 91 c8 02 	lds	r22, 0x02C8
     146:	70 91 c9 02 	lds	r23, 0x02C9
     14a:	aa 27       	eor	r26, r26
     14c:	97 fd       	sbrc	r25, 7
     14e:	a0 95       	com	r26
     150:	ba 2f       	mov	r27, r26
     152:	ba 2f       	mov	r27, r26
     154:	a9 2f       	mov	r26, r25
     156:	98 2f       	mov	r25, r24
     158:	88 27       	eor	r24, r24
     15a:	84 0f       	add	r24, r20
     15c:	95 1f       	adc	r25, r21
     15e:	a6 1f       	adc	r26, r22
     160:	b7 1f       	adc	r27, r23
     162:	80 93 c6 02 	sts	0x02C6, r24
     166:	90 93 c7 02 	sts	0x02C7, r25
     16a:	a0 93 c8 02 	sts	0x02C8, r26
     16e:	b0 93 c9 02 	sts	0x02C9, r27
	if(position < 0 && system_state == AUTO_FORWARD || position > CRITICAL_POS && system_state == AUTO_BACKWARD){
     172:	80 91 c6 02 	lds	r24, 0x02C6
     176:	90 91 c7 02 	lds	r25, 0x02C7
     17a:	a0 91 c8 02 	lds	r26, 0x02C8
     17e:	b0 91 c9 02 	lds	r27, 0x02C9
     182:	bb 23       	and	r27, r27
     184:	24 f4       	brge	.+8      	; 0x18e <__vector_16+0x7e>
     186:	80 91 b7 02 	lds	r24, 0x02B7
     18a:	81 30       	cpi	r24, 0x01	; 1
     18c:	89 f0       	breq	.+34     	; 0x1b0 <__vector_16+0xa0>
     18e:	80 91 c6 02 	lds	r24, 0x02C6
     192:	90 91 c7 02 	lds	r25, 0x02C7
     196:	a0 91 c8 02 	lds	r26, 0x02C8
     19a:	b0 91 c9 02 	lds	r27, 0x02C9
     19e:	81 36       	cpi	r24, 0x61	; 97
     1a0:	91 42       	sbci	r25, 0x21	; 33
     1a2:	a0 46       	sbci	r26, 0x60	; 96
     1a4:	b1 05       	cpc	r27, r1
     1a6:	84 f0       	brlt	.+32     	; 0x1c8 <__vector_16+0xb8>
     1a8:	80 91 b7 02 	lds	r24, 0x02B7
     1ac:	82 30       	cpi	r24, 0x02	; 2
     1ae:	61 f4       	brne	.+24     	; 0x1c8 <__vector_16+0xb8>
		// For safety, exit AUTOMATIC modes immediately
		system_state = IDLE;
     1b0:	10 92 b7 02 	sts	0x02B7, r1
		if(ISDEBUG)
     1b4:	4f 99       	sbic	0x09, 7	; 9
     1b6:	08 c0       	rjmp	.+16     	; 0x1c8 <__vector_16+0xb8>
			uprintf("IDLE\r\n");
     1b8:	80 e0       	ldi	r24, 0x00	; 0
     1ba:	91 e0       	ldi	r25, 0x01	; 1
     1bc:	9f 93       	push	r25
     1be:	8f 93       	push	r24
     1c0:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     1c4:	0f 90       	pop	r0
     1c6:	0f 90       	pop	r0
	}
}
     1c8:	ff 91       	pop	r31
     1ca:	ef 91       	pop	r30
     1cc:	bf 91       	pop	r27
     1ce:	af 91       	pop	r26
     1d0:	9f 91       	pop	r25
     1d2:	8f 91       	pop	r24
     1d4:	7f 91       	pop	r23
     1d6:	6f 91       	pop	r22
     1d8:	5f 91       	pop	r21
     1da:	4f 91       	pop	r20
     1dc:	3f 91       	pop	r19
     1de:	2f 91       	pop	r18
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	0f 90       	pop	r0
     1e6:	1f 90       	pop	r1
     1e8:	18 95       	reti

000001ea <__vector_19>:

ISR(USART_UDRE_vect,ISR_BLOCK){ // ISR for USART, send next char
     1ea:	1f 92       	push	r1
     1ec:	0f 92       	push	r0
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	0f 92       	push	r0
     1f2:	11 24       	eor	r1, r1
     1f4:	8f 93       	push	r24
     1f6:	9f 93       	push	r25
     1f8:	ef 93       	push	r30
     1fa:	ff 93       	push	r31
	if(buffer_head != buffer_tail){
     1fc:	90 91 bd 02 	lds	r25, 0x02BD
     200:	80 91 bc 02 	lds	r24, 0x02BC
     204:	98 17       	cp	r25, r24
     206:	81 f0       	breq	.+32     	; 0x228 <__vector_19+0x3e>
		UDR0 = buffer[buffer_head];
     208:	e0 91 bd 02 	lds	r30, 0x02BD
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	ed 52       	subi	r30, 0x2D	; 45
     210:	fb 4f       	sbci	r31, 0xFB	; 251
     212:	80 81       	ld	r24, Z
     214:	80 93 c6 00 	sts	0x00C6, r24
		buffer_head++;
     218:	80 91 bd 02 	lds	r24, 0x02BD
     21c:	8f 5f       	subi	r24, 0xFF	; 255
     21e:	80 93 bd 02 	sts	0x02BD, r24
		if(buffer_head == BUF_SIZE)
     222:	80 91 bd 02 	lds	r24, 0x02BD
     226:	05 c0       	rjmp	.+10     	; 0x232 <__vector_19+0x48>
		buffer_head = 0;
	}
	else{
		UCSR0B &= ~(_BV(TXEN0) | _BV(UDRIE0)) ;	// Transmit finished. Stop it
     228:	e1 ec       	ldi	r30, 0xC1	; 193
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	80 81       	ld	r24, Z
     22e:	87 7d       	andi	r24, 0xD7	; 215
     230:	80 83       	st	Z, r24
	}
}
     232:	ff 91       	pop	r31
     234:	ef 91       	pop	r30
     236:	9f 91       	pop	r25
     238:	8f 91       	pop	r24
     23a:	0f 90       	pop	r0
     23c:	0f be       	out	0x3f, r0	; 63
     23e:	0f 90       	pop	r0
     240:	1f 90       	pop	r1
     242:	18 95       	reti

00000244 <__vector_21>:

ISR(ADC_vect,ISR_BLOCK){// ISR for ADC event
     244:	1f 92       	push	r1
     246:	0f 92       	push	r0
     248:	0f b6       	in	r0, 0x3f	; 63
     24a:	0f 92       	push	r0
     24c:	11 24       	eor	r1, r1
     24e:	af 92       	push	r10
     250:	bf 92       	push	r11
     252:	cf 92       	push	r12
     254:	df 92       	push	r13
     256:	ef 92       	push	r14
     258:	ff 92       	push	r15
     25a:	0f 93       	push	r16
     25c:	1f 93       	push	r17
     25e:	2f 93       	push	r18
     260:	3f 93       	push	r19
     262:	4f 93       	push	r20
     264:	5f 93       	push	r21
     266:	6f 93       	push	r22
     268:	7f 93       	push	r23
     26a:	8f 93       	push	r24
     26c:	9f 93       	push	r25
     26e:	af 93       	push	r26
	if(milliseconds - speed_update_timer > SPEED_UPDATE_INTERVAL){
     270:	20 91 be 02 	lds	r18, 0x02BE
     274:	30 91 bf 02 	lds	r19, 0x02BF
     278:	40 91 c0 02 	lds	r20, 0x02C0
     27c:	50 91 c1 02 	lds	r21, 0x02C1
     280:	60 91 c2 02 	lds	r22, 0x02C2
     284:	70 91 c3 02 	lds	r23, 0x02C3
     288:	80 91 c4 02 	lds	r24, 0x02C4
     28c:	90 91 c5 02 	lds	r25, 0x02C5
     290:	a0 90 ae 02 	lds	r10, 0x02AE
     294:	b0 90 af 02 	lds	r11, 0x02AF
     298:	c0 90 b0 02 	lds	r12, 0x02B0
     29c:	d0 90 b1 02 	lds	r13, 0x02B1
     2a0:	e0 90 b2 02 	lds	r14, 0x02B2
     2a4:	f0 90 b3 02 	lds	r15, 0x02B3
     2a8:	00 91 b4 02 	lds	r16, 0x02B4
     2ac:	10 91 b5 02 	lds	r17, 0x02B5
     2b0:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subdi3>
     2b4:	a2 e3       	ldi	r26, 0x32	; 50
     2b6:	0e 94 79 08 	call	0x10f2	; 0x10f2 <__cmpdi2_s8>
     2ba:	59 f1       	breq	.+86     	; 0x312 <__vector_21+0xce>
     2bc:	50 f1       	brcs	.+84     	; 0x312 <__vector_21+0xce>
		speed = ADCL | ((unsigned int)ADCH << 8);
     2be:	80 91 78 00 	lds	r24, 0x0078
     2c2:	20 91 79 00 	lds	r18, 0x0079
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	92 2b       	or	r25, r18
     2ca:	90 93 bb 02 	sts	0x02BB, r25
     2ce:	80 93 ba 02 	sts	0x02BA, r24
		speed_update_timer = milliseconds;
     2d2:	70 91 be 02 	lds	r23, 0x02BE
     2d6:	60 91 bf 02 	lds	r22, 0x02BF
     2da:	50 91 c0 02 	lds	r21, 0x02C0
     2de:	40 91 c1 02 	lds	r20, 0x02C1
     2e2:	30 91 c2 02 	lds	r19, 0x02C2
     2e6:	20 91 c3 02 	lds	r18, 0x02C3
     2ea:	90 91 c4 02 	lds	r25, 0x02C4
     2ee:	80 91 c5 02 	lds	r24, 0x02C5
     2f2:	70 93 ae 02 	sts	0x02AE, r23
     2f6:	60 93 af 02 	sts	0x02AF, r22
     2fa:	50 93 b0 02 	sts	0x02B0, r21
     2fe:	40 93 b1 02 	sts	0x02B1, r20
     302:	30 93 b2 02 	sts	0x02B2, r19
     306:	20 93 b3 02 	sts	0x02B3, r18
     30a:	90 93 b4 02 	sts	0x02B4, r25
     30e:	80 93 b5 02 	sts	0x02B5, r24
	}
}
     312:	af 91       	pop	r26
     314:	9f 91       	pop	r25
     316:	8f 91       	pop	r24
     318:	7f 91       	pop	r23
     31a:	6f 91       	pop	r22
     31c:	5f 91       	pop	r21
     31e:	4f 91       	pop	r20
     320:	3f 91       	pop	r19
     322:	2f 91       	pop	r18
     324:	1f 91       	pop	r17
     326:	0f 91       	pop	r16
     328:	ff 90       	pop	r15
     32a:	ef 90       	pop	r14
     32c:	df 90       	pop	r13
     32e:	cf 90       	pop	r12
     330:	bf 90       	pop	r11
     332:	af 90       	pop	r10
     334:	0f 90       	pop	r0
     336:	0f be       	out	0x3f, r0	; 63
     338:	0f 90       	pop	r0
     33a:	1f 90       	pop	r1
     33c:	18 95       	reti

0000033e <__vector_2>:

ISR(INT0_vect,ISR_BLOCK){// ISR for LIMIT switch
	limitTriggeredCallBack();
}

ISR(INT1_vect,ISR_BLOCK){// ISR for BUTTON event
     33e:	1f 92       	push	r1
     340:	0f 92       	push	r0
     342:	0f b6       	in	r0, 0x3f	; 63
     344:	0f 92       	push	r0
     346:	11 24       	eor	r1, r1
     348:	2f 93       	push	r18
     34a:	3f 93       	push	r19
     34c:	4f 93       	push	r20
     34e:	5f 93       	push	r21
     350:	6f 93       	push	r22
     352:	7f 93       	push	r23
     354:	8f 93       	push	r24
     356:	9f 93       	push	r25
     358:	af 93       	push	r26
     35a:	bf 93       	push	r27
     35c:	ef 93       	push	r30
     35e:	ff 93       	push	r31
	if(ISDEBUG)
     360:	4f 99       	sbic	0x09, 7	; 9
     362:	26 c0       	rjmp	.+76     	; 0x3b0 <__vector_2+0x72>
		uprintf("BUTTON event at %ld\r\n",milliseconds);
     364:	80 91 be 02 	lds	r24, 0x02BE
     368:	90 91 bf 02 	lds	r25, 0x02BF
     36c:	20 91 c0 02 	lds	r18, 0x02C0
     370:	30 91 c1 02 	lds	r19, 0x02C1
     374:	40 91 c2 02 	lds	r20, 0x02C2
     378:	50 91 c3 02 	lds	r21, 0x02C3
     37c:	60 91 c4 02 	lds	r22, 0x02C4
     380:	70 91 c5 02 	lds	r23, 0x02C5
     384:	7f 93       	push	r23
     386:	6f 93       	push	r22
     388:	5f 93       	push	r21
     38a:	4f 93       	push	r20
     38c:	3f 93       	push	r19
     38e:	2f 93       	push	r18
     390:	9f 93       	push	r25
     392:	8f 93       	push	r24
     394:	87 e0       	ldi	r24, 0x07	; 7
     396:	91 e0       	ldi	r25, 0x01	; 1
     398:	9f 93       	push	r25
     39a:	8f 93       	push	r24
     39c:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     3a0:	8d b7       	in	r24, 0x3d	; 61
     3a2:	9e b7       	in	r25, 0x3e	; 62
     3a4:	0a 96       	adiw	r24, 0x0a	; 10
     3a6:	0f b6       	in	r0, 0x3f	; 63
     3a8:	f8 94       	cli
     3aa:	9e bf       	out	0x3e, r25	; 62
     3ac:	0f be       	out	0x3f, r0	; 63
     3ae:	8d bf       	out	0x3d, r24	; 61
	switch(button_state){
     3b0:	80 91 b9 02 	lds	r24, 0x02B9
     3b4:	88 23       	and	r24, r24
     3b6:	19 f0       	breq	.+6      	; 0x3be <__vector_2+0x80>
     3b8:	83 30       	cpi	r24, 0x03	; 3
     3ba:	39 f1       	breq	.+78     	; 0x40a <__vector_2+0xcc>
     3bc:	4b c0       	rjmp	.+150    	; 0x454 <__vector_2+0x116>
		case RELEASED:
			if(READ(BUTTON) == 0){
     3be:	4b 99       	sbic	0x09, 3	; 9
     3c0:	49 c0       	rjmp	.+146    	; 0x454 <__vector_2+0x116>
				button_timer = milliseconds;				// start timer
     3c2:	70 91 be 02 	lds	r23, 0x02BE
     3c6:	60 91 bf 02 	lds	r22, 0x02BF
     3ca:	50 91 c0 02 	lds	r21, 0x02C0
     3ce:	40 91 c1 02 	lds	r20, 0x02C1
     3d2:	30 91 c2 02 	lds	r19, 0x02C2
     3d6:	20 91 c3 02 	lds	r18, 0x02C3
     3da:	90 91 c4 02 	lds	r25, 0x02C4
     3de:	80 91 c5 02 	lds	r24, 0x02C5
     3e2:	70 93 d7 06 	sts	0x06D7, r23
     3e6:	60 93 d8 06 	sts	0x06D8, r22
     3ea:	50 93 d9 06 	sts	0x06D9, r21
     3ee:	40 93 da 06 	sts	0x06DA, r20
     3f2:	30 93 db 06 	sts	0x06DB, r19
     3f6:	20 93 dc 06 	sts	0x06DC, r18
     3fa:	90 93 dd 06 	sts	0x06DD, r25
     3fe:	80 93 de 06 	sts	0x06DE, r24
				button_state = FALL_DETECTED;
     402:	81 e0       	ldi	r24, 0x01	; 1
     404:	80 93 b9 02 	sts	0x02B9, r24
     408:	25 c0       	rjmp	.+74     	; 0x454 <__vector_2+0x116>
			}
			break;
		case PRESSED:
			if(READ(BUTTON) == 1){
     40a:	4b 9b       	sbis	0x09, 3	; 9
     40c:	23 c0       	rjmp	.+70     	; 0x454 <__vector_2+0x116>
				button_timer = milliseconds;
     40e:	70 91 be 02 	lds	r23, 0x02BE
     412:	60 91 bf 02 	lds	r22, 0x02BF
     416:	50 91 c0 02 	lds	r21, 0x02C0
     41a:	40 91 c1 02 	lds	r20, 0x02C1
     41e:	30 91 c2 02 	lds	r19, 0x02C2
     422:	20 91 c3 02 	lds	r18, 0x02C3
     426:	90 91 c4 02 	lds	r25, 0x02C4
     42a:	80 91 c5 02 	lds	r24, 0x02C5
     42e:	70 93 d7 06 	sts	0x06D7, r23
     432:	60 93 d8 06 	sts	0x06D8, r22
     436:	50 93 d9 06 	sts	0x06D9, r21
     43a:	40 93 da 06 	sts	0x06DA, r20
     43e:	30 93 db 06 	sts	0x06DB, r19
     442:	20 93 dc 06 	sts	0x06DC, r18
     446:	90 93 dd 06 	sts	0x06DD, r25
     44a:	80 93 de 06 	sts	0x06DE, r24
				button_state = RISE_DETECTED;
     44e:	82 e0       	ldi	r24, 0x02	; 2
     450:	80 93 b9 02 	sts	0x02B9, r24
			}
			break;
		default:
			break;
	}
}
     454:	ff 91       	pop	r31
     456:	ef 91       	pop	r30
     458:	bf 91       	pop	r27
     45a:	af 91       	pop	r26
     45c:	9f 91       	pop	r25
     45e:	8f 91       	pop	r24
     460:	7f 91       	pop	r23
     462:	6f 91       	pop	r22
     464:	5f 91       	pop	r21
     466:	4f 91       	pop	r20
     468:	3f 91       	pop	r19
     46a:	2f 91       	pop	r18
     46c:	0f 90       	pop	r0
     46e:	0f be       	out	0x3f, r0	; 63
     470:	0f 90       	pop	r0
     472:	1f 90       	pop	r1
     474:	18 95       	reti

00000476 <init>:
/* System initialization*/
void init(){
	long div;
	
	// Pin mode init
	MODE_OUT(PULSE);
     476:	21 9a       	sbi	0x04, 1	; 4
	MODE_OUT(DIROUT);
     478:	20 9a       	sbi	0x04, 0	; 4
	MODE_OUT(LEDP);
     47a:	39 9a       	sbi	0x07, 1	; 7
	MODE_OUT(LEDN);
     47c:	3a 9a       	sbi	0x07, 2	; 7
	MODE_IN(LIMIT);
     47e:	52 98       	cbi	0x0a, 2	; 10
	MODE_IN(BUTTON);
     480:	53 98       	cbi	0x0a, 3	; 10
	MODE_IN(AUTO);
     482:	3b 98       	cbi	0x07, 3	; 7
	MODE_IN(SPEED);
     484:	38 98       	cbi	0x07, 0	; 7
	MODE_IN(MICROSTEP);
     486:	55 98       	cbi	0x0a, 5	; 10
	MODE_IN(DEBUG);
     488:	57 98       	cbi	0x0a, 7	; 10
	
	// Pin state init
	SET(PULSE);
     48a:	29 9a       	sbi	0x05, 1	; 5
	SET(DIROUT);
     48c:	28 9a       	sbi	0x05, 0	; 5
	SET(DEBUG);
     48e:	5f 9a       	sbi	0x0b, 7	; 11
	LED_OFF;
     490:	41 98       	cbi	0x08, 1	; 8
     492:	42 98       	cbi	0x08, 2	; 8
	// Timer 0 init
	TCCR0A |= 0;			// Mode: Normal
     494:	84 b5       	in	r24, 0x24	; 36
     496:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= _BV(CS02) | _BV(CS01);	// Clock source: External T0 pin (hard wired to output of T1 (PULSE), so this timer is synchronized with PULSE output).
     498:	85 b5       	in	r24, 0x25	; 37
     49a:	86 60       	ori	r24, 0x06	; 6
     49c:	85 bd       	out	0x25, r24	; 37
	TIMSK0 |= _BV(TOIE0);	// Generate interrupt when full
     49e:	ee e6       	ldi	r30, 0x6E	; 110
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	80 81       	ld	r24, Z
     4a4:	81 60       	ori	r24, 0x01	; 1
     4a6:	80 83       	st	Z, r24
	TCNT0 = 0;
     4a8:	16 bc       	out	0x26, r1	; 38
	
	// Timer 1 init
	// This timer is used for generating PWM signal for driving stepper motor driver, ST-M5045
	TCCR1A |= _BV(COM1A0);	// Mode: CTC.  TOP: OCR1A. Toggle when match.
     4aa:	e0 e8       	ldi	r30, 0x80	; 128
     4ac:	f0 e0       	ldi	r31, 0x00	; 0
     4ae:	80 81       	ld	r24, Z
     4b0:	80 64       	ori	r24, 0x40	; 64
     4b2:	80 83       	st	Z, r24
	TCCR1B |= _BV(WGM12); 	// Prescaler: by 8, that is 0.5us per count (will start later)
     4b4:	e1 e8       	ldi	r30, 0x81	; 129
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	80 81       	ld	r24, Z
     4ba:	88 60       	ori	r24, 0x08	; 8
     4bc:	80 83       	st	Z, r24
	TCNT1 = 0;								// Reset timer counter
     4be:	10 92 85 00 	sts	0x0085, r1
     4c2:	10 92 84 00 	sts	0x0084, r1
	
	// Timer 2 init
	// This timer is used for global timing (1ms resolution), also drives the main loop
	TCCR2A |= _BV(WGM21);					// Mode: CTC
     4c6:	e0 eb       	ldi	r30, 0xB0	; 176
     4c8:	f0 e0       	ldi	r31, 0x00	; 0
     4ca:	80 81       	ld	r24, Z
     4cc:	82 60       	ori	r24, 0x02	; 2
     4ce:	80 83       	st	Z, r24
	TCCR2B |= _BV(CS22);		// Prescaler: by 64
     4d0:	e1 eb       	ldi	r30, 0xB1	; 177
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	80 81       	ld	r24, Z
     4d6:	84 60       	ori	r24, 0x04	; 4
     4d8:	80 83       	st	Z, r24
	TIMSK2 |= _BV(OCIE2A);
     4da:	e0 e7       	ldi	r30, 0x70	; 112
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	80 81       	ld	r24, Z
     4e0:	82 60       	ori	r24, 0x02	; 2
     4e2:	80 83       	st	Z, r24
	OCR2A = 249;							// Frequency = F_CPU / Prescale / (OCR2A + 1) = 1kHz, start now
     4e4:	89 ef       	ldi	r24, 0xF9	; 249
     4e6:	80 93 b3 00 	sts	0x00B3, r24
	TCNT2 = 0;								// Reset timer counter
     4ea:	10 92 b2 00 	sts	0x00B2, r1
	
	// External Interrupt (LIMIT and BUTTON) setup
	EICRA |= _BV(ISC10) | _BV(ISC01);	// LIMIT only interrupt on FALLING edge, BUTTON triggers on BOTH edges
     4ee:	e9 e6       	ldi	r30, 0x69	; 105
     4f0:	f0 e0       	ldi	r31, 0x00	; 0
     4f2:	80 81       	ld	r24, Z
     4f4:	86 60       	ori	r24, 0x06	; 6
     4f6:	80 83       	st	Z, r24
	EIMSK |= _BV(INT1) | _BV(INT0);		// Enable INT1 and INT0
     4f8:	8d b3       	in	r24, 0x1d	; 29
     4fa:	83 60       	ori	r24, 0x03	; 3
     4fc:	8d bb       	out	0x1d, r24	; 29
	
	// Setup a Serial for debugging
	div = (((long)F_CPU) >> 4 ) / BAUD_RATE - 1;
	UBRR0L = div & 0xFF;
     4fe:	87 e6       	ldi	r24, 0x67	; 103
     500:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = div >> 8;
     504:	10 92 c5 00 	sts	0x00C5, r1
	
	// Setup the Analog-Digital Conversion unit
	ADMUX |= _BV(REFS0);	// AVCC as reference
     508:	ec e7       	ldi	r30, 0x7C	; 124
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	80 81       	ld	r24, Z
     50e:	80 64       	ori	r24, 0x40	; 64
     510:	80 83       	st	Z, r24
	ADCSRA |= _BV(ADEN) | _BV(ADATE) | _BV(ADIE) | _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0);	// Enable ADC, Enable Interrupt and autotrigger. Clock divided by 128 = 125kHz
     512:	ea e7       	ldi	r30, 0x7A	; 122
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	80 81       	ld	r24, Z
     518:	8f 6a       	ori	r24, 0xAF	; 175
     51a:	80 83       	st	Z, r24
	ADCSRB |= 0; // Free running ADC
     51c:	eb e7       	ldi	r30, 0x7B	; 123
     51e:	f0 e0       	ldi	r31, 0x00	; 0
     520:	80 81       	ld	r24, Z
     522:	80 83       	st	Z, r24
	
	position = 0;
     524:	10 92 c6 02 	sts	0x02C6, r1
     528:	10 92 c7 02 	sts	0x02C7, r1
     52c:	10 92 c8 02 	sts	0x02C8, r1
     530:	10 92 c9 02 	sts	0x02C9, r1
	system_state = IDLE;
     534:	10 92 b7 02 	sts	0x02B7, r1
	
	self_check = 1;	// ensure that button is not reactive when self-checking
     538:	81 e0       	ldi	r24, 0x01	; 1
     53a:	80 93 ac 02 	sts	0x02AC, r24
	sei();
     53e:	78 94       	sei
     540:	08 95       	ret

00000542 <panic>:
}

void panic(){
	cli();
     542:	f8 94       	cli
	while(1){
		LED_ON(RED);
     544:	41 98       	cbi	0x08, 1	; 8
     546:	42 9a       	sbi	0x08, 2	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     548:	2f ef       	ldi	r18, 0xFF	; 255
     54a:	81 ee       	ldi	r24, 0xE1	; 225
     54c:	94 e0       	ldi	r25, 0x04	; 4
     54e:	21 50       	subi	r18, 0x01	; 1
     550:	80 40       	sbci	r24, 0x00	; 0
     552:	90 40       	sbci	r25, 0x00	; 0
     554:	e1 f7       	brne	.-8      	; 0x54e <panic+0xc>
     556:	00 c0       	rjmp	.+0      	; 0x558 <panic+0x16>
     558:	00 00       	nop
		_delay_ms(100);
		LED_OFF;
     55a:	41 98       	cbi	0x08, 1	; 8
     55c:	42 98       	cbi	0x08, 2	; 8
     55e:	2f ef       	ldi	r18, 0xFF	; 255
     560:	81 ee       	ldi	r24, 0xE1	; 225
     562:	94 e0       	ldi	r25, 0x04	; 4
     564:	21 50       	subi	r18, 0x01	; 1
     566:	80 40       	sbci	r24, 0x00	; 0
     568:	90 40       	sbci	r25, 0x00	; 0
     56a:	e1 f7       	brne	.-8      	; 0x564 <panic+0x22>
     56c:	00 c0       	rjmp	.+0      	; 0x56e <panic+0x2c>
     56e:	00 00       	nop
     570:	e9 cf       	rjmp	.-46     	; 0x544 <panic+0x2>

00000572 <calibrate>:
		_delay_ms(100);
	}
}

void calibrate(){
     572:	8f 92       	push	r8
     574:	9f 92       	push	r9
     576:	af 92       	push	r10
     578:	bf 92       	push	r11
     57a:	cf 92       	push	r12
     57c:	df 92       	push	r13
     57e:	ef 92       	push	r14
     580:	ff 92       	push	r15
     582:	0f 93       	push	r16
     584:	1f 93       	push	r17
     586:	cf 93       	push	r28
     588:	df 93       	push	r29
	uprintf("Entering self-calibration process.\r\n");
     58a:	8d e1       	ldi	r24, 0x1D	; 29
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	9f 93       	push	r25
     590:	8f 93       	push	r24
     592:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
	if(READ(LIMIT) == 0){// already at limit at startup
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	4a 99       	sbic	0x09, 2	; 9
     59c:	33 c0       	rjmp	.+102    	; 0x604 <calibrate+0x92>
		uprintf("LIMIT triggered at start up.\r\n");
     59e:	82 e4       	ldi	r24, 0x42	; 66
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	9f 93       	push	r25
     5a4:	8f 93       	push	r24
     5a6:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
		system_state = MANUAL_BACKWARD;
     5aa:	84 e0       	ldi	r24, 0x04	; 4
     5ac:	80 93 b7 02 	sts	0x02B7, r24
		uprintf("Going back...");
     5b0:	81 e6       	ldi	r24, 0x61	; 97
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	9f 93       	push	r25
     5b6:	8f 93       	push	r24
     5b8:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
		while(READ(LIMIT)==0){
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	4a 99       	sbic	0x09, 2	; 9
     5c6:	0b c0       	rjmp	.+22     	; 0x5de <calibrate+0x6c>
     5c8:	1f ef       	ldi	r17, 0xFF	; 255
     5ca:	21 ee       	ldi	r18, 0xE1	; 225
     5cc:	84 e0       	ldi	r24, 0x04	; 4
     5ce:	11 50       	subi	r17, 0x01	; 1
     5d0:	20 40       	sbci	r18, 0x00	; 0
     5d2:	80 40       	sbci	r24, 0x00	; 0
     5d4:	e1 f7       	brne	.-8      	; 0x5ce <calibrate+0x5c>
     5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <calibrate+0x66>
     5d8:	00 00       	nop
     5da:	4a 9b       	sbis	0x09, 2	; 9
     5dc:	f5 cf       	rjmp	.-22     	; 0x5c8 <calibrate+0x56>
     5de:	9f ef       	ldi	r25, 0xFF	; 255
     5e0:	e1 ee       	ldi	r30, 0xE1	; 225
     5e2:	14 e0       	ldi	r17, 0x04	; 4
     5e4:	91 50       	subi	r25, 0x01	; 1
     5e6:	e0 40       	sbci	r30, 0x00	; 0
     5e8:	10 40       	sbci	r17, 0x00	; 0
     5ea:	e1 f7       	brne	.-8      	; 0x5e4 <calibrate+0x72>
     5ec:	00 c0       	rjmp	.+0      	; 0x5ee <calibrate+0x7c>
     5ee:	00 00       	nop
			_delay_ms(100);
		}
		_delay_ms(100);
		uprintf("Done.\r\n");
     5f0:	8f e6       	ldi	r24, 0x6F	; 111
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	9f 93       	push	r25
     5f6:	8f 93       	push	r24
     5f8:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
		system_state = IDLE;
     5fc:	10 92 b7 02 	sts	0x02B7, r1
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
     604:	2f ef       	ldi	r18, 0xFF	; 255
     606:	81 ee       	ldi	r24, 0xE1	; 225
     608:	94 e0       	ldi	r25, 0x04	; 4
     60a:	21 50       	subi	r18, 0x01	; 1
     60c:	80 40       	sbci	r24, 0x00	; 0
     60e:	90 40       	sbci	r25, 0x00	; 0
     610:	e1 f7       	brne	.-8      	; 0x60a <calibrate+0x98>
     612:	00 c0       	rjmp	.+0      	; 0x614 <calibrate+0xa2>
     614:	00 00       	nop
	}
	_delay_ms(100);
	uprintf("Moving forward to calibrate...\r\n");
     616:	87 e7       	ldi	r24, 0x77	; 119
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	9f 93       	push	r25
     61c:	8f 93       	push	r24
     61e:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
	unsigned long long timestarted = milliseconds;
     622:	80 90 be 02 	lds	r8, 0x02BE
     626:	90 90 bf 02 	lds	r9, 0x02BF
     62a:	d0 91 c0 02 	lds	r29, 0x02C0
     62e:	c0 91 c1 02 	lds	r28, 0x02C1
     632:	b0 91 c2 02 	lds	r27, 0x02C2
     636:	a0 91 c3 02 	lds	r26, 0x02C3
     63a:	f0 91 c4 02 	lds	r31, 0x02C4
     63e:	e0 91 c5 02 	lds	r30, 0x02C5
	system_state = MANUAL_FORWARD;
     642:	83 e0       	ldi	r24, 0x03	; 3
     644:	80 93 b7 02 	sts	0x02B7, r24
	while((milliseconds - timestarted < 60000L) && READ(LIMIT) == 1);	// wait until LIMIT is triggered
     648:	0f 90       	pop	r0
     64a:	0f 90       	pop	r0
     64c:	20 91 be 02 	lds	r18, 0x02BE
     650:	30 91 bf 02 	lds	r19, 0x02BF
     654:	40 91 c0 02 	lds	r20, 0x02C0
     658:	50 91 c1 02 	lds	r21, 0x02C1
     65c:	60 91 c2 02 	lds	r22, 0x02C2
     660:	70 91 c3 02 	lds	r23, 0x02C3
     664:	80 91 c4 02 	lds	r24, 0x02C4
     668:	90 91 c5 02 	lds	r25, 0x02C5
     66c:	a8 2c       	mov	r10, r8
     66e:	b9 2c       	mov	r11, r9
     670:	cd 2e       	mov	r12, r29
     672:	dc 2e       	mov	r13, r28
     674:	eb 2e       	mov	r14, r27
     676:	fa 2e       	mov	r15, r26
     678:	0f 2f       	mov	r16, r31
     67a:	1e 2f       	mov	r17, r30
     67c:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subdi3>
     680:	2f 35       	cpi	r18, 0x5F	; 95
     682:	3a 4e       	sbci	r19, 0xEA	; 234
     684:	41 05       	cpc	r20, r1
     686:	51 05       	cpc	r21, r1
     688:	61 05       	cpc	r22, r1
     68a:	71 05       	cpc	r23, r1
     68c:	81 05       	cpc	r24, r1
     68e:	91 05       	cpc	r25, r1
     690:	09 f0       	breq	.+2      	; 0x694 <calibrate+0x122>
     692:	10 f4       	brcc	.+4      	; 0x698 <calibrate+0x126>
     694:	4a 99       	sbic	0x09, 2	; 9
     696:	da cf       	rjmp	.-76     	; 0x64c <calibrate+0xda>
	if(milliseconds - timestarted >= 60000L){			// something goes wrong
     698:	20 91 be 02 	lds	r18, 0x02BE
     69c:	30 91 bf 02 	lds	r19, 0x02BF
     6a0:	40 91 c0 02 	lds	r20, 0x02C0
     6a4:	50 91 c1 02 	lds	r21, 0x02C1
     6a8:	60 91 c2 02 	lds	r22, 0x02C2
     6ac:	70 91 c3 02 	lds	r23, 0x02C3
     6b0:	80 91 c4 02 	lds	r24, 0x02C4
     6b4:	90 91 c5 02 	lds	r25, 0x02C5
     6b8:	a8 2c       	mov	r10, r8
     6ba:	b9 2c       	mov	r11, r9
     6bc:	cd 2e       	mov	r12, r29
     6be:	dc 2e       	mov	r13, r28
     6c0:	eb 2e       	mov	r14, r27
     6c2:	fa 2e       	mov	r15, r26
     6c4:	0f 2f       	mov	r16, r31
     6c6:	1e 2f       	mov	r17, r30
     6c8:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subdi3>
     6cc:	2f 35       	cpi	r18, 0x5F	; 95
     6ce:	3a 4e       	sbci	r19, 0xEA	; 234
     6d0:	41 05       	cpc	r20, r1
     6d2:	51 05       	cpc	r21, r1
     6d4:	61 05       	cpc	r22, r1
     6d6:	71 05       	cpc	r23, r1
     6d8:	81 05       	cpc	r24, r1
     6da:	91 05       	cpc	r25, r1
     6dc:	b9 f0       	breq	.+46     	; 0x70c <calibrate+0x19a>
     6de:	b0 f0       	brcs	.+44     	; 0x70c <calibrate+0x19a>
		TCCR1B &= 0xF8;				// Force stop output
     6e0:	e1 e8       	ldi	r30, 0x81	; 129
     6e2:	f0 e0       	ldi	r31, 0x00	; 0
     6e4:	80 81       	ld	r24, Z
     6e6:	88 7f       	andi	r24, 0xF8	; 248
     6e8:	80 83       	st	Z, r24
		uprintf("Error when calibrating.\r\nPlease restart system.\r\n");
     6ea:	88 e9       	ldi	r24, 0x98	; 152
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	9f 93       	push	r25
     6f0:	8f 93       	push	r24
     6f2:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     6f6:	1f ef       	ldi	r17, 0xFF	; 255
     6f8:	21 ee       	ldi	r18, 0xE1	; 225
     6fa:	84 e0       	ldi	r24, 0x04	; 4
     6fc:	11 50       	subi	r17, 0x01	; 1
     6fe:	20 40       	sbci	r18, 0x00	; 0
     700:	80 40       	sbci	r24, 0x00	; 0
     702:	e1 f7       	brne	.-8      	; 0x6fc <calibrate+0x18a>
     704:	00 c0       	rjmp	.+0      	; 0x706 <calibrate+0x194>
     706:	00 00       	nop
		_delay_ms(100);
		panic();
     708:	0e 94 a1 02 	call	0x542	; 0x542 <panic>
	}
	clear_position = 1;
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	80 93 ad 02 	sts	0x02AD, r24
	system_state = IDLE;
     712:	10 92 b7 02 	sts	0x02B7, r1
	TCNT0 = 0;		// clear timer counter for steps
     716:	16 bc       	out	0x26, r1	; 38
	uprintf("Calibration finished. Position = %ld\r\n",position);
     718:	80 91 c6 02 	lds	r24, 0x02C6
     71c:	90 91 c7 02 	lds	r25, 0x02C7
     720:	a0 91 c8 02 	lds	r26, 0x02C8
     724:	b0 91 c9 02 	lds	r27, 0x02C9
     728:	bf 93       	push	r27
     72a:	af 93       	push	r26
     72c:	9f 93       	push	r25
     72e:	8f 93       	push	r24
     730:	8a ec       	ldi	r24, 0xCA	; 202
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	9f 93       	push	r25
     736:	8f 93       	push	r24
     738:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
	self_check = 0;
     73c:	10 92 ac 02 	sts	0x02AC, r1
     740:	0f 90       	pop	r0
     742:	0f 90       	pop	r0
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	0f 90       	pop	r0
     74a:	0f 90       	pop	r0
}
     74c:	df 91       	pop	r29
     74e:	cf 91       	pop	r28
     750:	1f 91       	pop	r17
     752:	0f 91       	pop	r16
     754:	ff 90       	pop	r15
     756:	ef 90       	pop	r14
     758:	df 90       	pop	r13
     75a:	cf 90       	pop	r12
     75c:	bf 90       	pop	r11
     75e:	af 90       	pop	r10
     760:	9f 90       	pop	r9
     762:	8f 90       	pop	r8
     764:	08 95       	ret

00000766 <buttonPressedCallBack>:
	}
}

/*Called when BUTTON is pressed. NOTE: THIS IS IN AN INTERRUPT ENVIRONMENT. ALL TIMING AND DELAYS WILL *NOT* WORK. */
void buttonPressedCallBack(){
	if(ISDEBUG)
     766:	4f 99       	sbic	0x09, 7	; 9
     768:	08 c0       	rjmp	.+16     	; 0x77a <buttonPressedCallBack+0x14>
		uprintf("Button Pressed\r\n");
     76a:	81 ef       	ldi	r24, 0xF1	; 241
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	9f 93       	push	r25
     770:	8f 93       	push	r24
     772:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
	if(self_check)
     77a:	80 91 ac 02 	lds	r24, 0x02AC
     77e:	81 11       	cpse	r24, r1
     780:	cb c0       	rjmp	.+406    	; 0x918 <__stack+0x19>
		return;		// Button do not have effect when self-checking
	switch(system_state){
     782:	80 91 b7 02 	lds	r24, 0x02B7
     786:	88 23       	and	r24, r24
     788:	21 f0       	breq	.+8      	; 0x792 <buttonPressedCallBack+0x2c>
     78a:	83 30       	cpi	r24, 0x03	; 3
     78c:	08 f0       	brcs	.+2      	; 0x790 <buttonPressedCallBack+0x2a>
     78e:	c4 c0       	rjmp	.+392    	; 0x918 <__stack+0x19>
     790:	b7 c0       	rjmp	.+366    	; 0x900 <__stack+0x1>
		case IDLE:
			if(READ(AUTO) == 0){
     792:	33 99       	sbic	0x06, 3	; 6
     794:	97 c0       	rjmp	.+302    	; 0x8c4 <buttonPressedCallBack+0x15e>
				if(READ(DIRIN) == FORWARD){
     796:	4e 9b       	sbis	0x09, 6	; 9
     798:	4a c0       	rjmp	.+148    	; 0x82e <buttonPressedCallBack+0xc8>
					if(READ(LIMIT) == 1 && position >= 0){//Ensure it's valid to move
     79a:	4a 9b       	sbis	0x09, 2	; 9
     79c:	3d c0       	rjmp	.+122    	; 0x818 <buttonPressedCallBack+0xb2>
     79e:	80 91 c6 02 	lds	r24, 0x02C6
     7a2:	90 91 c7 02 	lds	r25, 0x02C7
     7a6:	a0 91 c8 02 	lds	r26, 0x02C8
     7aa:	b0 91 c9 02 	lds	r27, 0x02C9
     7ae:	bb 23       	and	r27, r27
     7b0:	9c f1       	brlt	.+102    	; 0x818 <buttonPressedCallBack+0xb2>
						system_state = AUTO_FORWARD;
     7b2:	81 e0       	ldi	r24, 0x01	; 1
     7b4:	80 93 b7 02 	sts	0x02B7, r24
						led_timer = milliseconds;
     7b8:	70 91 be 02 	lds	r23, 0x02BE
     7bc:	60 91 bf 02 	lds	r22, 0x02BF
     7c0:	50 91 c0 02 	lds	r21, 0x02C0
     7c4:	40 91 c1 02 	lds	r20, 0x02C1
     7c8:	30 91 c2 02 	lds	r19, 0x02C2
     7cc:	20 91 c3 02 	lds	r18, 0x02C3
     7d0:	90 91 c4 02 	lds	r25, 0x02C4
     7d4:	80 91 c5 02 	lds	r24, 0x02C5
     7d8:	70 93 cb 04 	sts	0x04CB, r23
     7dc:	60 93 cc 04 	sts	0x04CC, r22
     7e0:	50 93 cd 04 	sts	0x04CD, r21
     7e4:	40 93 ce 04 	sts	0x04CE, r20
     7e8:	30 93 cf 04 	sts	0x04CF, r19
     7ec:	20 93 d0 04 	sts	0x04D0, r18
     7f0:	90 93 d1 04 	sts	0x04D1, r25
     7f4:	80 93 d2 04 	sts	0x04D2, r24
						led_state = GREEN;
     7f8:	82 e0       	ldi	r24, 0x02	; 2
     7fa:	80 93 b8 02 	sts	0x02B8, r24
						LED_ON(GREEN);						// Ensure the LED blinks immediately
     7fe:	41 9a       	sbi	0x08, 1	; 8
     800:	42 98       	cbi	0x08, 2	; 8
						if(ISDEBUG)
     802:	4f 99       	sbic	0x09, 7	; 9
     804:	89 c0       	rjmp	.+274    	; 0x918 <__stack+0x19>
							uprintf("AUTO_FORWARD\r\n");
     806:	82 e0       	ldi	r24, 0x02	; 2
     808:	92 e0       	ldi	r25, 0x02	; 2
     80a:	9f 93       	push	r25
     80c:	8f 93       	push	r24
     80e:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     812:	0f 90       	pop	r0
     814:	0f 90       	pop	r0
     816:	08 95       	ret
					}
					else{
						if(ISDEBUG){
     818:	4f 99       	sbic	0x09, 7	; 9
     81a:	7e c0       	rjmp	.+252    	; 0x918 <__stack+0x19>
							uprintf("Limit reached. Please use manual mode.\r\n");
     81c:	81 e1       	ldi	r24, 0x11	; 17
     81e:	92 e0       	ldi	r25, 0x02	; 2
     820:	9f 93       	push	r25
     822:	8f 93       	push	r24
     824:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     828:	0f 90       	pop	r0
     82a:	0f 90       	pop	r0
     82c:	08 95       	ret
						}
					}
				}
				else{
					if(position <= CRITICAL_POS){//Ensure it's valid to move
     82e:	80 91 c6 02 	lds	r24, 0x02C6
     832:	90 91 c7 02 	lds	r25, 0x02C7
     836:	a0 91 c8 02 	lds	r26, 0x02C8
     83a:	b0 91 c9 02 	lds	r27, 0x02C9
     83e:	81 36       	cpi	r24, 0x61	; 97
     840:	91 42       	sbci	r25, 0x21	; 33
     842:	a0 46       	sbci	r26, 0x60	; 96
     844:	b1 05       	cpc	r27, r1
     846:	9c f5       	brge	.+102    	; 0x8ae <buttonPressedCallBack+0x148>
						system_state = AUTO_BACKWARD;
     848:	82 e0       	ldi	r24, 0x02	; 2
     84a:	80 93 b7 02 	sts	0x02B7, r24
						led_timer = milliseconds;
     84e:	70 91 be 02 	lds	r23, 0x02BE
     852:	60 91 bf 02 	lds	r22, 0x02BF
     856:	50 91 c0 02 	lds	r21, 0x02C0
     85a:	40 91 c1 02 	lds	r20, 0x02C1
     85e:	30 91 c2 02 	lds	r19, 0x02C2
     862:	20 91 c3 02 	lds	r18, 0x02C3
     866:	90 91 c4 02 	lds	r25, 0x02C4
     86a:	80 91 c5 02 	lds	r24, 0x02C5
     86e:	70 93 cb 04 	sts	0x04CB, r23
     872:	60 93 cc 04 	sts	0x04CC, r22
     876:	50 93 cd 04 	sts	0x04CD, r21
     87a:	40 93 ce 04 	sts	0x04CE, r20
     87e:	30 93 cf 04 	sts	0x04CF, r19
     882:	20 93 d0 04 	sts	0x04D0, r18
     886:	90 93 d1 04 	sts	0x04D1, r25
     88a:	80 93 d2 04 	sts	0x04D2, r24
						led_state = RED;
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	80 93 b8 02 	sts	0x02B8, r24
						LED_ON(RED);
     894:	41 98       	cbi	0x08, 1	; 8
     896:	42 9a       	sbi	0x08, 2	; 8
						if(ISDEBUG)
     898:	4f 99       	sbic	0x09, 7	; 9
     89a:	3e c0       	rjmp	.+124    	; 0x918 <__stack+0x19>
							uprintf("AUTO_BACKWARD\r\n");
     89c:	8a e3       	ldi	r24, 0x3A	; 58
     89e:	92 e0       	ldi	r25, 0x02	; 2
     8a0:	9f 93       	push	r25
     8a2:	8f 93       	push	r24
     8a4:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     8a8:	0f 90       	pop	r0
     8aa:	0f 90       	pop	r0
     8ac:	08 95       	ret
					}
					else{
						if(ISDEBUG){
     8ae:	4f 99       	sbic	0x09, 7	; 9
     8b0:	33 c0       	rjmp	.+102    	; 0x918 <__stack+0x19>
							uprintf("Limit reached. Please use manual mode.\r\n");
     8b2:	81 e1       	ldi	r24, 0x11	; 17
     8b4:	92 e0       	ldi	r25, 0x02	; 2
     8b6:	9f 93       	push	r25
     8b8:	8f 93       	push	r24
     8ba:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	08 95       	ret
						}
					}
				}
			}
			else{
				if(READ(DIRIN) == FORWARD){
     8c4:	4e 9b       	sbis	0x09, 6	; 9
     8c6:	0e c0       	rjmp	.+28     	; 0x8e4 <buttonPressedCallBack+0x17e>
					system_state = MANUAL_FORWARD;
     8c8:	83 e0       	ldi	r24, 0x03	; 3
     8ca:	80 93 b7 02 	sts	0x02B7, r24
					if(ISDEBUG)
     8ce:	4f 99       	sbic	0x09, 7	; 9
     8d0:	23 c0       	rjmp	.+70     	; 0x918 <__stack+0x19>
					uprintf("MANUAL_FORWARD\r\n");
     8d2:	8a e4       	ldi	r24, 0x4A	; 74
     8d4:	92 e0       	ldi	r25, 0x02	; 2
     8d6:	9f 93       	push	r25
     8d8:	8f 93       	push	r24
     8da:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     8de:	0f 90       	pop	r0
     8e0:	0f 90       	pop	r0
     8e2:	08 95       	ret
				}
				else{
					system_state = MANUAL_BACKWARD;
     8e4:	84 e0       	ldi	r24, 0x04	; 4
     8e6:	80 93 b7 02 	sts	0x02B7, r24
					if(ISDEBUG)
     8ea:	4f 99       	sbic	0x09, 7	; 9
     8ec:	15 c0       	rjmp	.+42     	; 0x918 <__stack+0x19>
						uprintf("MANUAL_BACKWARD\r\n");
     8ee:	8b e5       	ldi	r24, 0x5B	; 91
     8f0:	92 e0       	ldi	r25, 0x02	; 2
     8f2:	9f 93       	push	r25
     8f4:	8f 93       	push	r24
     8f6:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	08 95       	ret
				}
			}
			break;
		case AUTO_FORWARD:
		case AUTO_BACKWARD:
			system_state = IDLE;			// Press when autorunning == stop
     900:	10 92 b7 02 	sts	0x02B7, r1
			if(ISDEBUG)
     904:	4f 99       	sbic	0x09, 7	; 9
     906:	08 c0       	rjmp	.+16     	; 0x918 <__stack+0x19>
				uprintf("IDLE\r\n");
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	91 e0       	ldi	r25, 0x01	; 1
     90c:	9f 93       	push	r25
     90e:	8f 93       	push	r24
     910:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     914:	0f 90       	pop	r0
     916:	0f 90       	pop	r0
     918:	08 95       	ret

0000091a <buttonReleasedCallBack>:
	}
}

/*Called when BUTTON is released. NOTE: THIS IS IN AN INTERRUPT ENVIRONMENT. ALL TIMING AND DELAYS WILL *NOT* WORK. */
void buttonReleasedCallBack(){
	if(ISDEBUG)
     91a:	4f 99       	sbic	0x09, 7	; 9
     91c:	08 c0       	rjmp	.+16     	; 0x92e <buttonReleasedCallBack+0x14>
		uprintf("Button Released\r\n");
     91e:	8d e6       	ldi	r24, 0x6D	; 109
     920:	92 e0       	ldi	r25, 0x02	; 2
     922:	9f 93       	push	r25
     924:	8f 93       	push	r24
     926:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     92a:	0f 90       	pop	r0
     92c:	0f 90       	pop	r0
	if(self_check)
     92e:	80 91 ac 02 	lds	r24, 0x02AC
     932:	81 11       	cpse	r24, r1
     934:	11 c0       	rjmp	.+34     	; 0x958 <buttonReleasedCallBack+0x3e>
		return;		// Button do not have effect when self-checking
	switch(system_state){
     936:	80 91 b7 02 	lds	r24, 0x02B7
     93a:	83 50       	subi	r24, 0x03	; 3
     93c:	82 30       	cpi	r24, 0x02	; 2
     93e:	60 f4       	brcc	.+24     	; 0x958 <buttonReleasedCallBack+0x3e>
		case MANUAL_BACKWARD:
		case MANUAL_FORWARD:
			system_state = IDLE;			// Release == stop
     940:	10 92 b7 02 	sts	0x02B7, r1
			if(ISDEBUG)
     944:	4f 99       	sbic	0x09, 7	; 9
     946:	08 c0       	rjmp	.+16     	; 0x958 <buttonReleasedCallBack+0x3e>
				uprintf("IDLE\r\n");
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	9f 93       	push	r25
     94e:	8f 93       	push	r24
     950:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     954:	0f 90       	pop	r0
     956:	0f 90       	pop	r0
     958:	08 95       	ret

0000095a <timer2CallBack>:
	self_check = 0;
}

/*Main loop. NOTE: THIS IS IN AN INTERRUPT ENVIRONMENT. ALL TIMING AND DELAYS WILL *NOT* WORK.*/
/*This main loop is driven by Timer 0 1kHz ticks. Since most events are triggered by BUTTON and LIMIT, here we only try to blink the LEDs*/
void timer2CallBack(){
     95a:	af 92       	push	r10
     95c:	bf 92       	push	r11
     95e:	cf 92       	push	r12
     960:	df 92       	push	r13
     962:	ef 92       	push	r14
     964:	ff 92       	push	r15
     966:	0f 93       	push	r16
     968:	1f 93       	push	r17
	//if(ISDEBUG && milliseconds % 1000 == 0){
	//	uprintf("Time: %ld\r\n",milliseconds);
	//}
	/*Update LED status*/
	switch(led_state){
     96a:	80 91 b8 02 	lds	r24, 0x02B8
     96e:	81 30       	cpi	r24, 0x01	; 1
     970:	09 f4       	brne	.+2      	; 0x974 <timer2CallBack+0x1a>
     972:	26 c1       	rjmp	.+588    	; 0xbc0 <timer2CallBack+0x266>
     974:	20 f0       	brcs	.+8      	; 0x97e <timer2CallBack+0x24>
     976:	82 30       	cpi	r24, 0x02	; 2
     978:	09 f4       	brne	.+2      	; 0x97c <timer2CallBack+0x22>
     97a:	c1 c0       	rjmp	.+386    	; 0xafe <timer2CallBack+0x1a4>
     97c:	7f c1       	rjmp	.+766    	; 0xc7c <timer2CallBack+0x322>
		case OFF:
			switch(system_state){
     97e:	80 91 b7 02 	lds	r24, 0x02B7
     982:	82 30       	cpi	r24, 0x02	; 2
     984:	b1 f0       	breq	.+44     	; 0x9b2 <timer2CallBack+0x58>
     986:	20 f4       	brcc	.+8      	; 0x990 <timer2CallBack+0x36>
     988:	81 30       	cpi	r24, 0x01	; 1
     98a:	09 f4       	brne	.+2      	; 0x98e <timer2CallBack+0x34>
     98c:	65 c0       	rjmp	.+202    	; 0xa58 <timer2CallBack+0xfe>
     98e:	76 c1       	rjmp	.+748    	; 0xc7c <timer2CallBack+0x322>
     990:	83 30       	cpi	r24, 0x03	; 3
     992:	49 f0       	breq	.+18     	; 0x9a6 <timer2CallBack+0x4c>
     994:	84 30       	cpi	r24, 0x04	; 4
     996:	09 f0       	breq	.+2      	; 0x99a <timer2CallBack+0x40>
     998:	71 c1       	rjmp	.+738    	; 0xc7c <timer2CallBack+0x322>
				case MANUAL_BACKWARD:
					led_state = RED;
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	80 93 b8 02 	sts	0x02B8, r24
					LED_ON(RED);
     9a0:	41 98       	cbi	0x08, 1	; 8
     9a2:	42 9a       	sbi	0x08, 2	; 8
     9a4:	6b c1       	rjmp	.+726    	; 0xc7c <timer2CallBack+0x322>
					break;
				case MANUAL_FORWARD:
					led_state = GREEN;
     9a6:	82 e0       	ldi	r24, 0x02	; 2
     9a8:	80 93 b8 02 	sts	0x02B8, r24
					LED_ON(GREEN);
     9ac:	41 9a       	sbi	0x08, 1	; 8
     9ae:	42 98       	cbi	0x08, 2	; 8
     9b0:	65 c1       	rjmp	.+714    	; 0xc7c <timer2CallBack+0x322>
					break;
				case AUTO_BACKWARD:
					if(milliseconds - led_timer >= LED_BLINK){
     9b2:	20 91 be 02 	lds	r18, 0x02BE
     9b6:	30 91 bf 02 	lds	r19, 0x02BF
     9ba:	40 91 c0 02 	lds	r20, 0x02C0
     9be:	50 91 c1 02 	lds	r21, 0x02C1
     9c2:	60 91 c2 02 	lds	r22, 0x02C2
     9c6:	70 91 c3 02 	lds	r23, 0x02C3
     9ca:	80 91 c4 02 	lds	r24, 0x02C4
     9ce:	90 91 c5 02 	lds	r25, 0x02C5
     9d2:	a0 90 cb 04 	lds	r10, 0x04CB
     9d6:	b0 90 cc 04 	lds	r11, 0x04CC
     9da:	c0 90 cd 04 	lds	r12, 0x04CD
     9de:	d0 90 ce 04 	lds	r13, 0x04CE
     9e2:	e0 90 cf 04 	lds	r14, 0x04CF
     9e6:	f0 90 d0 04 	lds	r15, 0x04D0
     9ea:	00 91 d1 04 	lds	r16, 0x04D1
     9ee:	10 91 d2 04 	lds	r17, 0x04D2
     9f2:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subdi3>
     9f6:	2b 32       	cpi	r18, 0x2B	; 43
     9f8:	31 40       	sbci	r19, 0x01	; 1
     9fa:	41 05       	cpc	r20, r1
     9fc:	51 05       	cpc	r21, r1
     9fe:	61 05       	cpc	r22, r1
     a00:	71 05       	cpc	r23, r1
     a02:	81 05       	cpc	r24, r1
     a04:	91 05       	cpc	r25, r1
     a06:	09 f0       	breq	.+2      	; 0xa0a <timer2CallBack+0xb0>
     a08:	08 f4       	brcc	.+2      	; 0xa0c <timer2CallBack+0xb2>
     a0a:	38 c1       	rjmp	.+624    	; 0xc7c <timer2CallBack+0x322>
						led_state = RED;
     a0c:	81 e0       	ldi	r24, 0x01	; 1
     a0e:	80 93 b8 02 	sts	0x02B8, r24
						led_timer = milliseconds;
     a12:	70 91 be 02 	lds	r23, 0x02BE
     a16:	60 91 bf 02 	lds	r22, 0x02BF
     a1a:	50 91 c0 02 	lds	r21, 0x02C0
     a1e:	40 91 c1 02 	lds	r20, 0x02C1
     a22:	30 91 c2 02 	lds	r19, 0x02C2
     a26:	20 91 c3 02 	lds	r18, 0x02C3
     a2a:	90 91 c4 02 	lds	r25, 0x02C4
     a2e:	80 91 c5 02 	lds	r24, 0x02C5
     a32:	70 93 cb 04 	sts	0x04CB, r23
     a36:	60 93 cc 04 	sts	0x04CC, r22
     a3a:	50 93 cd 04 	sts	0x04CD, r21
     a3e:	40 93 ce 04 	sts	0x04CE, r20
     a42:	30 93 cf 04 	sts	0x04CF, r19
     a46:	20 93 d0 04 	sts	0x04D0, r18
     a4a:	90 93 d1 04 	sts	0x04D1, r25
     a4e:	80 93 d2 04 	sts	0x04D2, r24
						LED_ON(RED);
     a52:	41 98       	cbi	0x08, 1	; 8
     a54:	42 9a       	sbi	0x08, 2	; 8
     a56:	12 c1       	rjmp	.+548    	; 0xc7c <timer2CallBack+0x322>
					}
					break;
				case AUTO_FORWARD:
					if(milliseconds - led_timer >= LED_BLINK){
     a58:	20 91 be 02 	lds	r18, 0x02BE
     a5c:	30 91 bf 02 	lds	r19, 0x02BF
     a60:	40 91 c0 02 	lds	r20, 0x02C0
     a64:	50 91 c1 02 	lds	r21, 0x02C1
     a68:	60 91 c2 02 	lds	r22, 0x02C2
     a6c:	70 91 c3 02 	lds	r23, 0x02C3
     a70:	80 91 c4 02 	lds	r24, 0x02C4
     a74:	90 91 c5 02 	lds	r25, 0x02C5
     a78:	a0 90 cb 04 	lds	r10, 0x04CB
     a7c:	b0 90 cc 04 	lds	r11, 0x04CC
     a80:	c0 90 cd 04 	lds	r12, 0x04CD
     a84:	d0 90 ce 04 	lds	r13, 0x04CE
     a88:	e0 90 cf 04 	lds	r14, 0x04CF
     a8c:	f0 90 d0 04 	lds	r15, 0x04D0
     a90:	00 91 d1 04 	lds	r16, 0x04D1
     a94:	10 91 d2 04 	lds	r17, 0x04D2
     a98:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subdi3>
     a9c:	2b 32       	cpi	r18, 0x2B	; 43
     a9e:	31 40       	sbci	r19, 0x01	; 1
     aa0:	41 05       	cpc	r20, r1
     aa2:	51 05       	cpc	r21, r1
     aa4:	61 05       	cpc	r22, r1
     aa6:	71 05       	cpc	r23, r1
     aa8:	81 05       	cpc	r24, r1
     aaa:	91 05       	cpc	r25, r1
     aac:	09 f0       	breq	.+2      	; 0xab0 <timer2CallBack+0x156>
     aae:	08 f4       	brcc	.+2      	; 0xab2 <timer2CallBack+0x158>
     ab0:	e5 c0       	rjmp	.+458    	; 0xc7c <timer2CallBack+0x322>
						led_state = GREEN;
     ab2:	82 e0       	ldi	r24, 0x02	; 2
     ab4:	80 93 b8 02 	sts	0x02B8, r24
						led_timer = milliseconds;
     ab8:	70 91 be 02 	lds	r23, 0x02BE
     abc:	60 91 bf 02 	lds	r22, 0x02BF
     ac0:	50 91 c0 02 	lds	r21, 0x02C0
     ac4:	40 91 c1 02 	lds	r20, 0x02C1
     ac8:	30 91 c2 02 	lds	r19, 0x02C2
     acc:	20 91 c3 02 	lds	r18, 0x02C3
     ad0:	90 91 c4 02 	lds	r25, 0x02C4
     ad4:	80 91 c5 02 	lds	r24, 0x02C5
     ad8:	70 93 cb 04 	sts	0x04CB, r23
     adc:	60 93 cc 04 	sts	0x04CC, r22
     ae0:	50 93 cd 04 	sts	0x04CD, r21
     ae4:	40 93 ce 04 	sts	0x04CE, r20
     ae8:	30 93 cf 04 	sts	0x04CF, r19
     aec:	20 93 d0 04 	sts	0x04D0, r18
     af0:	90 93 d1 04 	sts	0x04D1, r25
     af4:	80 93 d2 04 	sts	0x04D2, r24
						LED_ON(GREEN);
     af8:	41 9a       	sbi	0x08, 1	; 8
     afa:	42 98       	cbi	0x08, 2	; 8
     afc:	bf c0       	rjmp	.+382    	; 0xc7c <timer2CallBack+0x322>
					}
					break;
			}
			break;
		case GREEN:
			if(system_state == AUTO_FORWARD){
     afe:	80 91 b7 02 	lds	r24, 0x02B7
     b02:	81 30       	cpi	r24, 0x01	; 1
     b04:	09 f0       	breq	.+2      	; 0xb08 <timer2CallBack+0x1ae>
     b06:	52 c0       	rjmp	.+164    	; 0xbac <timer2CallBack+0x252>
				if(milliseconds - led_timer >= LED_BLINK){
     b08:	20 91 be 02 	lds	r18, 0x02BE
     b0c:	30 91 bf 02 	lds	r19, 0x02BF
     b10:	40 91 c0 02 	lds	r20, 0x02C0
     b14:	50 91 c1 02 	lds	r21, 0x02C1
     b18:	60 91 c2 02 	lds	r22, 0x02C2
     b1c:	70 91 c3 02 	lds	r23, 0x02C3
     b20:	80 91 c4 02 	lds	r24, 0x02C4
     b24:	90 91 c5 02 	lds	r25, 0x02C5
     b28:	a0 90 cb 04 	lds	r10, 0x04CB
     b2c:	b0 90 cc 04 	lds	r11, 0x04CC
     b30:	c0 90 cd 04 	lds	r12, 0x04CD
     b34:	d0 90 ce 04 	lds	r13, 0x04CE
     b38:	e0 90 cf 04 	lds	r14, 0x04CF
     b3c:	f0 90 d0 04 	lds	r15, 0x04D0
     b40:	00 91 d1 04 	lds	r16, 0x04D1
     b44:	10 91 d2 04 	lds	r17, 0x04D2
     b48:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subdi3>
     b4c:	2b 32       	cpi	r18, 0x2B	; 43
     b4e:	31 40       	sbci	r19, 0x01	; 1
     b50:	41 05       	cpc	r20, r1
     b52:	51 05       	cpc	r21, r1
     b54:	61 05       	cpc	r22, r1
     b56:	71 05       	cpc	r23, r1
     b58:	81 05       	cpc	r24, r1
     b5a:	91 05       	cpc	r25, r1
     b5c:	09 f0       	breq	.+2      	; 0xb60 <timer2CallBack+0x206>
     b5e:	08 f4       	brcc	.+2      	; 0xb62 <timer2CallBack+0x208>
     b60:	8d c0       	rjmp	.+282    	; 0xc7c <timer2CallBack+0x322>
					led_state = OFF;
     b62:	10 92 b8 02 	sts	0x02B8, r1
					led_timer = milliseconds;
     b66:	70 91 be 02 	lds	r23, 0x02BE
     b6a:	60 91 bf 02 	lds	r22, 0x02BF
     b6e:	50 91 c0 02 	lds	r21, 0x02C0
     b72:	40 91 c1 02 	lds	r20, 0x02C1
     b76:	30 91 c2 02 	lds	r19, 0x02C2
     b7a:	20 91 c3 02 	lds	r18, 0x02C3
     b7e:	90 91 c4 02 	lds	r25, 0x02C4
     b82:	80 91 c5 02 	lds	r24, 0x02C5
     b86:	70 93 cb 04 	sts	0x04CB, r23
     b8a:	60 93 cc 04 	sts	0x04CC, r22
     b8e:	50 93 cd 04 	sts	0x04CD, r21
     b92:	40 93 ce 04 	sts	0x04CE, r20
     b96:	30 93 cf 04 	sts	0x04CF, r19
     b9a:	20 93 d0 04 	sts	0x04D0, r18
     b9e:	90 93 d1 04 	sts	0x04D1, r25
     ba2:	80 93 d2 04 	sts	0x04D2, r24
					LED_OFF;
     ba6:	41 98       	cbi	0x08, 1	; 8
     ba8:	42 98       	cbi	0x08, 2	; 8
     baa:	68 c0       	rjmp	.+208    	; 0xc7c <timer2CallBack+0x322>
				}
			}
			else if(system_state != MANUAL_FORWARD){
     bac:	80 91 b7 02 	lds	r24, 0x02B7
     bb0:	83 30       	cpi	r24, 0x03	; 3
     bb2:	09 f4       	brne	.+2      	; 0xbb6 <timer2CallBack+0x25c>
     bb4:	63 c0       	rjmp	.+198    	; 0xc7c <timer2CallBack+0x322>
				led_state = OFF;
     bb6:	10 92 b8 02 	sts	0x02B8, r1
				LED_OFF;
     bba:	41 98       	cbi	0x08, 1	; 8
     bbc:	42 98       	cbi	0x08, 2	; 8
     bbe:	5e c0       	rjmp	.+188    	; 0xc7c <timer2CallBack+0x322>
			}
			break;
		case RED:
			if(system_state == AUTO_BACKWARD){
     bc0:	80 91 b7 02 	lds	r24, 0x02B7
     bc4:	82 30       	cpi	r24, 0x02	; 2
     bc6:	09 f0       	breq	.+2      	; 0xbca <timer2CallBack+0x270>
     bc8:	51 c0       	rjmp	.+162    	; 0xc6c <timer2CallBack+0x312>
				if(milliseconds - led_timer > LED_BLINK){
     bca:	20 91 be 02 	lds	r18, 0x02BE
     bce:	30 91 bf 02 	lds	r19, 0x02BF
     bd2:	40 91 c0 02 	lds	r20, 0x02C0
     bd6:	50 91 c1 02 	lds	r21, 0x02C1
     bda:	60 91 c2 02 	lds	r22, 0x02C2
     bde:	70 91 c3 02 	lds	r23, 0x02C3
     be2:	80 91 c4 02 	lds	r24, 0x02C4
     be6:	90 91 c5 02 	lds	r25, 0x02C5
     bea:	a0 90 cb 04 	lds	r10, 0x04CB
     bee:	b0 90 cc 04 	lds	r11, 0x04CC
     bf2:	c0 90 cd 04 	lds	r12, 0x04CD
     bf6:	d0 90 ce 04 	lds	r13, 0x04CE
     bfa:	e0 90 cf 04 	lds	r14, 0x04CF
     bfe:	f0 90 d0 04 	lds	r15, 0x04D0
     c02:	00 91 d1 04 	lds	r16, 0x04D1
     c06:	10 91 d2 04 	lds	r17, 0x04D2
     c0a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subdi3>
     c0e:	2c 32       	cpi	r18, 0x2C	; 44
     c10:	31 40       	sbci	r19, 0x01	; 1
     c12:	41 05       	cpc	r20, r1
     c14:	51 05       	cpc	r21, r1
     c16:	61 05       	cpc	r22, r1
     c18:	71 05       	cpc	r23, r1
     c1a:	81 05       	cpc	r24, r1
     c1c:	91 05       	cpc	r25, r1
     c1e:	71 f1       	breq	.+92     	; 0xc7c <timer2CallBack+0x322>
     c20:	68 f1       	brcs	.+90     	; 0xc7c <timer2CallBack+0x322>
					led_state = OFF;
     c22:	10 92 b8 02 	sts	0x02B8, r1
					led_timer = milliseconds;
     c26:	70 91 be 02 	lds	r23, 0x02BE
     c2a:	60 91 bf 02 	lds	r22, 0x02BF
     c2e:	50 91 c0 02 	lds	r21, 0x02C0
     c32:	40 91 c1 02 	lds	r20, 0x02C1
     c36:	30 91 c2 02 	lds	r19, 0x02C2
     c3a:	20 91 c3 02 	lds	r18, 0x02C3
     c3e:	90 91 c4 02 	lds	r25, 0x02C4
     c42:	80 91 c5 02 	lds	r24, 0x02C5
     c46:	70 93 cb 04 	sts	0x04CB, r23
     c4a:	60 93 cc 04 	sts	0x04CC, r22
     c4e:	50 93 cd 04 	sts	0x04CD, r21
     c52:	40 93 ce 04 	sts	0x04CE, r20
     c56:	30 93 cf 04 	sts	0x04CF, r19
     c5a:	20 93 d0 04 	sts	0x04D0, r18
     c5e:	90 93 d1 04 	sts	0x04D1, r25
     c62:	80 93 d2 04 	sts	0x04D2, r24
					LED_OFF;
     c66:	41 98       	cbi	0x08, 1	; 8
     c68:	42 98       	cbi	0x08, 2	; 8
     c6a:	08 c0       	rjmp	.+16     	; 0xc7c <timer2CallBack+0x322>
				}
			}
			else if(system_state != MANUAL_BACKWARD){
     c6c:	80 91 b7 02 	lds	r24, 0x02B7
     c70:	84 30       	cpi	r24, 0x04	; 4
     c72:	21 f0       	breq	.+8      	; 0xc7c <timer2CallBack+0x322>
				led_state = OFF;
     c74:	10 92 b8 02 	sts	0x02B8, r1
				LED_OFF;
     c78:	41 98       	cbi	0x08, 1	; 8
     c7a:	42 98       	cbi	0x08, 2	; 8
			}
			break;
	}
	/*Update BUTTON status*/
	switch(button_state){
     c7c:	80 91 b9 02 	lds	r24, 0x02B9
     c80:	81 30       	cpi	r24, 0x01	; 1
     c82:	19 f0       	breq	.+6      	; 0xc8a <timer2CallBack+0x330>
     c84:	82 30       	cpi	r24, 0x02	; 2
     c86:	99 f1       	breq	.+102    	; 0xcee <timer2CallBack+0x394>
     c88:	63 c0       	rjmp	.+198    	; 0xd50 <timer2CallBack+0x3f6>
		case FALL_DETECTED:
			if(milliseconds - button_timer >= ANTIJITTER){
     c8a:	20 91 be 02 	lds	r18, 0x02BE
     c8e:	30 91 bf 02 	lds	r19, 0x02BF
     c92:	40 91 c0 02 	lds	r20, 0x02C0
     c96:	50 91 c1 02 	lds	r21, 0x02C1
     c9a:	60 91 c2 02 	lds	r22, 0x02C2
     c9e:	70 91 c3 02 	lds	r23, 0x02C3
     ca2:	80 91 c4 02 	lds	r24, 0x02C4
     ca6:	90 91 c5 02 	lds	r25, 0x02C5
     caa:	a0 90 d7 06 	lds	r10, 0x06D7
     cae:	b0 90 d8 06 	lds	r11, 0x06D8
     cb2:	c0 90 d9 06 	lds	r12, 0x06D9
     cb6:	d0 90 da 06 	lds	r13, 0x06DA
     cba:	e0 90 db 06 	lds	r14, 0x06DB
     cbe:	f0 90 dc 06 	lds	r15, 0x06DC
     cc2:	00 91 dd 06 	lds	r16, 0x06DD
     cc6:	10 91 de 06 	lds	r17, 0x06DE
     cca:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subdi3>
     cce:	a9 e0       	ldi	r26, 0x09	; 9
     cd0:	0e 94 79 08 	call	0x10f2	; 0x10f2 <__cmpdi2_s8>
     cd4:	e9 f1       	breq	.+122    	; 0xd50 <timer2CallBack+0x3f6>
     cd6:	e0 f1       	brcs	.+120    	; 0xd50 <timer2CallBack+0x3f6>
				if(READ(BUTTON) == 0){
     cd8:	4b 99       	sbic	0x09, 3	; 9
     cda:	06 c0       	rjmp	.+12     	; 0xce8 <timer2CallBack+0x38e>
					button_state = PRESSED;					// Truely Pressed
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	80 93 b9 02 	sts	0x02B9, r24
					buttonPressedCallBack();
     ce2:	0e 94 b3 03 	call	0x766	; 0x766 <buttonPressedCallBack>
     ce6:	34 c0       	rjmp	.+104    	; 0xd50 <timer2CallBack+0x3f6>
				}
				else{
					button_state = RELEASED;				// noise
     ce8:	10 92 b9 02 	sts	0x02B9, r1
     cec:	31 c0       	rjmp	.+98     	; 0xd50 <timer2CallBack+0x3f6>
				}
			}
			break;
		case RISE_DETECTED:
			if(milliseconds - button_timer >= ANTIJITTER){
     cee:	20 91 be 02 	lds	r18, 0x02BE
     cf2:	30 91 bf 02 	lds	r19, 0x02BF
     cf6:	40 91 c0 02 	lds	r20, 0x02C0
     cfa:	50 91 c1 02 	lds	r21, 0x02C1
     cfe:	60 91 c2 02 	lds	r22, 0x02C2
     d02:	70 91 c3 02 	lds	r23, 0x02C3
     d06:	80 91 c4 02 	lds	r24, 0x02C4
     d0a:	90 91 c5 02 	lds	r25, 0x02C5
     d0e:	a0 90 d7 06 	lds	r10, 0x06D7
     d12:	b0 90 d8 06 	lds	r11, 0x06D8
     d16:	c0 90 d9 06 	lds	r12, 0x06D9
     d1a:	d0 90 da 06 	lds	r13, 0x06DA
     d1e:	e0 90 db 06 	lds	r14, 0x06DB
     d22:	f0 90 dc 06 	lds	r15, 0x06DC
     d26:	00 91 dd 06 	lds	r16, 0x06DD
     d2a:	10 91 de 06 	lds	r17, 0x06DE
     d2e:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subdi3>
     d32:	a9 e0       	ldi	r26, 0x09	; 9
     d34:	0e 94 79 08 	call	0x10f2	; 0x10f2 <__cmpdi2_s8>
     d38:	59 f0       	breq	.+22     	; 0xd50 <timer2CallBack+0x3f6>
     d3a:	50 f0       	brcs	.+20     	; 0xd50 <timer2CallBack+0x3f6>
				if(READ(BUTTON) == 1){
     d3c:	4b 9b       	sbis	0x09, 3	; 9
     d3e:	05 c0       	rjmp	.+10     	; 0xd4a <timer2CallBack+0x3f0>
					button_state = RELEASED;
     d40:	10 92 b9 02 	sts	0x02B9, r1
					buttonReleasedCallBack();
     d44:	0e 94 8d 04 	call	0x91a	; 0x91a <buttonReleasedCallBack>
     d48:	03 c0       	rjmp	.+6      	; 0xd50 <timer2CallBack+0x3f6>
				}
				else{
					button_state = PRESSED;
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	80 93 b9 02 	sts	0x02B9, r24
				}
			}
			break;
	}
	/*Update microstep status*/
	isfast = (READ(MICROSTEP) == FAST);
     d50:	89 b1       	in	r24, 0x09	; 9
     d52:	85 fb       	bst	r24, 5
     d54:	88 27       	eor	r24, r24
     d56:	80 f9       	bld	r24, 0
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	89 27       	eor	r24, r25
     d5c:	80 93 df 06 	sts	0x06DF, r24
	/*Update Pulse output*/
	if(system_state != oldstate || abs(speed - oldspeed) > SPEED_EPS || isfast != oldisfast){// only take action when updated
     d60:	90 91 b7 02 	lds	r25, 0x02B7
     d64:	80 91 b6 02 	lds	r24, 0x02B6
     d68:	98 13       	cpse	r25, r24
     d6a:	1a c0       	rjmp	.+52     	; 0xda0 <timer2CallBack+0x446>
     d6c:	20 91 ba 02 	lds	r18, 0x02BA
     d70:	30 91 bb 02 	lds	r19, 0x02BB
     d74:	80 91 d5 06 	lds	r24, 0x06D5
     d78:	90 91 d6 06 	lds	r25, 0x06D6
     d7c:	28 1b       	sub	r18, r24
     d7e:	39 0b       	sbc	r19, r25
     d80:	c9 01       	movw	r24, r18
     d82:	99 23       	and	r25, r25
     d84:	24 f4       	brge	.+8      	; 0xd8e <timer2CallBack+0x434>
     d86:	88 27       	eor	r24, r24
     d88:	99 27       	eor	r25, r25
     d8a:	82 1b       	sub	r24, r18
     d8c:	93 0b       	sbc	r25, r19
     d8e:	0b 97       	sbiw	r24, 0x0b	; 11
     d90:	3c f4       	brge	.+14     	; 0xda0 <timer2CallBack+0x446>
     d92:	90 91 df 06 	lds	r25, 0x06DF
     d96:	80 91 ca 02 	lds	r24, 0x02CA
     d9a:	98 17       	cp	r25, r24
     d9c:	09 f4       	brne	.+2      	; 0xda0 <timer2CallBack+0x446>
     d9e:	e0 c0       	rjmp	.+448    	; 0xf60 <timer2CallBack+0x606>
		//if(ISDEBUG)
		//	uprintf("Update Output\r\n");
		if(isfast)
     da0:	80 91 df 06 	lds	r24, 0x06DF
     da4:	88 23       	and	r24, r24
     da6:	39 f0       	breq	.+14     	; 0xdb6 <timer2CallBack+0x45c>
			step = FAST_STEP;
     da8:	80 e8       	ldi	r24, 0x80	; 128
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	90 93 d4 06 	sts	0x06D4, r25
     db0:	80 93 d3 06 	sts	0x06D3, r24
     db4:	06 c0       	rjmp	.+12     	; 0xdc2 <timer2CallBack+0x468>
		else
			step = SLOW_STEP;
     db6:	81 e0       	ldi	r24, 0x01	; 1
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	90 93 d4 06 	sts	0x06D4, r25
     dbe:	80 93 d3 06 	sts	0x06D3, r24
		
		switch(system_state){
     dc2:	80 91 b7 02 	lds	r24, 0x02B7
     dc6:	82 30       	cpi	r24, 0x02	; 2
     dc8:	c9 f0       	breq	.+50     	; 0xdfc <timer2CallBack+0x4a2>
     dca:	30 f4       	brcc	.+12     	; 0xdd8 <timer2CallBack+0x47e>
     dcc:	88 23       	and	r24, r24
     dce:	09 f4       	brne	.+2      	; 0xdd2 <timer2CallBack+0x478>
     dd0:	5f c0       	rjmp	.+190    	; 0xe90 <timer2CallBack+0x536>
     dd2:	81 30       	cpi	r24, 0x01	; 1
     dd4:	31 f0       	breq	.+12     	; 0xde2 <timer2CallBack+0x488>
     dd6:	b4 c0       	rjmp	.+360    	; 0xf40 <timer2CallBack+0x5e6>
     dd8:	83 30       	cpi	r24, 0x03	; 3
     dda:	19 f0       	breq	.+6      	; 0xde2 <timer2CallBack+0x488>
     ddc:	84 30       	cpi	r24, 0x04	; 4
     dde:	71 f0       	breq	.+28     	; 0xdfc <timer2CallBack+0x4a2>
     de0:	af c0       	rjmp	.+350    	; 0xf40 <timer2CallBack+0x5e6>
			case AUTO_FORWARD:
			case MANUAL_FORWARD:
				CLR(DIROUT);
     de2:	28 98       	cbi	0x05, 0	; 5
				step *= FORWARD_STEP;
     de4:	80 91 d3 06 	lds	r24, 0x06D3
     de8:	90 91 d4 06 	lds	r25, 0x06D4
     dec:	91 95       	neg	r25
     dee:	81 95       	neg	r24
     df0:	91 09       	sbc	r25, r1
     df2:	90 93 d4 06 	sts	0x06D4, r25
     df6:	80 93 d3 06 	sts	0x06D3, r24
				goto l1;
     dfa:	09 c0       	rjmp	.+18     	; 0xe0e <timer2CallBack+0x4b4>
			case AUTO_BACKWARD:
			case MANUAL_BACKWARD:
				SET(DIROUT);
     dfc:	28 9a       	sbi	0x05, 0	; 5
				step *= BACKWARD_STEP;
     dfe:	80 91 d3 06 	lds	r24, 0x06D3
     e02:	90 91 d4 06 	lds	r25, 0x06D4
     e06:	90 93 d4 06 	sts	0x06D4, r25
     e0a:	80 93 d3 06 	sts	0x06D3, r24
				/*Common for FORWARD and BACKWARD*/
	l1:			
				if(isfast){
     e0e:	80 91 df 06 	lds	r24, 0x06DF
     e12:	88 23       	and	r24, r24
     e14:	e1 f0       	breq	.+56     	; 0xe4e <timer2CallBack+0x4f4>
					OCR1A = (long)(SPEED_MAX_FAST - SPEED_MIN_FAST) * speed / 1024 + SPEED_MIN_FAST;
     e16:	20 91 ba 02 	lds	r18, 0x02BA
     e1a:	30 91 bb 02 	lds	r19, 0x02BB
     e1e:	ac e1       	ldi	r26, 0x1C	; 28
     e20:	bc e0       	ldi	r27, 0x0C	; 12
     e22:	0e 94 4e 08 	call	0x109c	; 0x109c <__umulhisi3>
     e26:	46 2f       	mov	r20, r22
     e28:	57 2f       	mov	r21, r23
     e2a:	68 2f       	mov	r22, r24
     e2c:	79 2f       	mov	r23, r25
     e2e:	03 2e       	mov	r0, r19
     e30:	3a e0       	ldi	r19, 0x0A	; 10
     e32:	75 95       	asr	r23
     e34:	67 95       	ror	r22
     e36:	57 95       	ror	r21
     e38:	47 95       	ror	r20
     e3a:	3a 95       	dec	r19
     e3c:	d1 f7       	brne	.-12     	; 0xe32 <timer2CallBack+0x4d8>
     e3e:	30 2d       	mov	r19, r0
     e40:	40 57       	subi	r20, 0x70	; 112
     e42:	5e 4f       	sbci	r21, 0xFE	; 254
     e44:	50 93 89 00 	sts	0x0089, r21
     e48:	40 93 88 00 	sts	0x0088, r20
     e4c:	1b c0       	rjmp	.+54     	; 0xe84 <timer2CallBack+0x52a>
				}
				else{
					OCR1A = (long)(SPEED_MAX_SLOW - SPEED_MIN_SLOW) * speed / 1024 + SPEED_MIN_SLOW;
     e4e:	20 91 ba 02 	lds	r18, 0x02BA
     e52:	30 91 bb 02 	lds	r19, 0x02BB
     e56:	a4 ee       	ldi	r26, 0xE4	; 228
     e58:	b3 e0       	ldi	r27, 0x03	; 3
     e5a:	0e 94 4e 08 	call	0x109c	; 0x109c <__umulhisi3>
     e5e:	46 2f       	mov	r20, r22
     e60:	57 2f       	mov	r21, r23
     e62:	68 2f       	mov	r22, r24
     e64:	79 2f       	mov	r23, r25
     e66:	03 2e       	mov	r0, r19
     e68:	3a e0       	ldi	r19, 0x0A	; 10
     e6a:	75 95       	asr	r23
     e6c:	67 95       	ror	r22
     e6e:	57 95       	ror	r21
     e70:	47 95       	ror	r20
     e72:	3a 95       	dec	r19
     e74:	d1 f7       	brne	.-12     	; 0xe6a <timer2CallBack+0x510>
     e76:	30 2d       	mov	r19, r0
     e78:	4c 5f       	subi	r20, 0xFC	; 252
     e7a:	5f 4f       	sbci	r21, 0xFF	; 255
     e7c:	50 93 89 00 	sts	0x0089, r21
     e80:	40 93 88 00 	sts	0x0088, r20
				}
				TCCR1B |= _BV(CS11);	// Start Timer 1
     e84:	e1 e8       	ldi	r30, 0x81	; 129
     e86:	f0 e0       	ldi	r31, 0x00	; 0
     e88:	80 81       	ld	r24, Z
     e8a:	82 60       	ori	r24, 0x02	; 2
     e8c:	80 83       	st	Z, r24
				break;
     e8e:	58 c0       	rjmp	.+176    	; 0xf40 <timer2CallBack+0x5e6>
			case IDLE:
				TCCR1B &= 0xF8;	// Stop Timer 1, stop output
     e90:	e1 e8       	ldi	r30, 0x81	; 129
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	80 81       	ld	r24, Z
     e96:	88 7f       	andi	r24, 0xF8	; 248
     e98:	80 83       	st	Z, r24
				position += (long)TCNT0 * step;	// sum up remaining steps
     e9a:	26 b5       	in	r18, 0x26	; 38
     e9c:	a0 91 d3 06 	lds	r26, 0x06D3
     ea0:	b0 91 d4 06 	lds	r27, 0x06D4
     ea4:	c0 90 c6 02 	lds	r12, 0x02C6
     ea8:	d0 90 c7 02 	lds	r13, 0x02C7
     eac:	e0 90 c8 02 	lds	r14, 0x02C8
     eb0:	f0 90 c9 02 	lds	r15, 0x02C9
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__usmulhisi3>
     eba:	c6 0e       	add	r12, r22
     ebc:	d7 1e       	adc	r13, r23
     ebe:	e8 1e       	adc	r14, r24
     ec0:	f9 1e       	adc	r15, r25
     ec2:	c0 92 c6 02 	sts	0x02C6, r12
     ec6:	d0 92 c7 02 	sts	0x02C7, r13
     eca:	e0 92 c8 02 	sts	0x02C8, r14
     ece:	f0 92 c9 02 	sts	0x02C9, r15
				TCNT0 = 0;
     ed2:	16 bc       	out	0x26, r1	; 38
				if(clear_position){
     ed4:	80 91 ad 02 	lds	r24, 0x02AD
     ed8:	88 23       	and	r24, r24
     eda:	51 f0       	breq	.+20     	; 0xef0 <timer2CallBack+0x596>
					position = 0;
     edc:	10 92 c6 02 	sts	0x02C6, r1
     ee0:	10 92 c7 02 	sts	0x02C7, r1
     ee4:	10 92 c8 02 	sts	0x02C8, r1
     ee8:	10 92 c9 02 	sts	0x02C9, r1
					clear_position = 0;
     eec:	10 92 ad 02 	sts	0x02AD, r1
				}
				if(ISDEBUG){
     ef0:	4f 99       	sbic	0x09, 7	; 9
     ef2:	26 c0       	rjmp	.+76     	; 0xf40 <timer2CallBack+0x5e6>
					uprintf("Speed at %d\r\n",speed);
     ef4:	80 91 ba 02 	lds	r24, 0x02BA
     ef8:	90 91 bb 02 	lds	r25, 0x02BB
     efc:	9f 93       	push	r25
     efe:	8f 93       	push	r24
     f00:	8f e7       	ldi	r24, 0x7F	; 127
     f02:	92 e0       	ldi	r25, 0x02	; 2
     f04:	9f 93       	push	r25
     f06:	8f 93       	push	r24
     f08:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
					uprintf("Pos at %ld\r\n",position);
     f0c:	80 91 c6 02 	lds	r24, 0x02C6
     f10:	90 91 c7 02 	lds	r25, 0x02C7
     f14:	a0 91 c8 02 	lds	r26, 0x02C8
     f18:	b0 91 c9 02 	lds	r27, 0x02C9
     f1c:	bf 93       	push	r27
     f1e:	af 93       	push	r26
     f20:	9f 93       	push	r25
     f22:	8f 93       	push	r24
     f24:	8d e8       	ldi	r24, 0x8D	; 141
     f26:	92 e0       	ldi	r25, 0x02	; 2
     f28:	9f 93       	push	r25
     f2a:	8f 93       	push	r24
     f2c:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
     f30:	8d b7       	in	r24, 0x3d	; 61
     f32:	9e b7       	in	r25, 0x3e	; 62
     f34:	0a 96       	adiw	r24, 0x0a	; 10
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	9e bf       	out	0x3e, r25	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	8d bf       	out	0x3d, r24	; 61
				}
		}
		oldstate = system_state;
     f40:	80 91 b7 02 	lds	r24, 0x02B7
     f44:	80 93 b6 02 	sts	0x02B6, r24
		oldspeed = speed;
     f48:	80 91 ba 02 	lds	r24, 0x02BA
     f4c:	90 91 bb 02 	lds	r25, 0x02BB
     f50:	90 93 d6 06 	sts	0x06D6, r25
     f54:	80 93 d5 06 	sts	0x06D5, r24
		oldisfast = isfast;
     f58:	80 91 df 06 	lds	r24, 0x06DF
     f5c:	80 93 ca 02 	sts	0x02CA, r24
	}
}
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	ff 90       	pop	r15
     f66:	ef 90       	pop	r14
     f68:	df 90       	pop	r13
     f6a:	cf 90       	pop	r12
     f6c:	bf 90       	pop	r11
     f6e:	af 90       	pop	r10
     f70:	08 95       	ret

00000f72 <__vector_7>:
	va_end(args);
	_write_serial(buffer2);
}

/*Interrupt Service Routines*/
ISR(TIMER2_COMPA_vect, ISR_BLOCK){	// ISR for Timer 2 tick. Global 1ms timing
     f72:	1f 92       	push	r1
     f74:	0f 92       	push	r0
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	0f 92       	push	r0
     f7a:	11 24       	eor	r1, r1
     f7c:	2f 93       	push	r18
     f7e:	3f 93       	push	r19
     f80:	4f 93       	push	r20
     f82:	5f 93       	push	r21
     f84:	6f 93       	push	r22
     f86:	7f 93       	push	r23
     f88:	8f 93       	push	r24
     f8a:	9f 93       	push	r25
     f8c:	af 93       	push	r26
     f8e:	bf 93       	push	r27
     f90:	ef 93       	push	r30
     f92:	ff 93       	push	r31
	milliseconds ++;
     f94:	20 91 be 02 	lds	r18, 0x02BE
     f98:	30 91 bf 02 	lds	r19, 0x02BF
     f9c:	40 91 c0 02 	lds	r20, 0x02C0
     fa0:	50 91 c1 02 	lds	r21, 0x02C1
     fa4:	60 91 c2 02 	lds	r22, 0x02C2
     fa8:	70 91 c3 02 	lds	r23, 0x02C3
     fac:	80 91 c4 02 	lds	r24, 0x02C4
     fb0:	90 91 c5 02 	lds	r25, 0x02C5
     fb4:	a1 e0       	ldi	r26, 0x01	; 1
     fb6:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__adddi3_s8>
     fba:	20 93 be 02 	sts	0x02BE, r18
     fbe:	30 93 bf 02 	sts	0x02BF, r19
     fc2:	40 93 c0 02 	sts	0x02C0, r20
     fc6:	50 93 c1 02 	sts	0x02C1, r21
     fca:	60 93 c2 02 	sts	0x02C2, r22
     fce:	70 93 c3 02 	sts	0x02C3, r23
     fd2:	80 93 c4 02 	sts	0x02C4, r24
     fd6:	90 93 c5 02 	sts	0x02C5, r25
	timer2CallBack();
     fda:	0e 94 ad 04 	call	0x95a	; 0x95a <timer2CallBack>
}
     fde:	ff 91       	pop	r31
     fe0:	ef 91       	pop	r30
     fe2:	bf 91       	pop	r27
     fe4:	af 91       	pop	r26
     fe6:	9f 91       	pop	r25
     fe8:	8f 91       	pop	r24
     fea:	7f 91       	pop	r23
     fec:	6f 91       	pop	r22
     fee:	5f 91       	pop	r21
     ff0:	4f 91       	pop	r20
     ff2:	3f 91       	pop	r19
     ff4:	2f 91       	pop	r18
     ff6:	0f 90       	pop	r0
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	0f 90       	pop	r0
     ffc:	1f 90       	pop	r1
     ffe:	18 95       	reti

00001000 <limitTriggeredCallBack>:
	}
}

/*Called when LIMIT is triggered. NOTE: THIS IS IN AN INTERRUPT ENVIRONMENT. ALL TIMING AND DELAYS WILL *NOT* WORK. */
void limitTriggeredCallBack(){
	if(ISDEBUG)
    1000:	4f 99       	sbic	0x09, 7	; 9
    1002:	08 c0       	rjmp	.+16     	; 0x1014 <limitTriggeredCallBack+0x14>
		uprintf("Limit triggered\r\n");
    1004:	8a e9       	ldi	r24, 0x9A	; 154
    1006:	92 e0       	ldi	r25, 0x02	; 2
    1008:	9f 93       	push	r25
    100a:	8f 93       	push	r24
    100c:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
	switch(system_state){
    1014:	80 91 b7 02 	lds	r24, 0x02B7
    1018:	81 30       	cpi	r24, 0x01	; 1
    101a:	11 f0       	breq	.+4      	; 0x1020 <limitTriggeredCallBack+0x20>
    101c:	83 30       	cpi	r24, 0x03	; 3
    101e:	79 f4       	brne	.+30     	; 0x103e <limitTriggeredCallBack+0x3e>
		case AUTO_FORWARD:
		case MANUAL_FORWARD:
			system_state = IDLE;
    1020:	10 92 b7 02 	sts	0x02B7, r1
			clear_position = 1;	// clear position at next update
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	80 93 ad 02 	sts	0x02AD, r24
			if(ISDEBUG)
    102a:	4f 99       	sbic	0x09, 7	; 9
    102c:	08 c0       	rjmp	.+16     	; 0x103e <limitTriggeredCallBack+0x3e>
				uprintf("IDLE\r\n");
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	91 e0       	ldi	r25, 0x01	; 1
    1032:	9f 93       	push	r25
    1034:	8f 93       	push	r24
    1036:	0e 94 74 00 	call	0xe8	; 0xe8 <uprintf>
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	08 95       	ret

00001040 <__vector_1>:
		speed = ADCL | ((unsigned int)ADCH << 8);
		speed_update_timer = milliseconds;
	}
}

ISR(INT0_vect,ISR_BLOCK){// ISR for LIMIT switch
    1040:	1f 92       	push	r1
    1042:	0f 92       	push	r0
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	0f 92       	push	r0
    1048:	11 24       	eor	r1, r1
    104a:	2f 93       	push	r18
    104c:	3f 93       	push	r19
    104e:	4f 93       	push	r20
    1050:	5f 93       	push	r21
    1052:	6f 93       	push	r22
    1054:	7f 93       	push	r23
    1056:	8f 93       	push	r24
    1058:	9f 93       	push	r25
    105a:	af 93       	push	r26
    105c:	bf 93       	push	r27
    105e:	ef 93       	push	r30
    1060:	ff 93       	push	r31
	limitTriggeredCallBack();
    1062:	0e 94 00 08 	call	0x1000	; 0x1000 <limitTriggeredCallBack>
}
    1066:	ff 91       	pop	r31
    1068:	ef 91       	pop	r30
    106a:	bf 91       	pop	r27
    106c:	af 91       	pop	r26
    106e:	9f 91       	pop	r25
    1070:	8f 91       	pop	r24
    1072:	7f 91       	pop	r23
    1074:	6f 91       	pop	r22
    1076:	5f 91       	pop	r21
    1078:	4f 91       	pop	r20
    107a:	3f 91       	pop	r19
    107c:	2f 91       	pop	r18
    107e:	0f 90       	pop	r0
    1080:	0f be       	out	0x3f, r0	; 63
    1082:	0f 90       	pop	r0
    1084:	1f 90       	pop	r1
    1086:	18 95       	reti

00001088 <main>:
}

/*Program entry point*/
int main()
{
	init();
    1088:	0e 94 3b 02 	call	0x476	; 0x476 <init>
	calibrate();
    108c:	0e 94 b9 02 	call	0x572	; 0x572 <calibrate>
	ADCSRA |= _BV(ADSC); // start first sampling
    1090:	ea e7       	ldi	r30, 0x7A	; 122
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	80 81       	ld	r24, Z
    1096:	80 64       	ori	r24, 0x40	; 64
    1098:	80 83       	st	Z, r24
    109a:	ff cf       	rjmp	.-2      	; 0x109a <main+0x12>

0000109c <__umulhisi3>:
    109c:	a2 9f       	mul	r26, r18
    109e:	b0 01       	movw	r22, r0
    10a0:	b3 9f       	mul	r27, r19
    10a2:	c0 01       	movw	r24, r0
    10a4:	a3 9f       	mul	r26, r19
    10a6:	70 0d       	add	r23, r0
    10a8:	81 1d       	adc	r24, r1
    10aa:	11 24       	eor	r1, r1
    10ac:	91 1d       	adc	r25, r1
    10ae:	b2 9f       	mul	r27, r18
    10b0:	70 0d       	add	r23, r0
    10b2:	81 1d       	adc	r24, r1
    10b4:	11 24       	eor	r1, r1
    10b6:	91 1d       	adc	r25, r1
    10b8:	08 95       	ret

000010ba <__usmulhisi3>:
    10ba:	0e 94 4e 08 	call	0x109c	; 0x109c <__umulhisi3>

000010be <__usmulhisi3_tail>:
    10be:	b7 ff       	sbrs	r27, 7
    10c0:	08 95       	ret
    10c2:	82 1b       	sub	r24, r18
    10c4:	93 0b       	sbc	r25, r19
    10c6:	08 95       	ret

000010c8 <__adddi3_s8>:
    10c8:	00 24       	eor	r0, r0
    10ca:	a7 fd       	sbrc	r26, 7
    10cc:	00 94       	com	r0
    10ce:	2a 0f       	add	r18, r26
    10d0:	30 1d       	adc	r19, r0
    10d2:	40 1d       	adc	r20, r0
    10d4:	50 1d       	adc	r21, r0
    10d6:	60 1d       	adc	r22, r0
    10d8:	70 1d       	adc	r23, r0
    10da:	80 1d       	adc	r24, r0
    10dc:	90 1d       	adc	r25, r0
    10de:	08 95       	ret

000010e0 <__subdi3>:
    10e0:	2a 19       	sub	r18, r10
    10e2:	3b 09       	sbc	r19, r11
    10e4:	4c 09       	sbc	r20, r12
    10e6:	5d 09       	sbc	r21, r13
    10e8:	6e 09       	sbc	r22, r14
    10ea:	7f 09       	sbc	r23, r15
    10ec:	80 0b       	sbc	r24, r16
    10ee:	91 0b       	sbc	r25, r17
    10f0:	08 95       	ret

000010f2 <__cmpdi2_s8>:
    10f2:	00 24       	eor	r0, r0
    10f4:	a7 fd       	sbrc	r26, 7
    10f6:	00 94       	com	r0
    10f8:	2a 17       	cp	r18, r26
    10fa:	30 05       	cpc	r19, r0
    10fc:	40 05       	cpc	r20, r0
    10fe:	50 05       	cpc	r21, r0
    1100:	60 05       	cpc	r22, r0
    1102:	70 05       	cpc	r23, r0
    1104:	80 05       	cpc	r24, r0
    1106:	90 05       	cpc	r25, r0
    1108:	08 95       	ret

0000110a <vsprintf>:
    110a:	ae e0       	ldi	r26, 0x0E	; 14
    110c:	b0 e0       	ldi	r27, 0x00	; 0
    110e:	eb e8       	ldi	r30, 0x8B	; 139
    1110:	f8 e0       	ldi	r31, 0x08	; 8
    1112:	0c 94 27 0b 	jmp	0x164e	; 0x164e <__prologue_saves__+0x1c>
    1116:	8c 01       	movw	r16, r24
    1118:	86 e0       	ldi	r24, 0x06	; 6
    111a:	8c 83       	std	Y+4, r24	; 0x04
    111c:	1a 83       	std	Y+2, r17	; 0x02
    111e:	09 83       	std	Y+1, r16	; 0x01
    1120:	8f ef       	ldi	r24, 0xFF	; 255
    1122:	9f e7       	ldi	r25, 0x7F	; 127
    1124:	9e 83       	std	Y+6, r25	; 0x06
    1126:	8d 83       	std	Y+5, r24	; 0x05
    1128:	ce 01       	movw	r24, r28
    112a:	01 96       	adiw	r24, 0x01	; 1
    112c:	0e 94 a1 08 	call	0x1142	; 0x1142 <vfprintf>
    1130:	ef 81       	ldd	r30, Y+7	; 0x07
    1132:	f8 85       	ldd	r31, Y+8	; 0x08
    1134:	e0 0f       	add	r30, r16
    1136:	f1 1f       	adc	r31, r17
    1138:	10 82       	st	Z, r1
    113a:	2e 96       	adiw	r28, 0x0e	; 14
    113c:	e4 e0       	ldi	r30, 0x04	; 4
    113e:	0c 94 43 0b 	jmp	0x1686	; 0x1686 <__epilogue_restores__+0x1c>

00001142 <vfprintf>:
    1142:	ac e0       	ldi	r26, 0x0C	; 12
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	e7 ea       	ldi	r30, 0xA7	; 167
    1148:	f8 e0       	ldi	r31, 0x08	; 8
    114a:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <__prologue_saves__>
    114e:	7c 01       	movw	r14, r24
    1150:	6b 01       	movw	r12, r22
    1152:	8a 01       	movw	r16, r20
    1154:	fc 01       	movw	r30, r24
    1156:	17 82       	std	Z+7, r1	; 0x07
    1158:	16 82       	std	Z+6, r1	; 0x06
    115a:	83 81       	ldd	r24, Z+3	; 0x03
    115c:	81 ff       	sbrs	r24, 1
    115e:	bd c1       	rjmp	.+890    	; 0x14da <vfprintf+0x398>
    1160:	ce 01       	movw	r24, r28
    1162:	01 96       	adiw	r24, 0x01	; 1
    1164:	4c 01       	movw	r8, r24
    1166:	f7 01       	movw	r30, r14
    1168:	93 81       	ldd	r25, Z+3	; 0x03
    116a:	f6 01       	movw	r30, r12
    116c:	93 fd       	sbrc	r25, 3
    116e:	85 91       	lpm	r24, Z+
    1170:	93 ff       	sbrs	r25, 3
    1172:	81 91       	ld	r24, Z+
    1174:	6f 01       	movw	r12, r30
    1176:	88 23       	and	r24, r24
    1178:	09 f4       	brne	.+2      	; 0x117c <vfprintf+0x3a>
    117a:	ab c1       	rjmp	.+854    	; 0x14d2 <vfprintf+0x390>
    117c:	85 32       	cpi	r24, 0x25	; 37
    117e:	39 f4       	brne	.+14     	; 0x118e <vfprintf+0x4c>
    1180:	93 fd       	sbrc	r25, 3
    1182:	85 91       	lpm	r24, Z+
    1184:	93 ff       	sbrs	r25, 3
    1186:	81 91       	ld	r24, Z+
    1188:	6f 01       	movw	r12, r30
    118a:	85 32       	cpi	r24, 0x25	; 37
    118c:	29 f4       	brne	.+10     	; 0x1198 <vfprintf+0x56>
    118e:	b7 01       	movw	r22, r14
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	0e 94 89 0a 	call	0x1512	; 0x1512 <fputc>
    1196:	e7 cf       	rjmp	.-50     	; 0x1166 <vfprintf+0x24>
    1198:	51 2c       	mov	r5, r1
    119a:	31 2c       	mov	r3, r1
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	20 32       	cpi	r18, 0x20	; 32
    11a0:	a0 f4       	brcc	.+40     	; 0x11ca <vfprintf+0x88>
    11a2:	8b 32       	cpi	r24, 0x2B	; 43
    11a4:	69 f0       	breq	.+26     	; 0x11c0 <vfprintf+0x7e>
    11a6:	30 f4       	brcc	.+12     	; 0x11b4 <vfprintf+0x72>
    11a8:	80 32       	cpi	r24, 0x20	; 32
    11aa:	59 f0       	breq	.+22     	; 0x11c2 <vfprintf+0x80>
    11ac:	83 32       	cpi	r24, 0x23	; 35
    11ae:	69 f4       	brne	.+26     	; 0x11ca <vfprintf+0x88>
    11b0:	20 61       	ori	r18, 0x10	; 16
    11b2:	2c c0       	rjmp	.+88     	; 0x120c <vfprintf+0xca>
    11b4:	8d 32       	cpi	r24, 0x2D	; 45
    11b6:	39 f0       	breq	.+14     	; 0x11c6 <vfprintf+0x84>
    11b8:	80 33       	cpi	r24, 0x30	; 48
    11ba:	39 f4       	brne	.+14     	; 0x11ca <vfprintf+0x88>
    11bc:	21 60       	ori	r18, 0x01	; 1
    11be:	26 c0       	rjmp	.+76     	; 0x120c <vfprintf+0xca>
    11c0:	22 60       	ori	r18, 0x02	; 2
    11c2:	24 60       	ori	r18, 0x04	; 4
    11c4:	23 c0       	rjmp	.+70     	; 0x120c <vfprintf+0xca>
    11c6:	28 60       	ori	r18, 0x08	; 8
    11c8:	21 c0       	rjmp	.+66     	; 0x120c <vfprintf+0xca>
    11ca:	27 fd       	sbrc	r18, 7
    11cc:	27 c0       	rjmp	.+78     	; 0x121c <vfprintf+0xda>
    11ce:	30 ed       	ldi	r19, 0xD0	; 208
    11d0:	38 0f       	add	r19, r24
    11d2:	3a 30       	cpi	r19, 0x0A	; 10
    11d4:	78 f4       	brcc	.+30     	; 0x11f4 <vfprintf+0xb2>
    11d6:	26 ff       	sbrs	r18, 6
    11d8:	06 c0       	rjmp	.+12     	; 0x11e6 <vfprintf+0xa4>
    11da:	fa e0       	ldi	r31, 0x0A	; 10
    11dc:	5f 9e       	mul	r5, r31
    11de:	30 0d       	add	r19, r0
    11e0:	11 24       	eor	r1, r1
    11e2:	53 2e       	mov	r5, r19
    11e4:	13 c0       	rjmp	.+38     	; 0x120c <vfprintf+0xca>
    11e6:	8a e0       	ldi	r24, 0x0A	; 10
    11e8:	38 9e       	mul	r3, r24
    11ea:	30 0d       	add	r19, r0
    11ec:	11 24       	eor	r1, r1
    11ee:	33 2e       	mov	r3, r19
    11f0:	20 62       	ori	r18, 0x20	; 32
    11f2:	0c c0       	rjmp	.+24     	; 0x120c <vfprintf+0xca>
    11f4:	8e 32       	cpi	r24, 0x2E	; 46
    11f6:	21 f4       	brne	.+8      	; 0x1200 <vfprintf+0xbe>
    11f8:	26 fd       	sbrc	r18, 6
    11fa:	6b c1       	rjmp	.+726    	; 0x14d2 <vfprintf+0x390>
    11fc:	20 64       	ori	r18, 0x40	; 64
    11fe:	06 c0       	rjmp	.+12     	; 0x120c <vfprintf+0xca>
    1200:	8c 36       	cpi	r24, 0x6C	; 108
    1202:	11 f4       	brne	.+4      	; 0x1208 <vfprintf+0xc6>
    1204:	20 68       	ori	r18, 0x80	; 128
    1206:	02 c0       	rjmp	.+4      	; 0x120c <vfprintf+0xca>
    1208:	88 36       	cpi	r24, 0x68	; 104
    120a:	41 f4       	brne	.+16     	; 0x121c <vfprintf+0xda>
    120c:	f6 01       	movw	r30, r12
    120e:	93 fd       	sbrc	r25, 3
    1210:	85 91       	lpm	r24, Z+
    1212:	93 ff       	sbrs	r25, 3
    1214:	81 91       	ld	r24, Z+
    1216:	6f 01       	movw	r12, r30
    1218:	81 11       	cpse	r24, r1
    121a:	c1 cf       	rjmp	.-126    	; 0x119e <vfprintf+0x5c>
    121c:	98 2f       	mov	r25, r24
    121e:	9f 7d       	andi	r25, 0xDF	; 223
    1220:	95 54       	subi	r25, 0x45	; 69
    1222:	93 30       	cpi	r25, 0x03	; 3
    1224:	28 f4       	brcc	.+10     	; 0x1230 <vfprintf+0xee>
    1226:	0c 5f       	subi	r16, 0xFC	; 252
    1228:	1f 4f       	sbci	r17, 0xFF	; 255
    122a:	ff e3       	ldi	r31, 0x3F	; 63
    122c:	f9 83       	std	Y+1, r31	; 0x01
    122e:	0d c0       	rjmp	.+26     	; 0x124a <vfprintf+0x108>
    1230:	83 36       	cpi	r24, 0x63	; 99
    1232:	31 f0       	breq	.+12     	; 0x1240 <vfprintf+0xfe>
    1234:	83 37       	cpi	r24, 0x73	; 115
    1236:	71 f0       	breq	.+28     	; 0x1254 <vfprintf+0x112>
    1238:	83 35       	cpi	r24, 0x53	; 83
    123a:	09 f0       	breq	.+2      	; 0x123e <vfprintf+0xfc>
    123c:	5b c0       	rjmp	.+182    	; 0x12f4 <vfprintf+0x1b2>
    123e:	22 c0       	rjmp	.+68     	; 0x1284 <vfprintf+0x142>
    1240:	f8 01       	movw	r30, r16
    1242:	80 81       	ld	r24, Z
    1244:	89 83       	std	Y+1, r24	; 0x01
    1246:	0e 5f       	subi	r16, 0xFE	; 254
    1248:	1f 4f       	sbci	r17, 0xFF	; 255
    124a:	44 24       	eor	r4, r4
    124c:	43 94       	inc	r4
    124e:	51 2c       	mov	r5, r1
    1250:	54 01       	movw	r10, r8
    1252:	15 c0       	rjmp	.+42     	; 0x127e <vfprintf+0x13c>
    1254:	38 01       	movw	r6, r16
    1256:	f2 e0       	ldi	r31, 0x02	; 2
    1258:	6f 0e       	add	r6, r31
    125a:	71 1c       	adc	r7, r1
    125c:	f8 01       	movw	r30, r16
    125e:	a0 80       	ld	r10, Z
    1260:	b1 80       	ldd	r11, Z+1	; 0x01
    1262:	26 ff       	sbrs	r18, 6
    1264:	03 c0       	rjmp	.+6      	; 0x126c <vfprintf+0x12a>
    1266:	65 2d       	mov	r22, r5
    1268:	70 e0       	ldi	r23, 0x00	; 0
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <vfprintf+0x12e>
    126c:	6f ef       	ldi	r22, 0xFF	; 255
    126e:	7f ef       	ldi	r23, 0xFF	; 255
    1270:	c5 01       	movw	r24, r10
    1272:	2c 87       	std	Y+12, r18	; 0x0c
    1274:	0e 94 7e 0a 	call	0x14fc	; 0x14fc <strnlen>
    1278:	2c 01       	movw	r4, r24
    127a:	83 01       	movw	r16, r6
    127c:	2c 85       	ldd	r18, Y+12	; 0x0c
    127e:	2f 77       	andi	r18, 0x7F	; 127
    1280:	22 2e       	mov	r2, r18
    1282:	17 c0       	rjmp	.+46     	; 0x12b2 <vfprintf+0x170>
    1284:	38 01       	movw	r6, r16
    1286:	f2 e0       	ldi	r31, 0x02	; 2
    1288:	6f 0e       	add	r6, r31
    128a:	71 1c       	adc	r7, r1
    128c:	f8 01       	movw	r30, r16
    128e:	a0 80       	ld	r10, Z
    1290:	b1 80       	ldd	r11, Z+1	; 0x01
    1292:	26 ff       	sbrs	r18, 6
    1294:	03 c0       	rjmp	.+6      	; 0x129c <vfprintf+0x15a>
    1296:	65 2d       	mov	r22, r5
    1298:	70 e0       	ldi	r23, 0x00	; 0
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <vfprintf+0x15e>
    129c:	6f ef       	ldi	r22, 0xFF	; 255
    129e:	7f ef       	ldi	r23, 0xFF	; 255
    12a0:	c5 01       	movw	r24, r10
    12a2:	2c 87       	std	Y+12, r18	; 0x0c
    12a4:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <strnlen_P>
    12a8:	2c 01       	movw	r4, r24
    12aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    12ac:	20 68       	ori	r18, 0x80	; 128
    12ae:	22 2e       	mov	r2, r18
    12b0:	83 01       	movw	r16, r6
    12b2:	23 fc       	sbrc	r2, 3
    12b4:	1b c0       	rjmp	.+54     	; 0x12ec <vfprintf+0x1aa>
    12b6:	83 2d       	mov	r24, r3
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	48 16       	cp	r4, r24
    12bc:	59 06       	cpc	r5, r25
    12be:	b0 f4       	brcc	.+44     	; 0x12ec <vfprintf+0x1aa>
    12c0:	b7 01       	movw	r22, r14
    12c2:	80 e2       	ldi	r24, 0x20	; 32
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 89 0a 	call	0x1512	; 0x1512 <fputc>
    12ca:	3a 94       	dec	r3
    12cc:	f4 cf       	rjmp	.-24     	; 0x12b6 <vfprintf+0x174>
    12ce:	f5 01       	movw	r30, r10
    12d0:	27 fc       	sbrc	r2, 7
    12d2:	85 91       	lpm	r24, Z+
    12d4:	27 fe       	sbrs	r2, 7
    12d6:	81 91       	ld	r24, Z+
    12d8:	5f 01       	movw	r10, r30
    12da:	b7 01       	movw	r22, r14
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	0e 94 89 0a 	call	0x1512	; 0x1512 <fputc>
    12e2:	31 10       	cpse	r3, r1
    12e4:	3a 94       	dec	r3
    12e6:	f1 e0       	ldi	r31, 0x01	; 1
    12e8:	4f 1a       	sub	r4, r31
    12ea:	51 08       	sbc	r5, r1
    12ec:	41 14       	cp	r4, r1
    12ee:	51 04       	cpc	r5, r1
    12f0:	71 f7       	brne	.-36     	; 0x12ce <vfprintf+0x18c>
    12f2:	e5 c0       	rjmp	.+458    	; 0x14be <vfprintf+0x37c>
    12f4:	84 36       	cpi	r24, 0x64	; 100
    12f6:	11 f0       	breq	.+4      	; 0x12fc <vfprintf+0x1ba>
    12f8:	89 36       	cpi	r24, 0x69	; 105
    12fa:	39 f5       	brne	.+78     	; 0x134a <vfprintf+0x208>
    12fc:	f8 01       	movw	r30, r16
    12fe:	27 ff       	sbrs	r18, 7
    1300:	07 c0       	rjmp	.+14     	; 0x1310 <vfprintf+0x1ce>
    1302:	60 81       	ld	r22, Z
    1304:	71 81       	ldd	r23, Z+1	; 0x01
    1306:	82 81       	ldd	r24, Z+2	; 0x02
    1308:	93 81       	ldd	r25, Z+3	; 0x03
    130a:	0c 5f       	subi	r16, 0xFC	; 252
    130c:	1f 4f       	sbci	r17, 0xFF	; 255
    130e:	08 c0       	rjmp	.+16     	; 0x1320 <vfprintf+0x1de>
    1310:	60 81       	ld	r22, Z
    1312:	71 81       	ldd	r23, Z+1	; 0x01
    1314:	88 27       	eor	r24, r24
    1316:	77 fd       	sbrc	r23, 7
    1318:	80 95       	com	r24
    131a:	98 2f       	mov	r25, r24
    131c:	0e 5f       	subi	r16, 0xFE	; 254
    131e:	1f 4f       	sbci	r17, 0xFF	; 255
    1320:	2f 76       	andi	r18, 0x6F	; 111
    1322:	b2 2e       	mov	r11, r18
    1324:	97 ff       	sbrs	r25, 7
    1326:	09 c0       	rjmp	.+18     	; 0x133a <vfprintf+0x1f8>
    1328:	90 95       	com	r25
    132a:	80 95       	com	r24
    132c:	70 95       	com	r23
    132e:	61 95       	neg	r22
    1330:	7f 4f       	sbci	r23, 0xFF	; 255
    1332:	8f 4f       	sbci	r24, 0xFF	; 255
    1334:	9f 4f       	sbci	r25, 0xFF	; 255
    1336:	20 68       	ori	r18, 0x80	; 128
    1338:	b2 2e       	mov	r11, r18
    133a:	2a e0       	ldi	r18, 0x0A	; 10
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	a4 01       	movw	r20, r8
    1340:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__ultoa_invert>
    1344:	a8 2e       	mov	r10, r24
    1346:	a8 18       	sub	r10, r8
    1348:	44 c0       	rjmp	.+136    	; 0x13d2 <vfprintf+0x290>
    134a:	85 37       	cpi	r24, 0x75	; 117
    134c:	29 f4       	brne	.+10     	; 0x1358 <vfprintf+0x216>
    134e:	2f 7e       	andi	r18, 0xEF	; 239
    1350:	b2 2e       	mov	r11, r18
    1352:	2a e0       	ldi	r18, 0x0A	; 10
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	25 c0       	rjmp	.+74     	; 0x13a2 <vfprintf+0x260>
    1358:	f2 2f       	mov	r31, r18
    135a:	f9 7f       	andi	r31, 0xF9	; 249
    135c:	bf 2e       	mov	r11, r31
    135e:	8f 36       	cpi	r24, 0x6F	; 111
    1360:	c1 f0       	breq	.+48     	; 0x1392 <vfprintf+0x250>
    1362:	18 f4       	brcc	.+6      	; 0x136a <vfprintf+0x228>
    1364:	88 35       	cpi	r24, 0x58	; 88
    1366:	79 f0       	breq	.+30     	; 0x1386 <vfprintf+0x244>
    1368:	b4 c0       	rjmp	.+360    	; 0x14d2 <vfprintf+0x390>
    136a:	80 37       	cpi	r24, 0x70	; 112
    136c:	19 f0       	breq	.+6      	; 0x1374 <vfprintf+0x232>
    136e:	88 37       	cpi	r24, 0x78	; 120
    1370:	21 f0       	breq	.+8      	; 0x137a <vfprintf+0x238>
    1372:	af c0       	rjmp	.+350    	; 0x14d2 <vfprintf+0x390>
    1374:	2f 2f       	mov	r18, r31
    1376:	20 61       	ori	r18, 0x10	; 16
    1378:	b2 2e       	mov	r11, r18
    137a:	b4 fe       	sbrs	r11, 4
    137c:	0d c0       	rjmp	.+26     	; 0x1398 <vfprintf+0x256>
    137e:	8b 2d       	mov	r24, r11
    1380:	84 60       	ori	r24, 0x04	; 4
    1382:	b8 2e       	mov	r11, r24
    1384:	09 c0       	rjmp	.+18     	; 0x1398 <vfprintf+0x256>
    1386:	24 ff       	sbrs	r18, 4
    1388:	0a c0       	rjmp	.+20     	; 0x139e <vfprintf+0x25c>
    138a:	9f 2f       	mov	r25, r31
    138c:	96 60       	ori	r25, 0x06	; 6
    138e:	b9 2e       	mov	r11, r25
    1390:	06 c0       	rjmp	.+12     	; 0x139e <vfprintf+0x25c>
    1392:	28 e0       	ldi	r18, 0x08	; 8
    1394:	30 e0       	ldi	r19, 0x00	; 0
    1396:	05 c0       	rjmp	.+10     	; 0x13a2 <vfprintf+0x260>
    1398:	20 e1       	ldi	r18, 0x10	; 16
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	02 c0       	rjmp	.+4      	; 0x13a2 <vfprintf+0x260>
    139e:	20 e1       	ldi	r18, 0x10	; 16
    13a0:	32 e0       	ldi	r19, 0x02	; 2
    13a2:	f8 01       	movw	r30, r16
    13a4:	b7 fe       	sbrs	r11, 7
    13a6:	07 c0       	rjmp	.+14     	; 0x13b6 <vfprintf+0x274>
    13a8:	60 81       	ld	r22, Z
    13aa:	71 81       	ldd	r23, Z+1	; 0x01
    13ac:	82 81       	ldd	r24, Z+2	; 0x02
    13ae:	93 81       	ldd	r25, Z+3	; 0x03
    13b0:	0c 5f       	subi	r16, 0xFC	; 252
    13b2:	1f 4f       	sbci	r17, 0xFF	; 255
    13b4:	06 c0       	rjmp	.+12     	; 0x13c2 <vfprintf+0x280>
    13b6:	60 81       	ld	r22, Z
    13b8:	71 81       	ldd	r23, Z+1	; 0x01
    13ba:	80 e0       	ldi	r24, 0x00	; 0
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	0e 5f       	subi	r16, 0xFE	; 254
    13c0:	1f 4f       	sbci	r17, 0xFF	; 255
    13c2:	a4 01       	movw	r20, r8
    13c4:	0e 94 bb 0a 	call	0x1576	; 0x1576 <__ultoa_invert>
    13c8:	a8 2e       	mov	r10, r24
    13ca:	a8 18       	sub	r10, r8
    13cc:	fb 2d       	mov	r31, r11
    13ce:	ff 77       	andi	r31, 0x7F	; 127
    13d0:	bf 2e       	mov	r11, r31
    13d2:	b6 fe       	sbrs	r11, 6
    13d4:	0b c0       	rjmp	.+22     	; 0x13ec <vfprintf+0x2aa>
    13d6:	2b 2d       	mov	r18, r11
    13d8:	2e 7f       	andi	r18, 0xFE	; 254
    13da:	a5 14       	cp	r10, r5
    13dc:	50 f4       	brcc	.+20     	; 0x13f2 <vfprintf+0x2b0>
    13de:	b4 fe       	sbrs	r11, 4
    13e0:	0a c0       	rjmp	.+20     	; 0x13f6 <vfprintf+0x2b4>
    13e2:	b2 fc       	sbrc	r11, 2
    13e4:	08 c0       	rjmp	.+16     	; 0x13f6 <vfprintf+0x2b4>
    13e6:	2b 2d       	mov	r18, r11
    13e8:	2e 7e       	andi	r18, 0xEE	; 238
    13ea:	05 c0       	rjmp	.+10     	; 0x13f6 <vfprintf+0x2b4>
    13ec:	7a 2c       	mov	r7, r10
    13ee:	2b 2d       	mov	r18, r11
    13f0:	03 c0       	rjmp	.+6      	; 0x13f8 <vfprintf+0x2b6>
    13f2:	7a 2c       	mov	r7, r10
    13f4:	01 c0       	rjmp	.+2      	; 0x13f8 <vfprintf+0x2b6>
    13f6:	75 2c       	mov	r7, r5
    13f8:	24 ff       	sbrs	r18, 4
    13fa:	0d c0       	rjmp	.+26     	; 0x1416 <vfprintf+0x2d4>
    13fc:	fe 01       	movw	r30, r28
    13fe:	ea 0d       	add	r30, r10
    1400:	f1 1d       	adc	r31, r1
    1402:	80 81       	ld	r24, Z
    1404:	80 33       	cpi	r24, 0x30	; 48
    1406:	11 f4       	brne	.+4      	; 0x140c <vfprintf+0x2ca>
    1408:	29 7e       	andi	r18, 0xE9	; 233
    140a:	09 c0       	rjmp	.+18     	; 0x141e <vfprintf+0x2dc>
    140c:	22 ff       	sbrs	r18, 2
    140e:	06 c0       	rjmp	.+12     	; 0x141c <vfprintf+0x2da>
    1410:	73 94       	inc	r7
    1412:	73 94       	inc	r7
    1414:	04 c0       	rjmp	.+8      	; 0x141e <vfprintf+0x2dc>
    1416:	82 2f       	mov	r24, r18
    1418:	86 78       	andi	r24, 0x86	; 134
    141a:	09 f0       	breq	.+2      	; 0x141e <vfprintf+0x2dc>
    141c:	73 94       	inc	r7
    141e:	23 fd       	sbrc	r18, 3
    1420:	13 c0       	rjmp	.+38     	; 0x1448 <vfprintf+0x306>
    1422:	20 ff       	sbrs	r18, 0
    1424:	06 c0       	rjmp	.+12     	; 0x1432 <vfprintf+0x2f0>
    1426:	5a 2c       	mov	r5, r10
    1428:	73 14       	cp	r7, r3
    142a:	18 f4       	brcc	.+6      	; 0x1432 <vfprintf+0x2f0>
    142c:	53 0c       	add	r5, r3
    142e:	57 18       	sub	r5, r7
    1430:	73 2c       	mov	r7, r3
    1432:	73 14       	cp	r7, r3
    1434:	68 f4       	brcc	.+26     	; 0x1450 <vfprintf+0x30e>
    1436:	b7 01       	movw	r22, r14
    1438:	80 e2       	ldi	r24, 0x20	; 32
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	2c 87       	std	Y+12, r18	; 0x0c
    143e:	0e 94 89 0a 	call	0x1512	; 0x1512 <fputc>
    1442:	73 94       	inc	r7
    1444:	2c 85       	ldd	r18, Y+12	; 0x0c
    1446:	f5 cf       	rjmp	.-22     	; 0x1432 <vfprintf+0x2f0>
    1448:	73 14       	cp	r7, r3
    144a:	10 f4       	brcc	.+4      	; 0x1450 <vfprintf+0x30e>
    144c:	37 18       	sub	r3, r7
    144e:	01 c0       	rjmp	.+2      	; 0x1452 <vfprintf+0x310>
    1450:	31 2c       	mov	r3, r1
    1452:	24 ff       	sbrs	r18, 4
    1454:	12 c0       	rjmp	.+36     	; 0x147a <vfprintf+0x338>
    1456:	b7 01       	movw	r22, r14
    1458:	80 e3       	ldi	r24, 0x30	; 48
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	2c 87       	std	Y+12, r18	; 0x0c
    145e:	0e 94 89 0a 	call	0x1512	; 0x1512 <fputc>
    1462:	2c 85       	ldd	r18, Y+12	; 0x0c
    1464:	22 ff       	sbrs	r18, 2
    1466:	17 c0       	rjmp	.+46     	; 0x1496 <vfprintf+0x354>
    1468:	21 ff       	sbrs	r18, 1
    146a:	03 c0       	rjmp	.+6      	; 0x1472 <vfprintf+0x330>
    146c:	88 e5       	ldi	r24, 0x58	; 88
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <vfprintf+0x334>
    1472:	88 e7       	ldi	r24, 0x78	; 120
    1474:	90 e0       	ldi	r25, 0x00	; 0
    1476:	b7 01       	movw	r22, r14
    1478:	0c c0       	rjmp	.+24     	; 0x1492 <vfprintf+0x350>
    147a:	82 2f       	mov	r24, r18
    147c:	86 78       	andi	r24, 0x86	; 134
    147e:	59 f0       	breq	.+22     	; 0x1496 <vfprintf+0x354>
    1480:	21 fd       	sbrc	r18, 1
    1482:	02 c0       	rjmp	.+4      	; 0x1488 <vfprintf+0x346>
    1484:	80 e2       	ldi	r24, 0x20	; 32
    1486:	01 c0       	rjmp	.+2      	; 0x148a <vfprintf+0x348>
    1488:	8b e2       	ldi	r24, 0x2B	; 43
    148a:	27 fd       	sbrc	r18, 7
    148c:	8d e2       	ldi	r24, 0x2D	; 45
    148e:	b7 01       	movw	r22, r14
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	0e 94 89 0a 	call	0x1512	; 0x1512 <fputc>
    1496:	a5 14       	cp	r10, r5
    1498:	38 f4       	brcc	.+14     	; 0x14a8 <vfprintf+0x366>
    149a:	b7 01       	movw	r22, r14
    149c:	80 e3       	ldi	r24, 0x30	; 48
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	0e 94 89 0a 	call	0x1512	; 0x1512 <fputc>
    14a4:	5a 94       	dec	r5
    14a6:	f7 cf       	rjmp	.-18     	; 0x1496 <vfprintf+0x354>
    14a8:	aa 94       	dec	r10
    14aa:	f4 01       	movw	r30, r8
    14ac:	ea 0d       	add	r30, r10
    14ae:	f1 1d       	adc	r31, r1
    14b0:	80 81       	ld	r24, Z
    14b2:	b7 01       	movw	r22, r14
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	0e 94 89 0a 	call	0x1512	; 0x1512 <fputc>
    14ba:	a1 10       	cpse	r10, r1
    14bc:	f5 cf       	rjmp	.-22     	; 0x14a8 <vfprintf+0x366>
    14be:	33 20       	and	r3, r3
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <vfprintf+0x382>
    14c2:	51 ce       	rjmp	.-862    	; 0x1166 <vfprintf+0x24>
    14c4:	b7 01       	movw	r22, r14
    14c6:	80 e2       	ldi	r24, 0x20	; 32
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	0e 94 89 0a 	call	0x1512	; 0x1512 <fputc>
    14ce:	3a 94       	dec	r3
    14d0:	f6 cf       	rjmp	.-20     	; 0x14be <vfprintf+0x37c>
    14d2:	f7 01       	movw	r30, r14
    14d4:	86 81       	ldd	r24, Z+6	; 0x06
    14d6:	97 81       	ldd	r25, Z+7	; 0x07
    14d8:	02 c0       	rjmp	.+4      	; 0x14de <vfprintf+0x39c>
    14da:	8f ef       	ldi	r24, 0xFF	; 255
    14dc:	9f ef       	ldi	r25, 0xFF	; 255
    14de:	2c 96       	adiw	r28, 0x0c	; 12
    14e0:	e2 e1       	ldi	r30, 0x12	; 18
    14e2:	0c 94 35 0b 	jmp	0x166a	; 0x166a <__epilogue_restores__>

000014e6 <strnlen_P>:
    14e6:	fc 01       	movw	r30, r24
    14e8:	05 90       	lpm	r0, Z+
    14ea:	61 50       	subi	r22, 0x01	; 1
    14ec:	70 40       	sbci	r23, 0x00	; 0
    14ee:	01 10       	cpse	r0, r1
    14f0:	d8 f7       	brcc	.-10     	; 0x14e8 <strnlen_P+0x2>
    14f2:	80 95       	com	r24
    14f4:	90 95       	com	r25
    14f6:	8e 0f       	add	r24, r30
    14f8:	9f 1f       	adc	r25, r31
    14fa:	08 95       	ret

000014fc <strnlen>:
    14fc:	fc 01       	movw	r30, r24
    14fe:	61 50       	subi	r22, 0x01	; 1
    1500:	70 40       	sbci	r23, 0x00	; 0
    1502:	01 90       	ld	r0, Z+
    1504:	01 10       	cpse	r0, r1
    1506:	d8 f7       	brcc	.-10     	; 0x14fe <strnlen+0x2>
    1508:	80 95       	com	r24
    150a:	90 95       	com	r25
    150c:	8e 0f       	add	r24, r30
    150e:	9f 1f       	adc	r25, r31
    1510:	08 95       	ret

00001512 <fputc>:
    1512:	0f 93       	push	r16
    1514:	1f 93       	push	r17
    1516:	cf 93       	push	r28
    1518:	df 93       	push	r29
    151a:	18 2f       	mov	r17, r24
    151c:	09 2f       	mov	r16, r25
    151e:	eb 01       	movw	r28, r22
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	81 fd       	sbrc	r24, 1
    1524:	03 c0       	rjmp	.+6      	; 0x152c <fputc+0x1a>
    1526:	8f ef       	ldi	r24, 0xFF	; 255
    1528:	9f ef       	ldi	r25, 0xFF	; 255
    152a:	20 c0       	rjmp	.+64     	; 0x156c <fputc+0x5a>
    152c:	82 ff       	sbrs	r24, 2
    152e:	10 c0       	rjmp	.+32     	; 0x1550 <fputc+0x3e>
    1530:	4e 81       	ldd	r20, Y+6	; 0x06
    1532:	5f 81       	ldd	r21, Y+7	; 0x07
    1534:	2c 81       	ldd	r18, Y+4	; 0x04
    1536:	3d 81       	ldd	r19, Y+5	; 0x05
    1538:	42 17       	cp	r20, r18
    153a:	53 07       	cpc	r21, r19
    153c:	7c f4       	brge	.+30     	; 0x155c <fputc+0x4a>
    153e:	e8 81       	ld	r30, Y
    1540:	f9 81       	ldd	r31, Y+1	; 0x01
    1542:	9f 01       	movw	r18, r30
    1544:	2f 5f       	subi	r18, 0xFF	; 255
    1546:	3f 4f       	sbci	r19, 0xFF	; 255
    1548:	39 83       	std	Y+1, r19	; 0x01
    154a:	28 83       	st	Y, r18
    154c:	10 83       	st	Z, r17
    154e:	06 c0       	rjmp	.+12     	; 0x155c <fputc+0x4a>
    1550:	e8 85       	ldd	r30, Y+8	; 0x08
    1552:	f9 85       	ldd	r31, Y+9	; 0x09
    1554:	81 2f       	mov	r24, r17
    1556:	09 95       	icall
    1558:	89 2b       	or	r24, r25
    155a:	29 f7       	brne	.-54     	; 0x1526 <fputc+0x14>
    155c:	2e 81       	ldd	r18, Y+6	; 0x06
    155e:	3f 81       	ldd	r19, Y+7	; 0x07
    1560:	2f 5f       	subi	r18, 0xFF	; 255
    1562:	3f 4f       	sbci	r19, 0xFF	; 255
    1564:	3f 83       	std	Y+7, r19	; 0x07
    1566:	2e 83       	std	Y+6, r18	; 0x06
    1568:	81 2f       	mov	r24, r17
    156a:	90 2f       	mov	r25, r16
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	1f 91       	pop	r17
    1572:	0f 91       	pop	r16
    1574:	08 95       	ret

00001576 <__ultoa_invert>:
    1576:	fa 01       	movw	r30, r20
    1578:	aa 27       	eor	r26, r26
    157a:	28 30       	cpi	r18, 0x08	; 8
    157c:	51 f1       	breq	.+84     	; 0x15d2 <__ultoa_invert+0x5c>
    157e:	20 31       	cpi	r18, 0x10	; 16
    1580:	81 f1       	breq	.+96     	; 0x15e2 <__ultoa_invert+0x6c>
    1582:	e8 94       	clt
    1584:	6f 93       	push	r22
    1586:	6e 7f       	andi	r22, 0xFE	; 254
    1588:	6e 5f       	subi	r22, 0xFE	; 254
    158a:	7f 4f       	sbci	r23, 0xFF	; 255
    158c:	8f 4f       	sbci	r24, 0xFF	; 255
    158e:	9f 4f       	sbci	r25, 0xFF	; 255
    1590:	af 4f       	sbci	r26, 0xFF	; 255
    1592:	b1 e0       	ldi	r27, 0x01	; 1
    1594:	3e d0       	rcall	.+124    	; 0x1612 <__ultoa_invert+0x9c>
    1596:	b4 e0       	ldi	r27, 0x04	; 4
    1598:	3c d0       	rcall	.+120    	; 0x1612 <__ultoa_invert+0x9c>
    159a:	67 0f       	add	r22, r23
    159c:	78 1f       	adc	r23, r24
    159e:	89 1f       	adc	r24, r25
    15a0:	9a 1f       	adc	r25, r26
    15a2:	a1 1d       	adc	r26, r1
    15a4:	68 0f       	add	r22, r24
    15a6:	79 1f       	adc	r23, r25
    15a8:	8a 1f       	adc	r24, r26
    15aa:	91 1d       	adc	r25, r1
    15ac:	a1 1d       	adc	r26, r1
    15ae:	6a 0f       	add	r22, r26
    15b0:	71 1d       	adc	r23, r1
    15b2:	81 1d       	adc	r24, r1
    15b4:	91 1d       	adc	r25, r1
    15b6:	a1 1d       	adc	r26, r1
    15b8:	20 d0       	rcall	.+64     	; 0x15fa <__ultoa_invert+0x84>
    15ba:	09 f4       	brne	.+2      	; 0x15be <__ultoa_invert+0x48>
    15bc:	68 94       	set
    15be:	3f 91       	pop	r19
    15c0:	2a e0       	ldi	r18, 0x0A	; 10
    15c2:	26 9f       	mul	r18, r22
    15c4:	11 24       	eor	r1, r1
    15c6:	30 19       	sub	r19, r0
    15c8:	30 5d       	subi	r19, 0xD0	; 208
    15ca:	31 93       	st	Z+, r19
    15cc:	de f6       	brtc	.-74     	; 0x1584 <__ultoa_invert+0xe>
    15ce:	cf 01       	movw	r24, r30
    15d0:	08 95       	ret
    15d2:	46 2f       	mov	r20, r22
    15d4:	47 70       	andi	r20, 0x07	; 7
    15d6:	40 5d       	subi	r20, 0xD0	; 208
    15d8:	41 93       	st	Z+, r20
    15da:	b3 e0       	ldi	r27, 0x03	; 3
    15dc:	0f d0       	rcall	.+30     	; 0x15fc <__ultoa_invert+0x86>
    15de:	c9 f7       	brne	.-14     	; 0x15d2 <__ultoa_invert+0x5c>
    15e0:	f6 cf       	rjmp	.-20     	; 0x15ce <__ultoa_invert+0x58>
    15e2:	46 2f       	mov	r20, r22
    15e4:	4f 70       	andi	r20, 0x0F	; 15
    15e6:	40 5d       	subi	r20, 0xD0	; 208
    15e8:	4a 33       	cpi	r20, 0x3A	; 58
    15ea:	18 f0       	brcs	.+6      	; 0x15f2 <__ultoa_invert+0x7c>
    15ec:	49 5d       	subi	r20, 0xD9	; 217
    15ee:	31 fd       	sbrc	r19, 1
    15f0:	40 52       	subi	r20, 0x20	; 32
    15f2:	41 93       	st	Z+, r20
    15f4:	02 d0       	rcall	.+4      	; 0x15fa <__ultoa_invert+0x84>
    15f6:	a9 f7       	brne	.-22     	; 0x15e2 <__ultoa_invert+0x6c>
    15f8:	ea cf       	rjmp	.-44     	; 0x15ce <__ultoa_invert+0x58>
    15fa:	b4 e0       	ldi	r27, 0x04	; 4
    15fc:	a6 95       	lsr	r26
    15fe:	97 95       	ror	r25
    1600:	87 95       	ror	r24
    1602:	77 95       	ror	r23
    1604:	67 95       	ror	r22
    1606:	ba 95       	dec	r27
    1608:	c9 f7       	brne	.-14     	; 0x15fc <__ultoa_invert+0x86>
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	61 05       	cpc	r22, r1
    160e:	71 05       	cpc	r23, r1
    1610:	08 95       	ret
    1612:	9b 01       	movw	r18, r22
    1614:	ac 01       	movw	r20, r24
    1616:	0a 2e       	mov	r0, r26
    1618:	06 94       	lsr	r0
    161a:	57 95       	ror	r21
    161c:	47 95       	ror	r20
    161e:	37 95       	ror	r19
    1620:	27 95       	ror	r18
    1622:	ba 95       	dec	r27
    1624:	c9 f7       	brne	.-14     	; 0x1618 <__ultoa_invert+0xa2>
    1626:	62 0f       	add	r22, r18
    1628:	73 1f       	adc	r23, r19
    162a:	84 1f       	adc	r24, r20
    162c:	95 1f       	adc	r25, r21
    162e:	a0 1d       	adc	r26, r0
    1630:	08 95       	ret

00001632 <__prologue_saves__>:
    1632:	2f 92       	push	r2
    1634:	3f 92       	push	r3
    1636:	4f 92       	push	r4
    1638:	5f 92       	push	r5
    163a:	6f 92       	push	r6
    163c:	7f 92       	push	r7
    163e:	8f 92       	push	r8
    1640:	9f 92       	push	r9
    1642:	af 92       	push	r10
    1644:	bf 92       	push	r11
    1646:	cf 92       	push	r12
    1648:	df 92       	push	r13
    164a:	ef 92       	push	r14
    164c:	ff 92       	push	r15
    164e:	0f 93       	push	r16
    1650:	1f 93       	push	r17
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
    165a:	ca 1b       	sub	r28, r26
    165c:	db 0b       	sbc	r29, r27
    165e:	0f b6       	in	r0, 0x3f	; 63
    1660:	f8 94       	cli
    1662:	de bf       	out	0x3e, r29	; 62
    1664:	0f be       	out	0x3f, r0	; 63
    1666:	cd bf       	out	0x3d, r28	; 61
    1668:	09 94       	ijmp

0000166a <__epilogue_restores__>:
    166a:	2a 88       	ldd	r2, Y+18	; 0x12
    166c:	39 88       	ldd	r3, Y+17	; 0x11
    166e:	48 88       	ldd	r4, Y+16	; 0x10
    1670:	5f 84       	ldd	r5, Y+15	; 0x0f
    1672:	6e 84       	ldd	r6, Y+14	; 0x0e
    1674:	7d 84       	ldd	r7, Y+13	; 0x0d
    1676:	8c 84       	ldd	r8, Y+12	; 0x0c
    1678:	9b 84       	ldd	r9, Y+11	; 0x0b
    167a:	aa 84       	ldd	r10, Y+10	; 0x0a
    167c:	b9 84       	ldd	r11, Y+9	; 0x09
    167e:	c8 84       	ldd	r12, Y+8	; 0x08
    1680:	df 80       	ldd	r13, Y+7	; 0x07
    1682:	ee 80       	ldd	r14, Y+6	; 0x06
    1684:	fd 80       	ldd	r15, Y+5	; 0x05
    1686:	0c 81       	ldd	r16, Y+4	; 0x04
    1688:	1b 81       	ldd	r17, Y+3	; 0x03
    168a:	aa 81       	ldd	r26, Y+2	; 0x02
    168c:	b9 81       	ldd	r27, Y+1	; 0x01
    168e:	ce 0f       	add	r28, r30
    1690:	d1 1d       	adc	r29, r1
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	de bf       	out	0x3e, r29	; 62
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	cd bf       	out	0x3d, r28	; 61
    169c:	ed 01       	movw	r28, r26
    169e:	08 95       	ret

000016a0 <_exit>:
    16a0:	f8 94       	cli

000016a2 <__stop_program>:
    16a2:	ff cf       	rjmp	.-2      	; 0x16a2 <__stop_program>
